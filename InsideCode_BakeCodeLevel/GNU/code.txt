float PI = 3.141592;
int main(){
	// 하하 안녕하세요. 나는 주석이라 합니다.

	/* 저도 주석이에요!! 
	vec2f pos1 = _vec2f(10, 20);
	vec2f pos2 = _vec2f(3, 4);
	*/
	
	vec2f pos1 = _vec2f(10, 20);
	vec2f pos2 = _vec2f(3, 4);

	dbg("pos1 : (", pos1.x, ", ", pos1.y, ")\n");
	dbg("pos2 : (", pos2.x, ", ", pos2.y, ")\n");

	line2d line1 = _line2d(pos1, pos2);
	
	dbg("line1 : fp (", line1.fp.x, ", ", line1.fp.y, "), lp(", line1.lp.x, ", ", line1.lp.y, ")\n");

	float len = get_distance2d(line1);
	dbg("len : ", len, "\n");

	circle cir1 = _circle(pos1, len);
	dbg("cir1 : center(", cir1.center.x, ", ", cir1.center.y, "), radius(", cir1.radius, ")\n");

	vec2f ratePos = get_pos_in_LineAndRatioAB(line1, 2, 1);
	dbg("ratePos : (", ratePos.x, ", ", ratePos.y, ")\n");

	angle2d ang1 = _angle2d_delta(pos1.x - pos2.x, pos1.y - pos2.y);
	dbg("angle1( rad : ", ang1.radian, ", delta : (", ang1.delta.x, ", ", ang1.delta.y, "))\n");
	angle2d ang2 = _angle2d(PI / 3);
	dbg("angle2( rad : ", ang2.radian, ", delta : (", ang2.delta.x, ", ", ang2.delta.y, "))\n");
	angle2d rang = addAngle(ang1, ang2);
	dbg("rang( rad : ", rang.radian, ", delta : (", rang.delta.x, ", ", rang.delta.y, "))\n");

	pos1 = _vec2f(pos1.x + rang.delta.x * 30, pos1.y + rang.delta.y * 30);
	dbg("pos1 : (", pos1.x, ", ", pos1.y, ")\n");
	vec2f cross = get_cross_line(_line2d(pos1, _vec2f(10, 0)), _line2d(pos2, cir1.center));
	dbg("cross : (", cross.x, ", ", cross.y, ")\n");

	vec2f[2] circross = get_cross_CircleAndLine(cir1, _line2d(cross, _vec2f(20, 0)));
	dbg("circross[0] : (", circross[0].x, ", ", circross[0].y, ")\n");
	dbg("circross[1] : (", circross[1].x, ", ", circross[1].y, ")\n");
	vec2f enableCross = _vec2f(0, 0);
	if(isNAN(circross[0].x)){
		dbg("cross 0 is nan!!\n");
		enableCross = circross[1];
	}
	if(isNAN(circross[1].x)){
		dbg("cross 1 is nan!!\n");
		enableCross = circross[0];
	}
	dbg("enableCross : (", enableCross.x, ", ", enableCross.y, ")\n");

	int bSiz = 100;
	vec2f[100] bezierCurve = get_poses_in_Bezier1F(pos1, cross, pos2, bSiz);
	int i=0;while(i<bSiz){
		dbg("pos[", i, "] : (", bezierCurve[i].x, ", ", bezierCurve[i].y, ")\n");
		i+=1;
	}
	return 0;
}