Inside Code Bake System Start
ICB_StaticInit...start
ICB_StaticInit create basic types start
ICB_StaticInit Create Type : int...finish
ICB_StaticInit Create Type : char...finish
ICB_StaticInit Create Type : short...finish
ICB_StaticInit Create Type : float...finish
ICB_StaticInit Create Type : bool...finish
ICB_StaticInit Create Type : uint...finish
ICB_StaticInit Create Type : ushort...finish
ICB_StaticInit Create Type : uchar...finish
ICB_StaticInit create basic types finish
ICB_StaticInit create basic operation start
ICB_StaticInit Create Operation : [[]...finish
ICB_StaticInit Create Operation : [.]...finish
ICB_StaticInit Create Operation : [->]...finish
ICB_StaticInit Create Operation : [&]...finish
ICB_StaticInit Create Operation : [*]...finish
ICB_StaticInit Create Operation : [*]...finish
ICB_StaticInit Create Operation : [/]...finish
ICB_StaticInit Create Operation : [%]...finish
ICB_StaticInit Create Operation : [+]...finish
ICB_StaticInit Create Operation : [-]...finish
ICB_StaticInit Create Operation : [==]...finish
ICB_StaticInit Create Operation : [<]...finish
ICB_StaticInit Create Operation : [>]...finish
ICB_StaticInit Create Operation : [<=]...finish
ICB_StaticInit Create Operation : [>=]...finish
ICB_StaticInit Create Operation : [!=]...finish
ICB_StaticInit Create Operation : [!]...finish
ICB_StaticInit Create Operation : [&&]...finish
ICB_StaticInit Create Operation : [||]...finish
ICB_StaticInit create basic operation finish
ICB_StaticInit finish
Create_New_ICB_Extension_Init : exGeometry Initialization...start
Create_New_ICB_Extension_Init Allocate Extension Data Memory...finish
Create_New_ICB_Extension_Init__Bake_Extension...start
Create_New_ICB_Extension_Init__Bake_Extension__GetCodeFromText...finish
Create_New_ICB_Extension_Init__Bake_Extension__AddTextBlocks...finish
Create_New_ICB_Extension_Init__Bake_Extension__ScanStructTypes...finish
Create_New_ICB_Extension_Init__Bake_Extension__AddStructTypes...finish
Create_New_ICB_Extension_Init__Bake_Extension__ScanFunctions...finish
Create_New_ICB_Extension_Init__Bake_Extension__AddFunctions...finish
Create_New_ICB_Extension_Init__Bake_Extension finish
Create_New_ICB_Extension_Init Set_Function_Pointers start
Create_New_ICB_Extension_Init Set_Function_Pointers function name : _vec2f...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : _circle...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : _line2d...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : _angle2d_delta...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : _angle2d...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : get_cross_CircleAndLine...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : get_pos_in_LineAndRatioAB...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : get_poses_in_Bezier1F...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : get_distance2d...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : isPosInRect2d...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : addAngle...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : get_cross_line...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : isNAN...finish
Create_New_ICB_Extension_Init Allocate Extension Data Memory finish
Create_New_ICB[0x7fffffff71e0] Initialization...finish
ICB[0x7fffffff71e0] BakeCode start. filename : [code.txt]
ICB[0x7fffffff71e0] BakeCode_GetCodeFromText...finish
ICB[0x7fffffff71e0] BakeCode_AddTextBlocks...-----------------------------------------

 full text : 
float PI = 3.141592;
int main(){
	vec2f pos1 = _vec2f(10, 20);
	vec2f pos2 = _vec2f(3, 4);

	dbg("pos1 : (", pos1.x, ", ", pos1.y, ")\n");
	dbg("pos2 : (", pos2.x, ", ", pos2.y, ")\n");

	line2d line1 = _line2d(pos1, pos2);
	
	dbg("line1 : fp (", line1.fp.x, ", ", line1.fp.y, "), lp(", line1.lp.x, ", ", line1.lp.y, ")\n");

	float len = get_distance2d(line1);
	dbg("len : ", len, "\n");

	circle cir1 = _circle(pos1, len);
	dbg("cir1 : center(", cir1.center.x, ", ", cir1.center.y, "), radius(", cir1.radius, ")\n");

	vec2f ratePos = get_pos_in_LineAndRatioAB(line1, 2, 1);
	dbg("ratePos : (", ratePos.x, ", ", ratePos.y, ")\n");

	angle2d ang1 = _angle2d_delta(pos1.x - pos2.x, pos1.y - pos2.y);
	dbg("angle1( rad : ", ang1.radian, ", delta : (", ang1.delta.x, ", ", ang1.delta.y, "))\n");
	angle2d ang2 = _angle2d(PI / 3);
	dbg("angle2( rad : ", ang2.radian, ", delta : (", ang2.delta.x, ", ", ang2.delta.y, "))\n");
	angle2d rang = addAngle(ang1, ang2);
	dbg("rang( rad : ", rang.radian, ", delta : (", rang.delta.x, ", ", rang.delta.y, "))\n");

	pos1 = _vec2f(pos1.x + rang.delta.x * 30, pos1.y + rang.delta.y * 30);
	dbg("pos1 : (", pos1.x, ", ", pos1.y, ")\n");
	vec2f cross = get_cross_line(_line2d(pos1, _vec2f(10, 0)), _line2d(pos2, cir1.center));
	dbg("cross : (", cross.x, ", ", cross.y, ")\n");

	vec2f[2] circross = get_cross_CircleAndLine(cir1, _line2d(cross, _vec2f(20, 0)));
	dbg("circross[0] : (", circross[0].x, ", ", circross[0].y, ")\n");
	dbg("circross[1] : (", circross[1].x, ", ", circross[1].y, ")\n");
	vec2f enableCross = _vec2f(0, 0);
	if(isNAN(circross[0].x)){
		dbg("cross 0 is nan!!\n");
		enableCross = circross[1];
	}
	if(isNAN(circross[1].x)){
		dbg("cross 1 is nan!!\n");
		enableCross = circross[0];
	}
	dbg("enableCross : (", enableCross.x, ", ", enableCross.y, ")\n");

	int bSiz = 100;
	vec2f[100] bezierCurve = get_poses_in_Bezier1F(pos1, cross, pos2, bSiz);
	int i=0;while(i<bSiz){
		dbg("pos[", i, "] : (", bezierCurve[i].x, ", ", bezierCurve[i].y, ")\n");
		i+=1;
	}
	return 0;
}
4"float"
7"PI" 	9"=" 	11"3" 	12"."
18"141592" 	19";" 	23"int" 	28"main"
29"(" 	30")" 	31"{" 	38"vec2f"
43"pos1" 	45"=" 	52"_vec2f" 	53"("
55"10" 	56"," 	59"20" 	60")"
61";" 	68"vec2f" 	73"pos2" 	75"="
82"_vec2f" 	83"(" 	84"3" 	85","
87"4" 	88")" 	89";" 	95"dbg"
96"(" 	106""pos1 : ("" 	107"," 	112"pos1"
113"." 	114"x" 	115"," 	120"", ""
121"," 	126"pos1" 	127"." 	128"y"
129"," 	135"")\n"" 	136")" 	137";"
142"dbg" 	143"(" 	153""pos2 : ("" 	154","
159"pos2" 	160"." 	161"x" 	162","
167"", "" 	168"," 	173"pos2" 	174"."
175"y" 	176"," 	182"")\n"" 	183")"
184";" 	193"line2d" 	199"line1" 	201"="
209"_line2d" 	210"(" 	214"pos1" 	215","
220"pos2" 	221")" 	222";" 	229"dbg"
230"(" 	244""line1 : fp ("" 	245"," 	251"line1"
252"." 	254"fp" 	255"." 	256"x"
257"," 	262"", "" 	263"," 	269"line1"
270"." 	272"fp" 	273"." 	274"y"
275"," 	284""), lp("" 	285"," 	291"line1"
292"." 	294"lp" 	295"." 	296"x"
297"," 	302"", "" 	303"," 	309"line1"
310"." 	312"lp" 	313"." 	314"y"
315"," 	321"")\n"" 	322")" 	323";"
331"float" 	335"len" 	337"=" 	352"get_distance2d"
353"(" 	358"line1" 	359")" 	360";"
365"dbg" 	366"(" 	374""len : "" 	375","
379"len" 	380"," 	385""\n"" 	386")"
387";" 	396"circle" 	401"cir1" 	403"="
411"_circle" 	412"(" 	416"pos1" 	417","
421"len" 	422")" 	423";" 	428"dbg"
429"(" 	445""cir1 : center("" 	446"," 	451"cir1"
452"." 	458"center" 	459"." 	460"x"
461"," 	466"", "" 	467"," 	472"cir1"
473"." 	479"center" 	480"." 	481"y"
482"," 	495""), radius("" 	496"," 	501"cir1"
502"." 	508"radius" 	509"," 	515"")\n""
516")" 	517";" 	525"vec2f" 	533"ratePos"
535"=" 	561"get_pos_in_LineAndRatioAB" 	562"(" 	567"line1"
568"," 	570"2" 	571"," 	573"1"
574")" 	575";" 	580"dbg" 	581"("
594""ratePos : ("" 	595"," 	603"ratePos" 	604"."
605"x" 	606"," 	611"", "" 	612","
620"ratePos" 	621"." 	622"y" 	623","
629"")\n"" 	630")" 	631";" 	641"angle2d"
646"ang1" 	648"=" 	663"_angle2d_delta" 	664"("
668"pos1" 	669"." 	670"x" 	672"-"
677"pos2" 	678"." 	679"x" 	680","
685"pos1" 	686"." 	687"y" 	689"-"
694"pos2" 	695"." 	696"y" 	697")"
698";" 	703"dbg" 	704"(" 	720""angle1( rad : ""
721"," 	726"ang1" 	727"." 	733"radian"
734"," 	748"", delta : ("" 	749"," 	754"ang1"
755"." 	760"delta" 	761"." 	762"x"
763"," 	768"", "" 	769"," 	774"ang1"
775"." 	780"delta" 	781"." 	782"y"
783"," 	790""))\n"" 	791")" 	792";"
801"angle2d" 	806"ang2" 	808"=" 	817"_angle2d"
818"(" 	820"PI" 	822"/" 	824"3"
825")" 	826";" 	831"dbg" 	832"("
848""angle2( rad : "" 	849"," 	854"ang2" 	855"."
861"radian" 	862"," 	876"", delta : ("" 	877","
882"ang2" 	883"." 	888"delta" 	889"."
890"x" 	891"," 	896"", "" 	897","
902"ang2" 	903"." 	908"delta" 	909"."
910"y" 	911"," 	918""))\n"" 	919")"
920";" 	929"angle2d" 	934"rang" 	936"="
945"addAngle" 	946"(" 	950"ang1" 	951","
956"ang2" 	957")" 	958";" 	963"dbg"
964"(" 	978""rang( rad : "" 	979"," 	984"rang"
985"." 	991"radian" 	992"," 	1006"", delta : (""
1007"," 	1012"rang" 	1013"." 	1018"delta"
1019"." 	1020"x" 	1021"," 	1026"", ""
1027"," 	1032"rang" 	1033"." 	1038"delta"
1039"." 	1040"y" 	1041"," 	1048""))\n""
1049")" 	1050";" 	1057"pos1" 	1059"="
1066"_vec2f" 	1067"(" 	1071"pos1" 	1072"."
1073"x" 	1075"+" 	1080"rang" 	1081"."
1086"delta" 	1087"." 	1088"x" 	1090"*"
1093"30" 	1094"," 	1099"pos1" 	1100"."
1101"y" 	1103"+" 	1108"rang" 	1109"."
1114"delta" 	1115"." 	1116"y" 	1118"*"
1121"30" 	1122")" 	1123";" 	1128"dbg"
1129"(" 	1139""pos1 : ("" 	1140"," 	1145"pos1"
1146"." 	1147"x" 	1148"," 	1153"", ""
1154"," 	1159"pos1" 	1160"." 	1161"y"
1162"," 	1168"")\n"" 	1169")" 	1170";"
1177"vec2f" 	1183"cross" 	1185"=" 	1200"get_cross_line"
1201"(" 	1208"_line2d" 	1209"(" 	1213"pos1"
1214"," 	1221"_vec2f" 	1222"(" 	1224"10"
1225"," 	1227"0" 	1228")" 	1229")"
1230"," 	1238"_line2d" 	1239"(" 	1243"pos2"
1244"," 	1249"cir1" 	1250"." 	1256"center"
1257")" 	1258")" 	1259";" 	1264"dbg"
1265"(" 	1276""cross : ("" 	1277"," 	1283"cross"
1284"." 	1285"x" 	1286"," 	1291"", ""
1292"," 	1298"cross" 	1299"." 	1300"y"
1301"," 	1307"")\n"" 	1308")" 	1309";"
1317"vec2f" 	1318"[" 	1319"2" 	1320"]"
1329"circross" 	1331"=" 	1355"get_cross_CircleAndLine" 	1356"("
1360"cir1" 	1361"," 	1369"_line2d" 	1370"("
1375"cross" 	1376"," 	1383"_vec2f" 	1384"("
1386"20" 	1387"," 	1389"0" 	1390")"
1391")" 	1392")" 	1393";" 	1398"dbg"
1399"(" 	1416""circross[0] : ("" 	1417"," 	1426"circross"
1427"[" 	1428"0" 	1429"]" 	1430"."
1431"x" 	1432"," 	1437"", "" 	1438","
1447"circross" 	1448"[" 	1449"0" 	1450"]"
1451"." 	1452"y" 	1453"," 	1459"")\n""
1460")" 	1461";" 	1466"dbg" 	1467"("
1484""circross[1] : ("" 	1485"," 	1494"circross" 	1495"["
1496"1" 	1497"]" 	1498"." 	1499"x"
1500"," 	1505"", "" 	1506"," 	1515"circross"
1516"[" 	1517"1" 	1518"]" 	1519"."
1520"y" 	1521"," 	1527"")\n"" 	1528")"
1529";" 	1536"vec2f" 	1548"enableCross" 	1550"="
1557"_vec2f" 	1558"(" 	1559"0" 	1560","
1562"0" 	1563")" 	1564";" 	1568"if"
1569"(" 	1574"isNAN" 	1575"(" 	1583"circross"
1584"[" 	1585"0" 	1586"]" 	1587"."
1588"x" 	1589")" 	1590")" 	1591"{"
1597"dbg" 	1598"(" 	1618""cross 0 is nan!!\n"" 	1619")"
1620";" 	1634"enableCross" 	1636"=" 	1645"circross"
1646"[" 	1647"1" 	1648"]" 	1649";"
1652"}" 	1656"if" 	1657"(" 	1662"isNAN"
1663"(" 	1671"circross" 	1672"[" 	1673"1"
1674"]" 	1675"." 	1676"x" 	1677")"
1678")" 	1679"{" 	1685"dbg" 	1686"("
1706""cross 1 is nan!!\n"" 	1707")" 	1708";" 	1722"enableCross"
1724"=" 	1733"circross" 	1734"[" 	1735"0"
1736"]" 	1737";" 	1740"}" 	1745"dbg"
1746"(" 	1763""enableCross : ("" 	1764"," 	1776"enableCross"
1777"." 	1778"x" 	1779"," 	1784"", ""
1785"," 	1797"enableCross" 	1798"." 	1799"y"
1800"," 	1806"")\n"" 	1807")" 	1808";"
1814"int" 	1819"bSiz" 	1821"=" 	1825"100"
1826";" 	1833"vec2f" 	1834"[" 	1837"100"
1838"]" 	1850"bezierCurve" 	1852"=" 	1874"get_poses_in_Bezier1F"
1875"(" 	1879"pos1" 	1880"," 	1886"cross"
1887"," 	1892"pos2" 	1893"," 	1898"bSiz"
1899")" 	1900";" 	1905"int" 	1907"i"
1908"=" 	1909"0" 	1910";" 	1915"while"
1916"(" 	1917"i" 	1918"<" 	1922"bSiz"
1923")" 	1924"{" 	1930"dbg" 	1931"("
1937""pos["" 	1938"," 	1940"i" 	1941","
1949""] : ("" 	1950"," 	1962"bezierCurve" 	1963"["
1964"i" 	1965"]" 	1966"." 	1967"x"
1968"," 	1973"", "" 	1974"," 	1986"bezierCurve"
1987"[" 	1988"i" 	1989"]" 	1990"."
1991"y" 	1992"," 	1998"")\n"" 	1999")"
2000";" 	2004"i" 	2005"+" 	2006"="
2007"1" 	2008";" 	2011"}" 	2019"return"
2021"0" 	2022";" 	2024"}"	
combine block : 3 : "3" + "." + 5 : "141592" => "3.141592"
combine block : 617 : "+" + 618 : "=" => "+="
finish
ICB[0x7fffffff71e0] BakeCode_ScanStructTypes...start
BakeCode_ScanStructTypes...finish
ICB[0x7fffffff71e0] BakeCode_AddStructTypes...start
BakeCode_AddStructTypes...finish
ICB[0x7fffffff71e0] BakeCode_ScanCodes...start
[0] ~ add and set variable : adsetvar: float PI = 3.141592  ~ [4]
[5] ~ addfunction : addfunc : int main ( )  ~ [8]
[9] ~ blocks : start
[0] ~ add and set variable : adsetvar: vec2f pos1 = _vec2f ( 10 , 20 )  ~ [9]
[10] ~ add and set variable : adsetvar: vec2f pos2 = _vec2f ( 3 , 4 )  ~ [19]
[20] ~ use Function : usefunc : dbg ( "pos1 : (" , pos1 . x , ", " , pos1 . y , ")\n" )  ~ [36]
[37] ~ use Function : usefunc : dbg ( "pos2 : (" , pos2 . x , ", " , pos2 . y , ")\n" )  ~ [53]
[54] ~ add and set variable : adsetvar: line2d line1 = _line2d ( pos1 , pos2 )  ~ [63]
[64] ~ use Function : usefunc : dbg ( "line1 : fp (" , line1 . fp . x , ", " , line1 . fp . y , "), lp(" , line1 . lp . x , ", " , line1 . lp . y , ")\n" )  ~ [100]
[101] ~ add and set variable : adsetvar: float len = get_distance2d ( line1 )  ~ [108]
[109] ~ use Function : usefunc : dbg ( "len : " , len , "\n" )  ~ [117]
[118] ~ add and set variable : adsetvar: circle cir1 = _circle ( pos1 , len )  ~ [127]
[128] ~ use Function : usefunc : dbg ( "cir1 : center(" , cir1 . center . x , ", " , cir1 . center . y , "), radius(" , cir1 . radius , ")\n" )  ~ [154]
[155] ~ add and set variable : adsetvar: vec2f ratePos = get_pos_in_LineAndRatioAB ( line1 , 2 , 1 )  ~ [166]
[167] ~ use Function : usefunc : dbg ( "ratePos : (" , ratePos . x , ", " , ratePos . y , ")\n" )  ~ [183]
[184] ~ add and set variable : adsetvar: angle2d ang1 = _angle2d_delta ( pos1 . x - pos2 . x , pos1 . y - pos2 . y )  ~ [205]
[206] ~ use Function : usefunc : dbg ( "angle1( rad : " , ang1 . radian , ", delta : (" , ang1 . delta . x , ", " , ang1 . delta . y , "))\n" )  ~ [232]
[233] ~ add and set variable : adsetvar: angle2d ang2 = _angle2d ( PI / 3 )  ~ [242]
[243] ~ use Function : usefunc : dbg ( "angle2( rad : " , ang2 . radian , ", delta : (" , ang2 . delta . x , ", " , ang2 . delta . y , "))\n" )  ~ [269]
[270] ~ add and set variable : adsetvar: angle2d rang = addAngle ( ang1 , ang2 )  ~ [279]
[280] ~ use Function : usefunc : dbg ( "rang( rad : " , rang . radian , ", delta : (" , rang . delta . x , ", " , rang . delta . y , "))\n" )  ~ [306]
[307] ~  ~ [307]
[308] ~ set Variable : set_var : pos1 = _vec2f ( pos1 . x + rang . delta . x * 30 , pos1 . y + rang . delta . y * 30 )  ~ [335]
[336] ~ use Function : usefunc : dbg ( "pos1 : (" , pos1 . x , ", " , pos1 . y , ")\n" )  ~ [352]
[353] ~ add and set variable : adsetvar: vec2f cross = get_cross_line ( _line2d ( pos1 , _vec2f ( 10 , 0 ) ) , _line2d ( pos2 , cir1 . center ) )  ~ [379]
[380] ~ use Function : usefunc : dbg ( "cross : (" , cross . x , ", " , cross . y , ")\n" )  ~ [396]
[397] ~ add and set variable : adsetvar: vec2f [ 2 ] circross = get_cross_CircleAndLine ( cir1 , _line2d ( cross , _vec2f ( 20 , 0 ) ) )  ~ [419]
[420] ~ use Function : usefunc : dbg ( "circross[0] : (" , circross [ 0 ] . x , ", " , circross [ 0 ] . y , ")\n" )  ~ [442]
[443] ~ use Function : usefunc : dbg ( "circross[1] : (" , circross [ 1 ] . x , ", " , circross [ 1 ] . y , ")\n" )  ~ [465]
[466] ~ add and set variable : adsetvar: vec2f enableCross = _vec2f ( 0 , 0 )  ~ [475]
[476] ~ IF : if__sen : if ( isNAN ( circross [ 0 ] . x ) )  ~ [487]
[488] ~ blocks : start
[0] ~ use Function : usefunc : dbg ( "cross 0 is nan!!\n" )  ~ [4]
[5] ~  ~ [5]
[6] ~ set Variable : set_var : enableCross = circross [ 1 ]  ~ [11]
BakeCode_ScanCodes...block__ : {
usefunc : dbg ( "cross 0 is nan!!\n" ) 
set_var : enableCross = circross [ 1 ] 
closed_ : }
 ~ [501]
[502] ~ IF : if__sen : if ( isNAN ( circross [ 1 ] . x ) )  ~ [513]
[514] ~ blocks : start
[0] ~ use Function : usefunc : dbg ( "cross 1 is nan!!\n" )  ~ [4]
[5] ~  ~ [5]
[6] ~ set Variable : set_var : enableCross = circross [ 0 ]  ~ [11]
BakeCode_ScanCodes...block__ : {
usefunc : dbg ( "cross 1 is nan!!\n" ) 
set_var : enableCross = circross [ 0 ] 
closed_ : }
 ~ [527]
[528] ~ use Function : usefunc : dbg ( "enableCross : (" , enableCross . x , ", " , enableCross . y , ")\n" )  ~ [544]
[545] ~ add and set variable : adsetvar: int bSiz = 100  ~ [549]
[550] ~ add and set variable : adsetvar: vec2f [ 100 ] bezierCurve = get_poses_in_Bezier1F ( pos1 , cross , pos2 , bSiz )  ~ [566]
[567] ~ add and set variable : adsetvar: int i = 0  ~ [571]
[572] ~ while : while__ : while ( i < bSiz )  ~ [577]
[578] ~ blocks : start
[0] ~ use Function : usefunc : dbg ( "pos[" , i , "] : (" , bezierCurve [ i ] . x , ", " , bezierCurve [ i ] . y , ")\n" )  ~ [26]
[27] ~  ~ [27]
[28] ~ set Variable : set_var : i += 1  ~ [30]
BakeCode_ScanCodes...block__ : {
usefunc : dbg ( "pos[" , i , "] : (" , bezierCurve [ i ] . x , ", " , bezierCurve [ i ] . y , ")\n" ) 
set_var : i += 1 
closed_ : }
 ~ [610]
[611] ~ return in Function : return_ : return 0  ~ [613]
BakeCode_ScanCodes...block__ : {
adsetvar: vec2f pos1 = _vec2f ( 10 , 20 ) 
adsetvar: vec2f pos2 = _vec2f ( 3 , 4 ) 
usefunc : dbg ( "pos1 : (" , pos1 . x , ", " , pos1 . y , ")\n" ) 
usefunc : dbg ( "pos2 : (" , pos2 . x , ", " , pos2 . y , ")\n" ) 
adsetvar: line2d line1 = _line2d ( pos1 , pos2 ) 
usefunc : dbg ( "line1 : fp (" , line1 . fp . x , ", " , line1 . fp . y , "), lp(" , line1 . lp . x , ", " , line1 . lp . y , ")\n" ) 
adsetvar: float len = get_distance2d ( line1 ) 
usefunc : dbg ( "len : " , len , "\n" ) 
adsetvar: circle cir1 = _circle ( pos1 , len ) 
usefunc : dbg ( "cir1 : center(" , cir1 . center . x , ", " , cir1 . center . y , "), radius(" , cir1 . radius , ")\n" ) 
adsetvar: vec2f ratePos = get_pos_in_LineAndRatioAB ( line1 , 2 , 1 ) 
usefunc : dbg ( "ratePos : (" , ratePos . x , ", " , ratePos . y , ")\n" ) 
adsetvar: angle2d ang1 = _angle2d_delta ( pos1 . x - pos2 . x , pos1 . y - pos2 . y ) 
usefunc : dbg ( "angle1( rad : " , ang1 . radian , ", delta : (" , ang1 . delta . x , ", " , ang1 . delta . y , "))\n" ) 
adsetvar: angle2d ang2 = _angle2d ( PI / 3 ) 
usefunc : dbg ( "angle2( rad : " , ang2 . radian , ", delta : (" , ang2 . delta . x , ", " , ang2 . delta . y , "))\n" ) 
adsetvar: angle2d rang = addAngle ( ang1 , ang2 ) 
usefunc : dbg ( "rang( rad : " , rang . radian , ", delta : (" , rang . delta . x , ", " , rang . delta . y , "))\n" ) 
set_var : pos1 = _vec2f ( pos1 . x + rang . delta . x * 30 , pos1 . y + rang . delta . y * 30 ) 
usefunc : dbg ( "pos1 : (" , pos1 . x , ", " , pos1 . y , ")\n" ) 
adsetvar: vec2f cross = get_cross_line ( _line2d ( pos1 , _vec2f ( 10 , 0 ) ) , _line2d ( pos2 , cir1 . center ) ) 
usefunc : dbg ( "cross : (" , cross . x , ", " , cross . y , ")\n" ) 
adsetvar: vec2f [ 2 ] circross = get_cross_CircleAndLine ( cir1 , _line2d ( cross , _vec2f ( 20 , 0 ) ) ) 
usefunc : dbg ( "circross[0] : (" , circross [ 0 ] . x , ", " , circross [ 0 ] . y , ")\n" ) 
usefunc : dbg ( "circross[1] : (" , circross [ 1 ] . x , ", " , circross [ 1 ] . y , ")\n" ) 
adsetvar: vec2f enableCross = _vec2f ( 0 , 0 ) 
if__sen : if ( isNAN ( circross [ 0 ] . x ) ) 
block__ : {
usefunc : dbg ( "cross 0 is nan!!\n" ) 
set_var : enableCross = circross [ 1 ] 
closed_ : }

if__sen : if ( isNAN ( circross [ 1 ] . x ) ) 
block__ : {
usefunc : dbg ( "cross 1 is nan!!\n" ) 
set_var : enableCross = circross [ 0 ] 
closed_ : }

usefunc : dbg ( "enableCross : (" , enableCross . x , ", " , enableCross . y , ")\n" ) 
adsetvar: int bSiz = 100 
adsetvar: vec2f [ 100 ] bezierCurve = get_poses_in_Bezier1F ( pos1 , cross , pos2 , bSiz ) 
adsetvar: int i = 0 
while__ : while ( i < bSiz ) 
block__ : {
usefunc : dbg ( "pos[" , i , "] : (" , bezierCurve [ i ] . x , ", " , bezierCurve [ i ] . y , ")\n" ) 
set_var : i += 1 
closed_ : }

return_ : return 0 
closed_ : }
 ~ [624]
BakeCode_ScanCodes...finish
ICB[0x7fffffff71e0] BakeCode_GlobalMemoryInit...start
BakeCode_GlobalMemoryInit Scan Global Memory Code (in datamem[0]) : adsetvar: float PI = 3.141592 
BakeCode_GlobalMemoryInit Find Type Size : ...4
BakeCode_GlobalMemoryInit addsetvar set initial value : ...(float)3.14159
BakeCode_GlobalMemoryInit...finish
ICB[0x7fffffff71e0] BakeCode_CompileCodes...start
BakeCode_CompileCodes__adsetvar: float PI = 3.141592 
6	:PUSH_A_CONST_4(18) > 1078530008(216, 15, 73, 64)
11	:A=&Global_VID(220) > 0(0, 0, 0, 0)
16	:LA=A(199)
17	:*LA=A_4(213)
BakeCode_CompileCodes__addfunc : int main ( ) 
BakeCode_CompileCodes Block Start {
BakeCode_CompileCodes__adsetvar: vec2f pos1 = _vec2f ( 10 , 20 ) 
18	:ADD_STACK_VARIABLE(0) > 8(8, 0, 0, 0)
23	:FUNC(189)
24	:PUSH_A_CONST_4(18) > 20(20, 0, 0, 0)
29	:CASTING_A(201) > 12
31	:PARAM_4(192)
32	:PUSH_A_CONST_4(18) > 10(10, 0, 0, 0)
37	:CASTING_A(201) > 12
39	:PARAM_4(192)
40	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 0(0, 0, 0, 0)
49	:A=&VID(195) > 8(8, 0, 0, 0)
54	:LA=A(199)
55	:*LA=*A_N(224) > 8(8, 0, 0, 0)
BakeCode_CompileCodes__adsetvar: vec2f pos2 = _vec2f ( 3 , 4 ) 
60	:ADD_STACK_VARIABLE(0) > 16(16, 0, 0, 0)
65	:FUNC(189)
66	:PUSH_A_CONST_4(18) > 4(4, 0, 0, 0)
71	:CASTING_A(201) > 12
73	:PARAM_4(192)
74	:PUSH_A_CONST_4(18) > 3(3, 0, 0, 0)
79	:CASTING_A(201) > 12
81	:PARAM_4(192)
82	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 0(0, 0, 0, 0)
91	:A=&VID(195) > 16(16, 0, 0, 0)
96	:LA=A(199)
97	:*LA=*A_N(224) > 8(8, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "pos1 : (" , pos1 . x , ", " , pos1 . y , ")\n" ) 
102	:SET_A_CONST_STRING(214) > 9(9, 0, 0, 0)"pos1 : ("
116	:DBG_A(209) > 8
118	:A=&VID(195) > 8(8, 0, 0, 0)
123	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
128	:AXBY(52)
129	:POP_AB(218)
130	:AU_INT_ADD_A(61)
131	:A=*A_nopush(205)
132	:DBG_A(209) > 6
134	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
142	:DBG_A(209) > 8
144	:A=&VID(195) > 8(8, 0, 0, 0)
149	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
154	:AXBY(52)
155	:POP_AB(218)
156	:AU_INT_ADD_A(61)
157	:A=*A_nopush(205)
158	:DBG_A(209) > 6
160	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
169	:DBG_A(209) > 8
BakeCode_CompileCodes__usefunc : dbg ( "pos2 : (" , pos2 . x , ", " , pos2 . y , ")\n" ) 
171	:SET_A_CONST_STRING(214) > 9(9, 0, 0, 0)"pos2 : ("
185	:DBG_A(209) > 8
187	:A=&VID(195) > 16(16, 0, 0, 0)
192	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
197	:AXBY(52)
198	:POP_AB(218)
199	:AU_INT_ADD_A(61)
200	:A=*A_nopush(205)
201	:DBG_A(209) > 6
203	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
211	:DBG_A(209) > 8
213	:A=&VID(195) > 16(16, 0, 0, 0)
218	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
223	:AXBY(52)
224	:POP_AB(218)
225	:AU_INT_ADD_A(61)
226	:A=*A_nopush(205)
227	:DBG_A(209) > 6
229	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
238	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: line2d line1 = _line2d ( pos1 , pos2 ) 
240	:ADD_STACK_VARIABLE(0) > 32(32, 0, 0, 0)
245	:FUNC(189)
246	:A=&VID(195) > 16(16, 0, 0, 0)
251	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
256	:A=&VID(195) > 8(8, 0, 0, 0)
261	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
266	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 2(2, 0, 0, 0)
275	:A=&VID(195) > 32(32, 0, 0, 0)
280	:LA=A(199)
281	:*LA=*A_N(224) > 16(16, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "line1 : fp (" , line1 . fp . x , ", " , line1 . fp . y , "), lp(" , line1 . lp . x , ", " , line1 . lp . y , ")\n" ) 
286	:SET_A_CONST_STRING(214) > 13(13, 0, 0, 0)"line1 : fp ("
304	:DBG_A(209) > 8
306	:A=&VID(195) > 32(32, 0, 0, 0)
311	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
316	:AXBY(52)
317	:POP_AB(218)
318	:AU_INT_ADD_A(61)
319	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
324	:AXBY(52)
325	:POP_AB(218)
326	:AU_INT_ADD_A(61)
327	:A=*A_nopush(205)
328	:DBG_A(209) > 6
330	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
338	:DBG_A(209) > 8
340	:A=&VID(195) > 32(32, 0, 0, 0)
345	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
350	:AXBY(52)
351	:POP_AB(218)
352	:AU_INT_ADD_A(61)
353	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
358	:AXBY(52)
359	:POP_AB(218)
360	:AU_INT_ADD_A(61)
361	:A=*A_nopush(205)
362	:DBG_A(209) > 6
364	:SET_A_CONST_STRING(214) > 7(7, 0, 0, 0)"), lp("
376	:DBG_A(209) > 8
378	:A=&VID(195) > 32(32, 0, 0, 0)
383	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
388	:AXBY(52)
389	:POP_AB(218)
390	:AU_INT_ADD_A(61)
391	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
396	:AXBY(52)
397	:POP_AB(218)
398	:AU_INT_ADD_A(61)
399	:A=*A_nopush(205)
400	:DBG_A(209) > 6
402	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
410	:DBG_A(209) > 8
412	:A=&VID(195) > 32(32, 0, 0, 0)
417	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
422	:AXBY(52)
423	:POP_AB(218)
424	:AU_INT_ADD_A(61)
425	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
430	:AXBY(52)
431	:POP_AB(218)
432	:AU_INT_ADD_A(61)
433	:A=*A_nopush(205)
434	:DBG_A(209) > 6
436	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
445	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: float len = get_distance2d ( line1 ) 
447	:ADD_STACK_VARIABLE(0) > 36(36, 0, 0, 0)
452	:FUNC(189)
453	:A=&VID(195) > 32(32, 0, 0, 0)
458	:PARAM_N_COPY_BY_ADDRESS(219) > 16(16, 0, 0, 0)
463	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 8(8, 0, 0, 0)
472	:A=&VID(195) > 36(36, 0, 0, 0)
477	:LA=A(199)
478	:*LA=A_4(213)
BakeCode_CompileCodes__usefunc : dbg ( "len : " , len , "\n" ) 
479	:SET_A_CONST_STRING(214) > 7(7, 0, 0, 0)"len : "
491	:DBG_A(209) > 8
493	:A=&VID(195) > 36(36, 0, 0, 0)
498	:A=*A_nopush(205)
499	:DBG_A(209) > 6
501	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)"
"
509	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: circle cir1 = _circle ( pos1 , len ) 
511	:ADD_STACK_VARIABLE(0) > 48(48, 0, 0, 0)
516	:FUNC(189)
517	:A=&VID(195) > 36(36, 0, 0, 0)
522	:A=*A_nopush(205)
523	:CASTING_A(201) > 20
525	:PARAM_4(192)
526	:A=&VID(195) > 8(8, 0, 0, 0)
531	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
536	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 1(1, 0, 0, 0)
545	:A=&VID(195) > 48(48, 0, 0, 0)
550	:LA=A(199)
551	:*LA=*A_N(224) > 12(12, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "cir1 : center(" , cir1 . center . x , ", " , cir1 . center . y , "), radius(" , cir1 . radius , ")\n" ) 
556	:SET_A_CONST_STRING(214) > 15(15, 0, 0, 0)"cir1 : center("
576	:DBG_A(209) > 8
578	:A=&VID(195) > 48(48, 0, 0, 0)
583	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
588	:AXBY(52)
589	:POP_AB(218)
590	:AU_INT_ADD_A(61)
591	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
596	:AXBY(52)
597	:POP_AB(218)
598	:AU_INT_ADD_A(61)
599	:A=*A_nopush(205)
600	:DBG_A(209) > 6
602	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
610	:DBG_A(209) > 8
612	:A=&VID(195) > 48(48, 0, 0, 0)
617	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
622	:AXBY(52)
623	:POP_AB(218)
624	:AU_INT_ADD_A(61)
625	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
630	:AXBY(52)
631	:POP_AB(218)
632	:AU_INT_ADD_A(61)
633	:A=*A_nopush(205)
634	:DBG_A(209) > 6
636	:SET_A_CONST_STRING(214) > 11(11, 0, 0, 0)"), radius("
652	:DBG_A(209) > 8
654	:A=&VID(195) > 48(48, 0, 0, 0)
659	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
664	:AXBY(52)
665	:POP_AB(218)
666	:AU_INT_ADD_A(61)
667	:A=*A_nopush(205)
668	:DBG_A(209) > 6
670	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
679	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: vec2f ratePos = get_pos_in_LineAndRatioAB ( line1 , 2 , 1 ) 
681	:ADD_STACK_VARIABLE(0) > 56(56, 0, 0, 0)
686	:FUNC(189)
687	:PUSH_A_CONST_4(18) > 1(1, 0, 0, 0)
692	:CASTING_A(201) > 12
694	:PARAM_4(192)
695	:PUSH_A_CONST_4(18) > 2(2, 0, 0, 0)
700	:CASTING_A(201) > 12
702	:PARAM_4(192)
703	:A=&VID(195) > 32(32, 0, 0, 0)
708	:PARAM_N_COPY_BY_ADDRESS(219) > 16(16, 0, 0, 0)
713	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 6(6, 0, 0, 0)
722	:A=&VID(195) > 56(56, 0, 0, 0)
727	:LA=A(199)
728	:*LA=*A_N(224) > 8(8, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "ratePos : (" , ratePos . x , ", " , ratePos . y , ")\n" ) 
733	:SET_A_CONST_STRING(214) > 12(12, 0, 0, 0)"ratePos : ("
750	:DBG_A(209) > 8
752	:A=&VID(195) > 56(56, 0, 0, 0)
757	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
762	:AXBY(52)
763	:POP_AB(218)
764	:AU_INT_ADD_A(61)
765	:A=*A_nopush(205)
766	:DBG_A(209) > 6
768	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
776	:DBG_A(209) > 8
778	:A=&VID(195) > 56(56, 0, 0, 0)
783	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
788	:AXBY(52)
789	:POP_AB(218)
790	:AU_INT_ADD_A(61)
791	:A=*A_nopush(205)
792	:DBG_A(209) > 6
794	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
803	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: angle2d ang1 = _angle2d_delta ( pos1 . x - pos2 . x , pos1 . y - pos2 . y ) 
805	:ADD_STACK_VARIABLE(0) > 68(68, 0, 0, 0)
810	:FUNC(189)
811	:A=&VID(195) > 8(8, 0, 0, 0)
816	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
821	:AXBY(52)
822	:POP_AB(218)
823	:AU_INT_ADD_A(61)
824	:A=*A_nopush(205)
825	:A=&VID(195) > 16(16, 0, 0, 0)
830	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
835	:AXBY(52)
836	:POP_AB(218)
837	:AU_INT_ADD_A(61)
838	:B=A(223)
839	:POP_A(216)
840	:B=*B_nopush(206)
841	:AXBY(52)
842	:POP_AB(218)
843	:AU_FLOAT_MIN_A(79)
844	:CASTING_A(201) > 20
846	:PARAM_4(192)
847	:A=&VID(195) > 8(8, 0, 0, 0)
852	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
857	:AXBY(52)
858	:POP_AB(218)
859	:AU_INT_ADD_A(61)
860	:A=*A_nopush(205)
861	:A=&VID(195) > 16(16, 0, 0, 0)
866	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
871	:AXBY(52)
872	:POP_AB(218)
873	:AU_INT_ADD_A(61)
874	:B=A(223)
875	:POP_A(216)
876	:B=*B_nopush(206)
877	:AXBY(52)
878	:POP_AB(218)
879	:AU_FLOAT_MIN_A(79)
880	:CASTING_A(201) > 20
882	:PARAM_4(192)
883	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 3(3, 0, 0, 0)
892	:A=&VID(195) > 68(68, 0, 0, 0)
897	:LA=A(199)
898	:*LA=*A_N(224) > 12(12, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "angle1( rad : " , ang1 . radian , ", delta : (" , ang1 . delta . x , ", " , ang1 . delta . y , "))\n" ) 
903	:SET_A_CONST_STRING(214) > 15(15, 0, 0, 0)"angle1( rad : "
923	:DBG_A(209) > 8
925	:A=&VID(195) > 68(68, 0, 0, 0)
930	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
935	:AXBY(52)
936	:POP_AB(218)
937	:AU_INT_ADD_A(61)
938	:A=*A_nopush(205)
939	:DBG_A(209) > 6
941	:SET_A_CONST_STRING(214) > 12(12, 0, 0, 0)", delta : ("
958	:DBG_A(209) > 8
960	:A=&VID(195) > 68(68, 0, 0, 0)
965	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
970	:AXBY(52)
971	:POP_AB(218)
972	:AU_INT_ADD_A(61)
973	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
978	:AXBY(52)
979	:POP_AB(218)
980	:AU_INT_ADD_A(61)
981	:A=*A_nopush(205)
982	:DBG_A(209) > 6
984	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
992	:DBG_A(209) > 8
994	:A=&VID(195) > 68(68, 0, 0, 0)
999	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1004	:AXBY(52)
1005	:POP_AB(218)
1006	:AU_INT_ADD_A(61)
1007	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1012	:AXBY(52)
1013	:POP_AB(218)
1014	:AU_INT_ADD_A(61)
1015	:A=*A_nopush(205)
1016	:DBG_A(209) > 6
1018	:SET_A_CONST_STRING(214) > 5(5, 0, 0, 0)"))
"
1028	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: angle2d ang2 = _angle2d ( PI / 3 ) 
1030	:ADD_STACK_VARIABLE(0) > 80(80, 0, 0, 0)
1035	:FUNC(189)
1036	:A=&Global_VID(220) > 0(0, 0, 0, 0)
1041	:A=*A_nopush(205)
1042	:PUSH_B_CONST_4(27) > 3(3, 0, 0, 0)
1047	:CASTING_B(202) > 12
1049	:AXBY(52)
1050	:POP_AB(218)
1051	:AU_FLOAT_DIV_A(107)
1052	:CASTING_A(201) > 20
1054	:PARAM_4(192)
1055	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 4(4, 0, 0, 0)
1064	:A=&VID(195) > 80(80, 0, 0, 0)
1069	:LA=A(199)
1070	:*LA=*A_N(224) > 12(12, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "angle2( rad : " , ang2 . radian , ", delta : (" , ang2 . delta . x , ", " , ang2 . delta . y , "))\n" ) 
1075	:SET_A_CONST_STRING(214) > 15(15, 0, 0, 0)"angle2( rad : "
1095	:DBG_A(209) > 8
1097	:A=&VID(195) > 80(80, 0, 0, 0)
1102	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
1107	:AXBY(52)
1108	:POP_AB(218)
1109	:AU_INT_ADD_A(61)
1110	:A=*A_nopush(205)
1111	:DBG_A(209) > 6
1113	:SET_A_CONST_STRING(214) > 12(12, 0, 0, 0)", delta : ("
1130	:DBG_A(209) > 8
1132	:A=&VID(195) > 80(80, 0, 0, 0)
1137	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1142	:AXBY(52)
1143	:POP_AB(218)
1144	:AU_INT_ADD_A(61)
1145	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1150	:AXBY(52)
1151	:POP_AB(218)
1152	:AU_INT_ADD_A(61)
1153	:A=*A_nopush(205)
1154	:DBG_A(209) > 6
1156	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
1164	:DBG_A(209) > 8
1166	:A=&VID(195) > 80(80, 0, 0, 0)
1171	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1176	:AXBY(52)
1177	:POP_AB(218)
1178	:AU_INT_ADD_A(61)
1179	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1184	:AXBY(52)
1185	:POP_AB(218)
1186	:AU_INT_ADD_A(61)
1187	:A=*A_nopush(205)
1188	:DBG_A(209) > 6
1190	:SET_A_CONST_STRING(214) > 5(5, 0, 0, 0)"))
"
1200	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: angle2d rang = addAngle ( ang1 , ang2 ) 
1202	:ADD_STACK_VARIABLE(0) > 92(92, 0, 0, 0)
1207	:FUNC(189)
1208	:A=&VID(195) > 80(80, 0, 0, 0)
1213	:PARAM_N_COPY_BY_ADDRESS(219) > 12(12, 0, 0, 0)
1218	:A=&VID(195) > 68(68, 0, 0, 0)
1223	:PARAM_N_COPY_BY_ADDRESS(219) > 12(12, 0, 0, 0)
1228	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 10(10, 0, 0, 0)
1237	:A=&VID(195) > 92(92, 0, 0, 0)
1242	:LA=A(199)
1243	:*LA=*A_N(224) > 12(12, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "rang( rad : " , rang . radian , ", delta : (" , rang . delta . x , ", " , rang . delta . y , "))\n" ) 
1248	:SET_A_CONST_STRING(214) > 13(13, 0, 0, 0)"rang( rad : "
1266	:DBG_A(209) > 8
1268	:A=&VID(195) > 92(92, 0, 0, 0)
1273	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
1278	:AXBY(52)
1279	:POP_AB(218)
1280	:AU_INT_ADD_A(61)
1281	:A=*A_nopush(205)
1282	:DBG_A(209) > 6
1284	:SET_A_CONST_STRING(214) > 12(12, 0, 0, 0)", delta : ("
1301	:DBG_A(209) > 8
1303	:A=&VID(195) > 92(92, 0, 0, 0)
1308	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1313	:AXBY(52)
1314	:POP_AB(218)
1315	:AU_INT_ADD_A(61)
1316	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1321	:AXBY(52)
1322	:POP_AB(218)
1323	:AU_INT_ADD_A(61)
1324	:A=*A_nopush(205)
1325	:DBG_A(209) > 6
1327	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
1335	:DBG_A(209) > 8
1337	:A=&VID(195) > 92(92, 0, 0, 0)
1342	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1347	:AXBY(52)
1348	:POP_AB(218)
1349	:AU_INT_ADD_A(61)
1350	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1355	:AXBY(52)
1356	:POP_AB(218)
1357	:AU_INT_ADD_A(61)
1358	:A=*A_nopush(205)
1359	:DBG_A(209) > 6
1361	:SET_A_CONST_STRING(214) > 5(5, 0, 0, 0)"))
"
1371	:DBG_A(209) > 8
BakeCode_CompileCodes__set_var : pos1 = _vec2f ( pos1 . x + rang . delta . x * 30 , pos1 . y + rang . delta . y * 30 ) 
1373	:FUNC(189)
1374	:A=&VID(195) > 8(8, 0, 0, 0)
1379	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1384	:AXBY(52)
1385	:POP_AB(218)
1386	:AU_INT_ADD_A(61)
1387	:A=*A_nopush(205)
1388	:A=&VID(195) > 92(92, 0, 0, 0)
1393	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1398	:AXBY(52)
1399	:POP_AB(218)
1400	:AU_INT_ADD_A(61)
1401	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1406	:AXBY(52)
1407	:POP_AB(218)
1408	:AU_INT_ADD_A(61)
1409	:A=*A_nopush(205)
1410	:PUSH_B_CONST_4(27) > 30(30, 0, 0, 0)
1415	:CASTING_B(202) > 12
1417	:AXBY(52)
1418	:POP_AB(218)
1419	:AU_FLOAT_MUL_A(93)
1420	:B=A(223)
1421	:POP_A(216)
1422	:AXBY(52)
1423	:POP_AB(218)
1424	:AU_FLOAT_ADD_A(65)
1425	:CASTING_A(201) > 20
1427	:PARAM_4(192)
1428	:A=&VID(195) > 8(8, 0, 0, 0)
1433	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1438	:AXBY(52)
1439	:POP_AB(218)
1440	:AU_INT_ADD_A(61)
1441	:A=*A_nopush(205)
1442	:A=&VID(195) > 92(92, 0, 0, 0)
1447	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1452	:AXBY(52)
1453	:POP_AB(218)
1454	:AU_INT_ADD_A(61)
1455	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1460	:AXBY(52)
1461	:POP_AB(218)
1462	:AU_INT_ADD_A(61)
1463	:A=*A_nopush(205)
1464	:PUSH_B_CONST_4(27) > 30(30, 0, 0, 0)
1469	:CASTING_B(202) > 12
1471	:AXBY(52)
1472	:POP_AB(218)
1473	:AU_FLOAT_MUL_A(93)
1474	:B=A(223)
1475	:POP_A(216)
1476	:AXBY(52)
1477	:POP_AB(218)
1478	:AU_FLOAT_ADD_A(65)
1479	:CASTING_A(201) > 20
1481	:PARAM_4(192)
1482	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 0(0, 0, 0, 0)
1491	:A=&VID(195) > 8(8, 0, 0, 0)
1496	:LA=A(199)
1497	:*LA=*A_N(224) > 8(8, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "pos1 : (" , pos1 . x , ", " , pos1 . y , ")\n" ) 
1502	:SET_A_CONST_STRING(214) > 9(9, 0, 0, 0)"pos1 : ("
1516	:DBG_A(209) > 8
1518	:A=&VID(195) > 8(8, 0, 0, 0)
1523	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1528	:AXBY(52)
1529	:POP_AB(218)
1530	:AU_INT_ADD_A(61)
1531	:A=*A_nopush(205)
1532	:DBG_A(209) > 6
1534	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
1542	:DBG_A(209) > 8
1544	:A=&VID(195) > 8(8, 0, 0, 0)
1549	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1554	:AXBY(52)
1555	:POP_AB(218)
1556	:AU_INT_ADD_A(61)
1557	:A=*A_nopush(205)
1558	:DBG_A(209) > 6
1560	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
1569	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: vec2f cross = get_cross_line ( _line2d ( pos1 , _vec2f ( 10 , 0 ) ) , _line2d ( pos2 , cir1 . center ) ) 
1571	:ADD_STACK_VARIABLE(0) > 100(100, 0, 0, 0)
1576	:FUNC(189)
1577	:FUNC(189)
1578	:A=&VID(195) > 48(48, 0, 0, 0)
1583	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1588	:AXBY(52)
1589	:POP_AB(218)
1590	:AU_INT_ADD_A(61)
1591	:CASTING_A(201) > 20
1593	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
1598	:A=&VID(195) > 16(16, 0, 0, 0)
1603	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
1608	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 2(2, 0, 0, 0)
1617	:PARAM_N_COPY_BY_ADDRESS(219) > 16(16, 0, 0, 0)
1622	:FUNC(189)
1623	:FUNC(189)
1624	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
1629	:CASTING_A(201) > 12
1631	:PARAM_4(192)
1632	:PUSH_A_CONST_4(18) > 10(10, 0, 0, 0)
1637	:CASTING_A(201) > 12
1639	:PARAM_4(192)
1640	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 0(0, 0, 0, 0)
1649	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
1654	:A=&VID(195) > 8(8, 0, 0, 0)
1659	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
1664	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 2(2, 0, 0, 0)
1673	:PARAM_N_COPY_BY_ADDRESS(219) > 16(16, 0, 0, 0)
1678	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 11(11, 0, 0, 0)
1687	:A=&VID(195) > 100(100, 0, 0, 0)
1692	:LA=A(199)
1693	:*LA=*A_N(224) > 8(8, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "cross : (" , cross . x , ", " , cross . y , ")\n" ) 
1698	:SET_A_CONST_STRING(214) > 10(10, 0, 0, 0)"cross : ("
1713	:DBG_A(209) > 8
1715	:A=&VID(195) > 100(100, 0, 0, 0)
1720	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1725	:AXBY(52)
1726	:POP_AB(218)
1727	:AU_INT_ADD_A(61)
1728	:A=*A_nopush(205)
1729	:DBG_A(209) > 6
1731	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
1739	:DBG_A(209) > 8
1741	:A=&VID(195) > 100(100, 0, 0, 0)
1746	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1751	:AXBY(52)
1752	:POP_AB(218)
1753	:AU_INT_ADD_A(61)
1754	:A=*A_nopush(205)
1755	:DBG_A(209) > 6
1757	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
1766	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: vec2f [ 2 ] circross = get_cross_CircleAndLine ( cir1 , _line2d ( cross , _vec2f ( 20 , 0 ) ) ) 
1768	:ADD_STACK_VARIABLE(0) > 116(116, 0, 0, 0)
1773	:FUNC(189)
1774	:FUNC(189)
1775	:FUNC(189)
1776	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
1781	:CASTING_A(201) > 12
1783	:PARAM_4(192)
1784	:PUSH_A_CONST_4(18) > 20(20, 0, 0, 0)
1789	:CASTING_A(201) > 12
1791	:PARAM_4(192)
1792	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 0(0, 0, 0, 0)
1801	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
1806	:A=&VID(195) > 100(100, 0, 0, 0)
1811	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
1816	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 2(2, 0, 0, 0)
1825	:PARAM_N_COPY_BY_ADDRESS(219) > 16(16, 0, 0, 0)
1830	:A=&VID(195) > 48(48, 0, 0, 0)
1835	:PARAM_N_COPY_BY_ADDRESS(219) > 12(12, 0, 0, 0)
1840	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 5(5, 0, 0, 0)
1849	:A=&VID(195) > 116(116, 0, 0, 0)
1854	:LA=A(199)
1855	:*LA=*A_N(224) > 16(16, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "circross[0] : (" , circross [ 0 ] . x , ", " , circross [ 0 ] . y , ")\n" ) 
1860	:SET_A_CONST_STRING(214) > 16(16, 0, 0, 0)"circross[0] : ("
1881	:DBG_A(209) > 8
1883	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
1888	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
1893	:AXBY(52)
1894	:POP_AB(218)
1895	:AU_UINT_MUL_B(92)
1896	:A=&VID(195) > 116(116, 0, 0, 0)
1901	:AXBY(52)
1902	:POP_AB(218)
1903	:AU_INT_ADD_A(61)
1904	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1909	:AXBY(52)
1910	:POP_AB(218)
1911	:AU_INT_ADD_A(61)
1912	:A=*A_nopush(205)
1913	:DBG_A(209) > 6
1915	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
1923	:DBG_A(209) > 8
1925	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
1930	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
1935	:AXBY(52)
1936	:POP_AB(218)
1937	:AU_UINT_MUL_B(92)
1938	:A=&VID(195) > 116(116, 0, 0, 0)
1943	:AXBY(52)
1944	:POP_AB(218)
1945	:AU_INT_ADD_A(61)
1946	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1951	:AXBY(52)
1952	:POP_AB(218)
1953	:AU_INT_ADD_A(61)
1954	:A=*A_nopush(205)
1955	:DBG_A(209) > 6
1957	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
1966	:DBG_A(209) > 8
BakeCode_CompileCodes__usefunc : dbg ( "circross[1] : (" , circross [ 1 ] . x , ", " , circross [ 1 ] . y , ")\n" ) 
1968	:SET_A_CONST_STRING(214) > 16(16, 0, 0, 0)"circross[1] : ("
1989	:DBG_A(209) > 8
1991	:PUSH_A_CONST_4(18) > 1(1, 0, 0, 0)
1996	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
2001	:AXBY(52)
2002	:POP_AB(218)
2003	:AU_UINT_MUL_B(92)
2004	:A=&VID(195) > 116(116, 0, 0, 0)
2009	:AXBY(52)
2010	:POP_AB(218)
2011	:AU_INT_ADD_A(61)
2012	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
2017	:AXBY(52)
2018	:POP_AB(218)
2019	:AU_INT_ADD_A(61)
2020	:A=*A_nopush(205)
2021	:DBG_A(209) > 6
2023	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
2031	:DBG_A(209) > 8
2033	:PUSH_A_CONST_4(18) > 1(1, 0, 0, 0)
2038	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
2043	:AXBY(52)
2044	:POP_AB(218)
2045	:AU_UINT_MUL_B(92)
2046	:A=&VID(195) > 116(116, 0, 0, 0)
2051	:AXBY(52)
2052	:POP_AB(218)
2053	:AU_INT_ADD_A(61)
2054	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
2059	:AXBY(52)
2060	:POP_AB(218)
2061	:AU_INT_ADD_A(61)
2062	:A=*A_nopush(205)
2063	:DBG_A(209) > 6
2065	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
2074	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: vec2f enableCross = _vec2f ( 0 , 0 ) 
2076	:ADD_STACK_VARIABLE(0) > 124(124, 0, 0, 0)
2081	:FUNC(189)
2082	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
2087	:CASTING_A(201) > 12
2089	:PARAM_4(192)
2090	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
2095	:CASTING_A(201) > 12
2097	:PARAM_4(192)
2098	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 0(0, 0, 0, 0)
2107	:A=&VID(195) > 124(124, 0, 0, 0)
2112	:LA=A(199)
2113	:*LA=*A_N(224) > 8(8, 0, 0, 0)
BakeCode_CompileCodes__if__sen : if ( isNAN ( circross [ 0 ] . x ) ) 
2118	:FUNC(189)
2119	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
2124	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
2129	:AXBY(52)
2130	:POP_AB(218)
2131	:AU_UINT_MUL_B(92)
2132	:A=&VID(195) > 116(116, 0, 0, 0)
2137	:AXBY(52)
2138	:POP_AB(218)
2139	:AU_INT_ADD_A(61)
2140	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
2145	:AXBY(52)
2146	:POP_AB(218)
2147	:AU_INT_ADD_A(61)
2148	:A=*A_nopush(205)
2149	:CASTING_A(201) > 20
2151	:PARAM_4(192)
2152	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 12(12, 0, 0, 0)
2161	:IF(187) > -1(255, 255, 255, 255)
BakeCode_CompileCodes Block Start {
BakeCode_CompileCodes__usefunc : dbg ( "cross 0 is nan!!\n" ) 
2166	:SET_A_CONST_STRING(214) > 19(19, 0, 0, 0)"cross 0 is nan!!
"
2190	:DBG_A(209) > 8
BakeCode_CompileCodes__set_var : enableCross = circross [ 1 ] 
2192	:PUSH_A_CONST_4(18) > 1(1, 0, 0, 0)
2197	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
2202	:AXBY(52)
2203	:POP_AB(218)
2204	:AU_UINT_MUL_B(92)
2205	:A=&VID(195) > 116(116, 0, 0, 0)
2210	:AXBY(52)
2211	:POP_AB(218)
2212	:AU_INT_ADD_A(61)
2213	:A=&VID(195) > 124(124, 0, 0, 0)
2218	:LA=A(199)
2219	:*LA=*A_N(224) > 8(8, 0, 0, 0)
}; BakeCode_CompileCodes Block Finish
BakeCode_CompileCodes__if__sen : if ( isNAN ( circross [ 1 ] . x ) ) 
2224	:FUNC(189)
2225	:PUSH_A_CONST_4(18) > 1(1, 0, 0, 0)
2230	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
2235	:AXBY(52)
2236	:POP_AB(218)
2237	:AU_UINT_MUL_B(92)
2238	:A=&VID(195) > 116(116, 0, 0, 0)
2243	:AXBY(52)
2244	:POP_AB(218)
2245	:AU_INT_ADD_A(61)
2246	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
2251	:AXBY(52)
2252	:POP_AB(218)
2253	:AU_INT_ADD_A(61)
2254	:A=*A_nopush(205)
2255	:CASTING_A(201) > 20
2257	:PARAM_4(192)
2258	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 12(12, 0, 0, 0)
2267	:IF(187) > -1(255, 255, 255, 255)
BakeCode_CompileCodes Block Start {
BakeCode_CompileCodes__usefunc : dbg ( "cross 1 is nan!!\n" ) 
2272	:SET_A_CONST_STRING(214) > 19(19, 0, 0, 0)"cross 1 is nan!!
"
2296	:DBG_A(209) > 8
BakeCode_CompileCodes__set_var : enableCross = circross [ 0 ] 
2298	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
2303	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
2308	:AXBY(52)
2309	:POP_AB(218)
2310	:AU_UINT_MUL_B(92)
2311	:A=&VID(195) > 116(116, 0, 0, 0)
2316	:AXBY(52)
2317	:POP_AB(218)
2318	:AU_INT_ADD_A(61)
2319	:A=&VID(195) > 124(124, 0, 0, 0)
2324	:LA=A(199)
2325	:*LA=*A_N(224) > 8(8, 0, 0, 0)
}; BakeCode_CompileCodes Block Finish
BakeCode_CompileCodes__usefunc : dbg ( "enableCross : (" , enableCross . x , ", " , enableCross . y , ")\n" ) 
2330	:SET_A_CONST_STRING(214) > 16(16, 0, 0, 0)"enableCross : ("
2351	:DBG_A(209) > 8
2353	:A=&VID(195) > 124(124, 0, 0, 0)
2358	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
2363	:AXBY(52)
2364	:POP_AB(218)
2365	:AU_INT_ADD_A(61)
2366	:A=*A_nopush(205)
2367	:DBG_A(209) > 6
2369	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
2377	:DBG_A(209) > 8
2379	:A=&VID(195) > 124(124, 0, 0, 0)
2384	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
2389	:AXBY(52)
2390	:POP_AB(218)
2391	:AU_INT_ADD_A(61)
2392	:A=*A_nopush(205)
2393	:DBG_A(209) > 6
2395	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
2404	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: int bSiz = 100 
2406	:ADD_STACK_VARIABLE(0) > 128(128, 0, 0, 0)
2411	:PUSH_A_CONST_4(18) > 100(100, 0, 0, 0)
2416	:A=&VID(195) > 128(128, 0, 0, 0)
2421	:LA=A(199)
2422	:*LA=A_4(213)
BakeCode_CompileCodes__adsetvar: vec2f [ 100 ] bezierCurve = get_poses_in_Bezier1F ( pos1 , cross , pos2 , bSiz ) 
2423	:ADD_STACK_VARIABLE(0) > 928(160, 3, 0, 0)
2428	:FUNC(189)
2429	:A=&VID(195) > 128(128, 0, 0, 0)
2434	:A=*A_nopush(205)
2435	:CASTING_A(201) > 20
2437	:PARAM_4(192)
2438	:A=&VID(195) > 16(16, 0, 0, 0)
2443	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
2448	:A=&VID(195) > 100(100, 0, 0, 0)
2453	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
2458	:A=&VID(195) > 8(8, 0, 0, 0)
2463	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
2468	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 7(7, 0, 0, 0)
2477	:A=&VID(195) > 928(160, 3, 0, 0)
2482	:LA=A(199)
2483	:*LA=*A_N(224) > 800(32, 3, 0, 0)
BakeCode_CompileCodes__adsetvar: int i = 0 
2488	:ADD_STACK_VARIABLE(0) > 932(164, 3, 0, 0)
2493	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
2498	:A=&VID(195) > 932(164, 3, 0, 0)
2503	:LA=A(199)
2504	:*LA=A_4(213)
BakeCode_CompileCodes__while__ : while ( i < bSiz ) 
2505	:A=&VID(195) > 932(164, 3, 0, 0)
2510	:A=*A_nopush(205)
2511	:B=&VID(196) > 128(128, 0, 0, 0)
2516	:B=*B_nopush(206)
2517	:AXBY(52)
2518	:POP_AB(218)
2519	:CM_BOOL_INT_RBIG_A(167)
2520	:IF(187) > -1(255, 255, 255, 255)
BakeCode_CompileCodes Block Start {
BakeCode_CompileCodes__usefunc : dbg ( "pos[" , i , "] : (" , bezierCurve [ i ] . x , ", " , bezierCurve [ i ] . y , ")\n" ) 
2525	:SET_A_CONST_STRING(214) > 5(5, 0, 0, 0)"pos["
2535	:DBG_A(209) > 8
2537	:A=&VID(195) > 932(164, 3, 0, 0)
2542	:A=*A_nopush(205)
2543	:DBG_A(209) > 4
2545	:SET_A_CONST_STRING(214) > 6(6, 0, 0, 0)"] : ("
2556	:DBG_A(209) > 8
2558	:A=&VID(195) > 932(164, 3, 0, 0)
2563	:A=*A_nopush(205)
2564	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
2569	:AXBY(52)
2570	:POP_AB(218)
2571	:AU_UINT_MUL_B(92)
2572	:A=&VID(195) > 928(160, 3, 0, 0)
2577	:AXBY(52)
2578	:POP_AB(218)
2579	:AU_INT_ADD_A(61)
2580	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
2585	:AXBY(52)
2586	:POP_AB(218)
2587	:AU_INT_ADD_A(61)
2588	:A=*A_nopush(205)
2589	:DBG_A(209) > 6
2591	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
2599	:DBG_A(209) > 8
2601	:A=&VID(195) > 932(164, 3, 0, 0)
2606	:A=*A_nopush(205)
2607	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
2612	:AXBY(52)
2613	:POP_AB(218)
2614	:AU_UINT_MUL_B(92)
2615	:A=&VID(195) > 928(160, 3, 0, 0)
2620	:AXBY(52)
2621	:POP_AB(218)
2622	:AU_INT_ADD_A(61)
2623	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
2628	:AXBY(52)
2629	:POP_AB(218)
2630	:AU_INT_ADD_A(61)
2631	:A=*A_nopush(205)
2632	:DBG_A(209) > 6
2634	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
2643	:DBG_A(209) > 8
BakeCode_CompileCodes__set_var : i += 1 
2645	:PUSH_B_CONST_4(27) > 1(1, 0, 0, 0)
2650	:A=&VID(195) > 932(164, 3, 0, 0)
2655	:A=*A_nopush(205)
2656	:AXBY(52)
2657	:AU_INT_ADD_A(61)
2658	:A=&VID(195) > 932(164, 3, 0, 0)
2663	:LA=A(199)
2664	:*LA=A_4(213)
}; BakeCode_CompileCodes Block Finish
BakeCode_CompileCodes__return_ : return 0 
2670	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
2675	:RETURN(193)
}; BakeCode_CompileCodes Block Finish
BakeCode_CompileCodes...finish
ICB[0x7fffffff71e0] BakeCode finish.
Create_New_ICB_Context From ICB[0x7fffffff71e0], with 40960 size memory...finish.