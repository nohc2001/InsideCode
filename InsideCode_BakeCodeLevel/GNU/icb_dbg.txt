Inside Code Bake System Start
ICB_StaticInit...finish
Create_New_ICB_Extension_Init : exGeometry Initialization...finish
Create_New_ICB[0x7fffffff71e0] Initialization...finish
ICB[0x7fffffff71e0] BakeCode start. filename : [code.txt]
ICB[0x7fffffff71e0] BakeCode_GetCodeFromText...finish
ICB[0x7fffffff71e0] BakeCode_AddTextBlocks...finish
ICB[0x7fffffff71e0] BakeCode_ScanStructTypes...finish
ICB[0x7fffffff71e0] BakeCode_AddStructTypes...start
BakeCode_AddStructTypes...finish
ICB[0x7fffffff71e0] BakeCode_ScanCodes...finish
ICB[0x7fffffff71e0] BakeCode_GlobalMemoryInit...finish
ICB[0x7fffffff71e0] BakeCode_CompileCodes...start
BakeCode_CompileCodes__adsetvar: float PI = 3.141592 
BakeCode_CompileCodes__addfunc : int main ( ) 
BakeCode_CompileCodes Block Start {
BakeCode_CompileCodes__adsetvar: vec2f pos1 = _vec2f ( 10 , 20 ) 
BakeCode_CompileCodes__adsetvar: vec2f pos2 = _vec2f ( 3 , 4 ) 
BakeCode_CompileCodes__usefunc : dbg ( "pos1 : (" , pos1 . x , ", " , pos1 . y , ")\n" ) 
BakeCode_CompileCodes__usefunc : dbg ( "pos2 : (" , pos2 . x , ", " , pos2 . y , ")\n" ) 
BakeCode_CompileCodes__adsetvar: line2d line1 = _line2d ( pos1 , pos2 ) 
BakeCode_CompileCodes__usefunc : dbg ( "line1 : fp (" , line1 . fp . x , ", " , line1 . fp . y , "), lp(" , line1 . lp . x , ", " , line1 . lp . y , ")\n" ) 
BakeCode_CompileCodes__adsetvar: float len = get_distance2d ( line1 ) 
BakeCode_CompileCodes__usefunc : dbg ( "len : " , len , "\n" ) 
BakeCode_CompileCodes__adsetvar: circle cir1 = _circle ( pos1 , len ) 
BakeCode_CompileCodes__usefunc : dbg ( "cir1 : center(" , cir1 . center . x , ", " , cir1 . center . y , "), radius(" , cir1 . radius , ")\n" ) 
BakeCode_CompileCodes__adsetvar: vec2f ratePos = get_pos_in_LineAndRatioAB ( line1 , 2 , 1 ) 
BakeCode_CompileCodes__usefunc : dbg ( "ratePos : (" , ratePos . x , ", " , ratePos . y , ")\n" ) 
BakeCode_CompileCodes__adsetvar: angle2d ang1 = _angle2d_delta ( pos1 . x - pos2 . x , pos1 . y - pos2 . y ) 
BakeCode_CompileCodes__usefunc : dbg ( "angle1( rad : " , ang1 . radian , ", delta : (" , ang1 . delta . x , ", " , ang1 . delta . y , "))\n" ) 
BakeCode_CompileCodes__adsetvar: angle2d ang2 = _angle2d ( PI / 3 ) 
BakeCode_CompileCodes__usefunc : dbg ( "angle2( rad : " , ang2 . radian , ", delta : (" , ang2 . delta . x , ", " , ang2 . delta . y , "))\n" ) 
BakeCode_CompileCodes__adsetvar: angle2d rang = addAngle ( ang1 , ang2 ) 
BakeCode_CompileCodes__usefunc : dbg ( "rang( rad : " , rang . radian , ", delta : (" , rang . delta . x , ", " , rang . delta . y , "))\n" ) 
BakeCode_CompileCodes__set_var : pos1 = _vec2f ( pos1 . x + rang . delta . x * 30 , pos1 . y + rang . delta . y * 30 ) 
BakeCode_CompileCodes__usefunc : dbg ( "pos1 : (" , pos1 . x , ", " , pos1 . y , ")\n" ) 
BakeCode_CompileCodes__adsetvar: vec2f cross = get_cross_line ( _line2d ( pos1 , _vec2f ( 10 , 0 ) ) , _line2d ( pos2 , cir1 . center ) ) 
BakeCode_CompileCodes__usefunc : dbg ( "cross : (" , cross . x , ", " , cross . y , ")\n" ) 
BakeCode_CompileCodes__adsetvar: vec2f [ 2 ] circross = get_cross_CircleAndLine ( cir1 , _line2d ( cross , _vec2f ( 20 , 0 ) ) ) 
BakeCode_CompileCodes__usefunc : dbg ( "circross[0] : (" , circross [ 0 ] . x , ", " , circross [ 0 ] . y , ")\n" ) 
BakeCode_CompileCodes__usefunc : dbg ( "circross[1] : (" , circross [ 1 ] . x , ", " , circross [ 1 ] . y , ")\n" ) 
BakeCode_CompileCodes__adsetvar: vec2f enableCross = _vec2f ( 0 , 0 ) 
BakeCode_CompileCodes__if__sen : if ( isNAN ( circross [ 0 ] . x ) ) 
BakeCode_CompileCodes Block Start {
BakeCode_CompileCodes__usefunc : dbg ( "cross 0 is nan!!\n" ) 
BakeCode_CompileCodes__set_var : enableCross = circross [ 1 ] 
}; BakeCode_CompileCodes Block Finish
BakeCode_CompileCodes__if__sen : if ( isNAN ( circross [ 1 ] . x ) ) 
BakeCode_CompileCodes Block Start {
BakeCode_CompileCodes__usefunc : dbg ( "cross 1 is nan!!\n" ) 
BakeCode_CompileCodes__set_var : enableCross = circross [ 0 ] 
}; BakeCode_CompileCodes Block Finish
BakeCode_CompileCodes__usefunc : dbg ( "enableCross : (" , enableCross . x , ", " , enableCross . y , ")\n" ) 
BakeCode_CompileCodes__adsetvar: int bSiz = 100 
BakeCode_CompileCodes__adsetvar: vec2f [ 100 ] bezierCurve = get_poses_in_Bezier1F ( pos1 , cross , pos2 , bSiz ) 
BakeCode_CompileCodes__adsetvar: int i = 0 
BakeCode_CompileCodes__while__ : while ( i < bSiz ) 
BakeCode_CompileCodes Block Start {
BakeCode_CompileCodes__usefunc : dbg ( "pos[" , i , "] : (" , bezierCurve [ i ] . x , ", " , bezierCurve [ i ] . y , ")\n" ) 
BakeCode_CompileCodes__set_var : i += 1 
}; BakeCode_CompileCodes Block Finish
BakeCode_CompileCodes__return_ : return 0 
}; BakeCode_CompileCodes Block Finish
BakeCode_CompileCodes...finish
ICB[0x7fffffff71e0] BakeCode finish.
Create_New_ICB_Context From ICB[0x7fffffff71e0], with 40960 size memory...finish.