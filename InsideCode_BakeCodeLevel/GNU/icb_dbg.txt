Inside Code Bake System Start
ICB_StaticInit...start
ICB_StaticInit create basic types start
ICB_StaticInit Create Type : int...finish
ICB_StaticInit Create Type : char...finish
ICB_StaticInit Create Type : short...finish
ICB_StaticInit Create Type : float...finish
ICB_StaticInit Create Type : bool...finish
ICB_StaticInit Create Type : uint...finish
ICB_StaticInit Create Type : ushort...finish
ICB_StaticInit Create Type : uchar...finish
ICB_StaticInit create basic types finish
ICB_StaticInit create basic operation start
ICB_StaticInit Create Operation : [[]...finish
ICB_StaticInit Create Operation : [.]...finish
ICB_StaticInit Create Operation : [->]...finish
ICB_StaticInit Create Operation : [&]...finish
ICB_StaticInit Create Operation : [*]...finish
ICB_StaticInit Create Operation : [*]...finish
ICB_StaticInit Create Operation : [/]...finish
ICB_StaticInit Create Operation : [%]...finish
ICB_StaticInit Create Operation : [+]...finish
ICB_StaticInit Create Operation : [-]...finish
ICB_StaticInit Create Operation : [==]...finish
ICB_StaticInit Create Operation : [<]...finish
ICB_StaticInit Create Operation : [>]...finish
ICB_StaticInit Create Operation : [<=]...finish
ICB_StaticInit Create Operation : [>=]...finish
ICB_StaticInit Create Operation : [!=]...finish
ICB_StaticInit Create Operation : [!]...finish
ICB_StaticInit Create Operation : [&&]...finish
ICB_StaticInit Create Operation : [||]...finish
ICB_StaticInit create basic operation finish
ICB_StaticInit finish
Create_New_ICB_Extension_Init : exGeometry Initialization...start
Create_New_ICB_Extension_Init Allocate Extension Data Memory...finish
Create_New_ICB_Extension_Init__Bake_Extension...start
Create_New_ICB_Extension_Init__Bake_Extension__GetCodeFromText...finish
Create_New_ICB_Extension_Init__Bake_Extension__AddTextBlocks...finish
Create_New_ICB_Extension_Init__Bake_Extension__ScanStructTypes...finish
Create_New_ICB_Extension_Init__Bake_Extension__AddStructTypes...finish
Create_New_ICB_Extension_Init__Bake_Extension__ScanFunctions...finish
Create_New_ICB_Extension_Init__Bake_Extension__AddFunctions...finish
Create_New_ICB_Extension_Init__Bake_Extension finish
Create_New_ICB_Extension_Init Set_Function_Pointers start
Create_New_ICB_Extension_Init Set_Function_Pointers function name : _vec2f...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : _circle...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : _line2d...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : _angle2d_delta...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : _angle2d...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : get_cross_CircleAndLine...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : get_pos_in_LineAndRatioAB...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : get_poses_in_Bezier1F...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : get_distance2d...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : isPosInRect2d...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : addAngle...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : get_cross_line...finish
Create_New_ICB_Extension_Init Set_Function_Pointers function name : isNAN...finish
Create_New_ICB_Extension_Init Allocate Extension Data Memory finish
Create_New_ICB[0x7fffffff71e0] Initialization...finish
ICB[0x7fffffff71e0] BakeCode start. filename : [code.txt]
ICB[0x7fffffff71e0] BakeCode_GetCodeFromText...finish
ICB[0x7fffffff71e0] BakeCode_AddTextBlocks...-----------------------------------------

 full text : 
float PI = 3.141592;
int main(){
	vec2f pos1 = _vec2f(10, 20);
	vec2f pos2 = _vec2f(3, 4);

	dbg("pos1 : (", pos1.x, ", ", pos1.y, ")\n");
	dbg("pos2 : (", pos2.x, ", ", pos2.y, ")\n");

	line2d line1 = _line2d(pos1, pos2);
	
	dbg("line1 : fp (", line1.fp.x, ", ", line1.fp.y, "), lp(", line1.lp.x, ", ", line1.lp.y, ")\n");

	float len = get_distance2d(line1);
	dbg("len : ", len, "\n");

	circle cir1 = _circle(pos1, len);
	dbg("cir1 : center(", cir1.center.x, ", ", cir1.center.y, "), radius(", cir1.radius, ")\n");

	vec2f ratePos = get_pos_in_LineAndRatioAB(line1, 2, 1);
	dbg("ratePos : (", ratePos.x, ", ", ratePos.y, ")\n");

	angle2d ang1 = _angle2d_delta(pos1.x - pos2.x, pos1.y - pos2.y);
	dbg("angle1( rad : ", ang1.radian, ", delta : (", ang1.delta.x, ", ", ang1.delta.y, "))\n");
	angle2d ang2 = _angle2d(PI / 3);
	dbg("angle2( rad : ", ang2.radian, ", delta : (", ang2.delta.x, ", ", ang2.delta.y, "))\n");
	angle2d rang = addAngle(ang1, ang2);
	dbg("rang( rad : ", rang.radian, ", delta : (", rang.delta.x, ", ", rang.delta.y, "))\n");

	pos1 = _vec2f(pos1.x + rang.delta.x * 30, pos1.y + rang.delta.y * 30);
	dbg("pos1 : (", pos1.x, ", ", pos1.y, ")\n");
	vec2f cross = get_cross_line(_line2d(pos1, _vec2f(10, 0)), _line2d(pos2, cir1.center));
	dbg("cross : (", cross.x, ", ", cross.y, ")\n");

	vec2f[2] circross = get_cross_CircleAndLine(cir1, _line2d(cross, _vec2f(20, 0)));
	dbg("circross[0] : (", circross[0].x, ", ", circross[0].y, ")\n");
	dbg("circross[1] : (", circross[1].x, ", ", circross[1].y, ")\n");
	vec2f enableCross = _vec2f(0, 0);
	if(isNAN(circross[0].x)){
		dbg("cross 0 is nan!!\n");
		enableCross = circross[1];
	}
	if(isNAN(circross[1].x)){
		dbg("cross 1 is nan!!\n");
		enableCross = circross[0];
	}
	dbg("enableCross : (", enableCross.x, ", ", enableCross.y, ")\n");

	int bSiz = 100;
	vec2f[100] bezierCurve = get_poses_in_Bezier1F(pos1, cross, pos2, bSiz);
	int i=0;while(i<bSiz){
		dbg("pos[", i, "] : (", bezierCurve[i].x, ", ", bezierCurve[i].y, ")\n");
		i+=1;
	}
	return 0;
}
4"float"
7"PI" 	9"=" 	11"3" 	12"."
18"141592" 	19";" 	23"int" 	28"main"
29"(" 	30")" 	31"{" 	38"vec2f"
43"pos1" 	45"=" 	52"_vec2f" 	53"("
55"10" 	56"," 	59"20" 	60")"
61";" 	68"vec2f" 	73"pos2" 	75"="
82"_vec2f" 	83"(" 	84"3" 	85","
87"4" 	88")" 	89";" 	95"dbg"
96"(" 	106""pos1 : ("" 	107"," 	112"pos1"
113"." 	114"x" 	115"," 	120"", ""
121"," 	126"pos1" 	127"." 	128"y"
129"," 	135"")\n"" 	136")" 	137";"
142"dbg" 	143"(" 	153""pos2 : ("" 	154","
159"pos2" 	160"." 	161"x" 	162","
167"", "" 	168"," 	173"pos2" 	174"."
175"y" 	176"," 	182"")\n"" 	183")"
184";" 	193"line2d" 	199"line1" 	201"="
209"_line2d" 	210"(" 	214"pos1" 	215","
220"pos2" 	221")" 	222";" 	229"dbg"
230"(" 	244""line1 : fp ("" 	245"," 	251"line1"
252"." 	254"fp" 	255"." 	256"x"
257"," 	262"", "" 	263"," 	269"line1"
270"." 	272"fp" 	273"." 	274"y"
275"," 	284""), lp("" 	285"," 	291"line1"
292"." 	294"lp" 	295"." 	296"x"
297"," 	302"", "" 	303"," 	309"line1"
310"." 	312"lp" 	313"." 	314"y"
315"," 	321"")\n"" 	322")" 	323";"
331"float" 	335"len" 	337"=" 	352"get_distance2d"
353"(" 	358"line1" 	359")" 	360";"
365"dbg" 	366"(" 	374""len : "" 	375","
379"len" 	380"," 	385""\n"" 	386")"
387";" 	396"circle" 	401"cir1" 	403"="
411"_circle" 	412"(" 	416"pos1" 	417","
421"len" 	422")" 	423";" 	428"dbg"
429"(" 	445""cir1 : center("" 	446"," 	451"cir1"
452"." 	458"center" 	459"." 	460"x"
461"," 	466"", "" 	467"," 	472"cir1"
473"." 	479"center" 	480"." 	481"y"
482"," 	495""), radius("" 	496"," 	501"cir1"
502"." 	508"radius" 	509"," 	515"")\n""
516")" 	517";" 	525"vec2f" 	533"ratePos"
535"=" 	561"get_pos_in_LineAndRatioAB" 	562"(" 	567"line1"
568"," 	570"2" 	571"," 	573"1"
574")" 	575";" 	580"dbg" 	581"("
594""ratePos : ("" 	595"," 	603"ratePos" 	604"."
605"x" 	606"," 	611"", "" 	612","
620"ratePos" 	621"." 	622"y" 	623","
629"")\n"" 	630")" 	631";" 	641"angle2d"
646"ang1" 	648"=" 	663"_angle2d_delta" 	664"("
668"pos1" 	669"." 	670"x" 	672"-"
677"pos2" 	678"." 	679"x" 	680","
685"pos1" 	686"." 	687"y" 	689"-"
694"pos2" 	695"." 	696"y" 	697")"
698";" 	703"dbg" 	704"(" 	720""angle1( rad : ""
721"," 	726"ang1" 	727"." 	733"radian"
734"," 	748"", delta : ("" 	749"," 	754"ang1"
755"." 	760"delta" 	761"." 	762"x"
763"," 	768"", "" 	769"," 	774"ang1"
775"." 	780"delta" 	781"." 	782"y"
783"," 	790""))\n"" 	791")" 	792";"
801"angle2d" 	806"ang2" 	808"=" 	817"_angle2d"
818"(" 	820"PI" 	822"/" 	824"3"
825")" 	826";" 	831"dbg" 	832"("
848""angle2( rad : "" 	849"," 	854"ang2" 	855"."
861"radian" 	862"," 	876"", delta : ("" 	877","
882"ang2" 	883"." 	888"delta" 	889"."
890"x" 	891"," 	896"", "" 	897","
902"ang2" 	903"." 	908"delta" 	909"."
910"y" 	911"," 	918""))\n"" 	919")"
920";" 	929"angle2d" 	934"rang" 	936"="
945"addAngle" 	946"(" 	950"ang1" 	951","
956"ang2" 	957")" 	958";" 	963"dbg"
964"(" 	978""rang( rad : "" 	979"," 	984"rang"
985"." 	991"radian" 	992"," 	1006"", delta : (""
1007"," 	1012"rang" 	1013"." 	1018"delta"
1019"." 	1020"x" 	1021"," 	1026"", ""
1027"," 	1032"rang" 	1033"." 	1038"delta"
1039"." 	1040"y" 	1041"," 	1048""))\n""
1049")" 	1050";" 	1057"pos1" 	1059"="
1066"_vec2f" 	1067"(" 	1071"pos1" 	1072"."
1073"x" 	1075"+" 	1080"rang" 	1081"."
1086"delta" 	1087"." 	1088"x" 	1090"*"
1093"30" 	1094"," 	1099"pos1" 	1100"."
1101"y" 	1103"+" 	1108"rang" 	1109"."
1114"delta" 	1115"." 	1116"y" 	1118"*"
1121"30" 	1122")" 	1123";" 	1128"dbg"
1129"(" 	1139""pos1 : ("" 	1140"," 	1145"pos1"
1146"." 	1147"x" 	1148"," 	1153"", ""
1154"," 	1159"pos1" 	1160"." 	1161"y"
1162"," 	1168"")\n"" 	1169")" 	1170";"
1177"vec2f" 	1183"cross" 	1185"=" 	1200"get_cross_line"
1201"(" 	1208"_line2d" 	1209"(" 	1213"pos1"
1214"," 	1221"_vec2f" 	1222"(" 	1224"10"
1225"," 	1227"0" 	1228")" 	1229")"
1230"," 	1238"_line2d" 	1239"(" 	1243"pos2"
1244"," 	1249"cir1" 	1250"." 	1256"center"
1257")" 	1258")" 	1259";" 	1264"dbg"
1265"(" 	1276""cross : ("" 	1277"," 	1283"cross"
1284"." 	1285"x" 	1286"," 	1291"", ""
1292"," 	1298"cross" 	1299"." 	1300"y"
1301"," 	1307"")\n"" 	1308")" 	1309";"
1317"vec2f" 	1318"[" 	1319"2" 	1320"]"
1329"circross" 	1331"=" 	1355"get_cross_CircleAndLine" 	1356"("
1360"cir1" 	1361"," 	1369"_line2d" 	1370"("
1375"cross" 	1376"," 	1383"_vec2f" 	1384"("
1386"20" 	1387"," 	1389"0" 	1390")"
1391")" 	1392")" 	1393";" 	1398"dbg"
1399"(" 	1416""circross[0] : ("" 	1417"," 	1426"circross"
1427"[" 	1428"0" 	1429"]" 	1430"."
1431"x" 	1432"," 	1437"", "" 	1438","
1447"circross" 	1448"[" 	1449"0" 	1450"]"
1451"." 	1452"y" 	1453"," 	1459"")\n""
1460")" 	1461";" 	1466"dbg" 	1467"("
1484""circross[1] : ("" 	1485"," 	1494"circross" 	1495"["
1496"1" 	1497"]" 	1498"." 	1499"x"
1500"," 	1505"", "" 	1506"," 	1515"circross"
1516"[" 	1517"1" 	1518"]" 	1519"."
1520"y" 	1521"," 	1527"")\n"" 	1528")"
1529";" 	1536"vec2f" 	1548"enableCross" 	1550"="
1557"_vec2f" 	1558"(" 	1559"0" 	1560","
1562"0" 	1563")" 	1564";" 	1568"if"
1569"(" 	1574"isNAN" 	1575"(" 	1583"circross"
1584"[" 	1585"0" 	1586"]" 	1587"."
1588"x" 	1589")" 	1590")" 	1591"{"
1597"dbg" 	1598"(" 	1618""cross 0 is nan!!\n"" 	1619")"
1620";" 	1634"enableCross" 	1636"=" 	1645"circross"
1646"[" 	1647"1" 	1648"]" 	1649";"
1652"}" 	1656"if" 	1657"(" 	1662"isNAN"
1663"(" 	1671"circross" 	1672"[" 	1673"1"
1674"]" 	1675"." 	1676"x" 	1677")"
1678")" 	1679"{" 	1685"dbg" 	1686"("
1706""cross 1 is nan!!\n"" 	1707")" 	1708";" 	1722"enableCross"
1724"=" 	1733"circross" 	1734"[" 	1735"0"
1736"]" 	1737";" 	1740"}" 	1745"dbg"
1746"(" 	1763""enableCross : ("" 	1764"," 	1776"enableCross"
1777"." 	1778"x" 	1779"," 	1784"", ""
1785"," 	1797"enableCross" 	1798"." 	1799"y"
1800"," 	1806"")\n"" 	1807")" 	1808";"
1814"int" 	1819"bSiz" 	1821"=" 	1825"100"
1826";" 	1833"vec2f" 	1834"[" 	1837"100"
1838"]" 	1850"bezierCurve" 	1852"=" 	1874"get_poses_in_Bezier1F"
1875"(" 	1879"pos1" 	1880"," 	1886"cross"
1887"," 	1892"pos2" 	1893"," 	1898"bSiz"
1899")" 	1900";" 	1905"int" 	1907"i"
1908"=" 	1909"0" 	1910";" 	1915"while"
1916"(" 	1917"i" 	1918"<" 	1922"bSiz"
1923")" 	1924"{" 	1930"dbg" 	1931"("
1937""pos["" 	1938"," 	1940"i" 	1941","
1949""] : ("" 	1950"," 	1962"bezierCurve" 	1963"["
1964"i" 	1965"]" 	1966"." 	1967"x"
1968"," 	1973"", "" 	1974"," 	1986"bezierCurve"
1987"[" 	1988"i" 	1989"]" 	1990"."
1991"y" 	1992"," 	1998"")\n"" 	1999")"
2000";" 	2004"i" 	2005"+" 	2006"="
2007"1" 	2008";" 	2011"}" 	2019"return"
2021"0" 	2022";" 	2024"}"	
combine block : 3 : "3" + "." + 5 : "141592" => "3.141592"
combine block : 617 : "+" + 618 : "=" => "+="
finish
ICB[0x7fffffff71e0] BakeCode_ScanStructTypes...start
BakeCode_ScanStructTypes...finish
ICB[0x7fffffff71e0] BakeCode_AddStructTypes...start
BakeCode_AddStructTypes...finish
ICB[0x7fffffff71e0] BakeCode_ScanCodes...start
[0] ~ add and set variable : adsetvar: float PI = 3.141592  ~ [4]
[5] ~ addfunction : addfunc : int main ( )  ~ [8]
[9] ~ blocks : start
[0] ~ add and set variable : adsetvar: vec2f pos1 = _vec2f ( 10 , 20 )  ~ [9]
[10] ~ add and set variable : adsetvar: vec2f pos2 = _vec2f ( 3 , 4 )  ~ [19]
[20] ~ use Function : usefunc : dbg ( "pos1 : (" , pos1 . x , ", " , pos1 . y , ")\n" )  ~ [36]
[37] ~ use Function : usefunc : dbg ( "pos2 : (" , pos2 . x , ", " , pos2 . y , ")\n" )  ~ [53]
[54] ~ add and set variable : adsetvar: line2d line1 = _line2d ( pos1 , pos2 )  ~ [63]
[64] ~ use Function : usefunc : dbg ( "line1 : fp (" , line1 . fp . x , ", " , line1 . fp . y , "), lp(" , line1 . lp . x , ", " , line1 . lp . y , ")\n" )  ~ [100]
[101] ~ add and set variable : adsetvar: float len = get_distance2d ( line1 )  ~ [108]
[109] ~ use Function : usefunc : dbg ( "len : " , len , "\n" )  ~ [117]
[118] ~ add and set variable : adsetvar: circle cir1 = _circle ( pos1 , len )  ~ [127]
[128] ~ use Function : usefunc : dbg ( "cir1 : center(" , cir1 . center . x , ", " , cir1 . center . y , "), radius(" , cir1 . radius , ")\n" )  ~ [154]
[155] ~ add and set variable : adsetvar: vec2f ratePos = get_pos_in_LineAndRatioAB ( line1 , 2 , 1 )  ~ [166]
[167] ~ use Function : usefunc : dbg ( "ratePos : (" , ratePos . x , ", " , ratePos . y , ")\n" )  ~ [183]
[184] ~ add and set variable : adsetvar: angle2d ang1 = _angle2d_delta ( pos1 . x - pos2 . x , pos1 . y - pos2 . y )  ~ [205]
[206] ~ use Function : usefunc : dbg ( "angle1( rad : " , ang1 . radian , ", delta : (" , ang1 . delta . x , ", " , ang1 . delta . y , "))\n" )  ~ [232]
[233] ~ add and set variable : adsetvar: angle2d ang2 = _angle2d ( PI / 3 )  ~ [242]
[243] ~ use Function : usefunc : dbg ( "angle2( rad : " , ang2 . radian , ", delta : (" , ang2 . delta . x , ", " , ang2 . delta . y , "))\n" )  ~ [269]
[270] ~ add and set variable : adsetvar: angle2d rang = addAngle ( ang1 , ang2 )  ~ [279]
[280] ~ use Function : usefunc : dbg ( "rang( rad : " , rang . radian , ", delta : (" , rang . delta . x , ", " , rang . delta . y , "))\n" )  ~ [306]
[307] ~  ~ [307]
[308] ~ set Variable : set_var : pos1 = _vec2f ( pos1 . x + rang . delta . x * 30 , pos1 . y + rang . delta . y * 30 )  ~ [335]
[336] ~ use Function : usefunc : dbg ( "pos1 : (" , pos1 . x , ", " , pos1 . y , ")\n" )  ~ [352]
[353] ~ add and set variable : adsetvar: vec2f cross = get_cross_line ( _line2d ( pos1 , _vec2f ( 10 , 0 ) ) , _line2d ( pos2 , cir1 . center ) )  ~ [379]
[380] ~ use Function : usefunc : dbg ( "cross : (" , cross . x , ", " , cross . y , ")\n" )  ~ [396]
[397] ~ add and set variable : adsetvar: vec2f [ 2 ] circross = get_cross_CircleAndLine ( cir1 , _line2d ( cross , _vec2f ( 20 , 0 ) ) )  ~ [419]
[420] ~ use Function : usefunc : dbg ( "circross[0] : (" , circross [ 0 ] . x , ", " , circross [ 0 ] . y , ")\n" )  ~ [442]
[443] ~ use Function : usefunc : dbg ( "circross[1] : (" , circross [ 1 ] . x , ", " , circross [ 1 ] . y , ")\n" )  ~ [465]
[466] ~ add and set variable : adsetvar: vec2f enableCross = _vec2f ( 0 , 0 )  ~ [475]
[476] ~ IF : if__sen : if ( isNAN ( circross [ 0 ] . x ) )  ~ [487]
[488] ~ blocks : start
[0] ~ use Function : usefunc : dbg ( "cross 0 is nan!!\n" )  ~ [4]
[5] ~  ~ [5]
[6] ~ set Variable : set_var : enableCross = circross [ 1 ]  ~ [11]
BakeCode_ScanCodes...block__ : {
usefunc : dbg ( "cross 0 is nan!!\n" ) 
set_var : enableCross = circross [ 1 ] 
closed_ : }
 ~ [501]
[502] ~ IF : if__sen : if ( isNAN ( circross [ 1 ] . x ) )  ~ [513]
[514] ~ blocks : start
[0] ~ use Function : usefunc : dbg ( "cross 1 is nan!!\n" )  ~ [4]
[5] ~  ~ [5]
[6] ~ set Variable : set_var : enableCross = circross [ 0 ]  ~ [11]
BakeCode_ScanCodes...block__ : {
usefunc : dbg ( "cross 1 is nan!!\n" ) 
set_var : enableCross = circross [ 0 ] 
closed_ : }
 ~ [527]
[528] ~ use Function : usefunc : dbg ( "enableCross : (" , enableCross . x , ", " , enableCross . y , ")\n" )  ~ [544]
[545] ~ add and set variable : adsetvar: int bSiz = 100  ~ [549]
[550] ~ add and set variable : adsetvar: vec2f [ 100 ] bezierCurve = get_poses_in_Bezier1F ( pos1 , cross , pos2 , bSiz )  ~ [566]
[567] ~ add and set variable : adsetvar: int i = 0  ~ [571]
[572] ~ while : while__ : while ( i < bSiz )  ~ [577]
[578] ~ blocks : start
[0] ~ use Function : usefunc : dbg ( "pos[" , i , "] : (" , bezierCurve [ i ] . x , ", " , bezierCurve [ i ] . y , ")\n" )  ~ [26]
[27] ~  ~ [27]
[28] ~ set Variable : set_var : i += 1  ~ [30]
BakeCode_ScanCodes...block__ : {
usefunc : dbg ( "pos[" , i , "] : (" , bezierCurve [ i ] . x , ", " , bezierCurve [ i ] . y , ")\n" ) 
set_var : i += 1 
closed_ : }
 ~ [610]
[611] ~ return in Function : return_ : return 0  ~ [613]
BakeCode_ScanCodes...block__ : {
adsetvar: vec2f pos1 = _vec2f ( 10 , 20 ) 
adsetvar: vec2f pos2 = _vec2f ( 3 , 4 ) 
usefunc : dbg ( "pos1 : (" , pos1 . x , ", " , pos1 . y , ")\n" ) 
usefunc : dbg ( "pos2 : (" , pos2 . x , ", " , pos2 . y , ")\n" ) 
adsetvar: line2d line1 = _line2d ( pos1 , pos2 ) 
usefunc : dbg ( "line1 : fp (" , line1 . fp . x , ", " , line1 . fp . y , "), lp(" , line1 . lp . x , ", " , line1 . lp . y , ")\n" ) 
adsetvar: float len = get_distance2d ( line1 ) 
usefunc : dbg ( "len : " , len , "\n" ) 
adsetvar: circle cir1 = _circle ( pos1 , len ) 
usefunc : dbg ( "cir1 : center(" , cir1 . center . x , ", " , cir1 . center . y , "), radius(" , cir1 . radius , ")\n" ) 
adsetvar: vec2f ratePos = get_pos_in_LineAndRatioAB ( line1 , 2 , 1 ) 
usefunc : dbg ( "ratePos : (" , ratePos . x , ", " , ratePos . y , ")\n" ) 
adsetvar: angle2d ang1 = _angle2d_delta ( pos1 . x - pos2 . x , pos1 . y - pos2 . y ) 
usefunc : dbg ( "angle1( rad : " , ang1 . radian , ", delta : (" , ang1 . delta . x , ", " , ang1 . delta . y , "))\n" ) 
adsetvar: angle2d ang2 = _angle2d ( PI / 3 ) 
usefunc : dbg ( "angle2( rad : " , ang2 . radian , ", delta : (" , ang2 . delta . x , ", " , ang2 . delta . y , "))\n" ) 
adsetvar: angle2d rang = addAngle ( ang1 , ang2 ) 
usefunc : dbg ( "rang( rad : " , rang . radian , ", delta : (" , rang . delta . x , ", " , rang . delta . y , "))\n" ) 
set_var : pos1 = _vec2f ( pos1 . x + rang . delta . x * 30 , pos1 . y + rang . delta . y * 30 ) 
usefunc : dbg ( "pos1 : (" , pos1 . x , ", " , pos1 . y , ")\n" ) 
adsetvar: vec2f cross = get_cross_line ( _line2d ( pos1 , _vec2f ( 10 , 0 ) ) , _line2d ( pos2 , cir1 . center ) ) 
usefunc : dbg ( "cross : (" , cross . x , ", " , cross . y , ")\n" ) 
adsetvar: vec2f [ 2 ] circross = get_cross_CircleAndLine ( cir1 , _line2d ( cross , _vec2f ( 20 , 0 ) ) ) 
usefunc : dbg ( "circross[0] : (" , circross [ 0 ] . x , ", " , circross [ 0 ] . y , ")\n" ) 
usefunc : dbg ( "circross[1] : (" , circross [ 1 ] . x , ", " , circross [ 1 ] . y , ")\n" ) 
adsetvar: vec2f enableCross = _vec2f ( 0 , 0 ) 
if__sen : if ( isNAN ( circross [ 0 ] . x ) ) 
block__ : {
usefunc : dbg ( "cross 0 is nan!!\n" ) 
set_var : enableCross = circross [ 1 ] 
closed_ : }

if__sen : if ( isNAN ( circross [ 1 ] . x ) ) 
block__ : {
usefunc : dbg ( "cross 1 is nan!!\n" ) 
set_var : enableCross = circross [ 0 ] 
closed_ : }

usefunc : dbg ( "enableCross : (" , enableCross . x , ", " , enableCross . y , ")\n" ) 
adsetvar: int bSiz = 100 
adsetvar: vec2f [ 100 ] bezierCurve = get_poses_in_Bezier1F ( pos1 , cross , pos2 , bSiz ) 
adsetvar: int i = 0 
while__ : while ( i < bSiz ) 
block__ : {
usefunc : dbg ( "pos[" , i , "] : (" , bezierCurve [ i ] . x , ", " , bezierCurve [ i ] . y , ")\n" ) 
set_var : i += 1 
closed_ : }

return_ : return 0 
closed_ : }
 ~ [624]
BakeCode_ScanCodes...finish
ICB[0x7fffffff71e0] BakeCode_GlobalMemoryInit...start
BakeCode_GlobalMemoryInit Scan Global Memory Code (in datamem[0]) : adsetvar: float PI = 3.141592 
BakeCode_GlobalMemoryInit Find Type Size : ...4
BakeCode_GlobalMemoryInit addsetvar set initial value : ...(float)3.14159
BakeCode_GlobalMemoryInit...finish
ICB[0x7fffffff71e0] BakeCode_CompileCodes...start
BakeCode_CompileCodes__adsetvar: float PI = 3.141592 
6	:PUSH_A_CONST_4(18) > 1078530008(216, 15, 73, 64)
11	:A=&Global_VID(220) > 0(0, 0, 0, 0)
16	:LA=A(199)
17	:*LA=A_4(213)
BakeCode_CompileCodes__addfunc : int main ( ) 
BakeCode_CompileCodes Block Start {
BakeCode_CompileCodes__adsetvar: vec2f pos1 = _vec2f ( 10 , 20 ) 
18	:ADD_STACK_VARIABLE(0) > 8(8, 0, 0, 0)
23	:FUNC(189)
24	:PUSH_A_CONST_4(18) > 20(20, 0, 0, 0)
29	:CASTING_A(201) > 12
31	:PARAM_4(192)
32	:PUSH_A_CONST_4(18) > 10(10, 0, 0, 0)
37	:CASTING_A(201) > 12
39	:PARAM_4(192)
40	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 0(0, 0, 0, 0)
49	:A=&VID(195) > 8(8, 0, 0, 0)
54	:LA=A(199)
55	:*LA=*A_N(224) > 8(8, 0, 0, 0)
BakeCode_CompileCodes__adsetvar: vec2f pos2 = _vec2f ( 3 , 4 ) 
60	:ADD_STACK_VARIABLE(0) > 16(16, 0, 0, 0)
65	:FUNC(189)
66	:PUSH_A_CONST_4(18) > 4(4, 0, 0, 0)
71	:CASTING_A(201) > 12
73	:PARAM_4(192)
74	:PUSH_A_CONST_4(18) > 3(3, 0, 0, 0)
79	:CASTING_A(201) > 12
81	:PARAM_4(192)
82	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 0(0, 0, 0, 0)
91	:A=&VID(195) > 16(16, 0, 0, 0)
96	:LA=A(199)
97	:*LA=*A_N(224) > 8(8, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "pos1 : (" , pos1 . x , ", " , pos1 . y , ")\n" ) 
102	:SET_A_CONST_STRING(214) > 9(9, 0, 0, 0)"pos1 : ("
116	:DBG_A(209) > 8
118	:A=&VID(195) > 8(8, 0, 0, 0)
123	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
128	:AXBY(52)
129	:POP_AB(218)
130	:AU_INT_ADD_A(61)
131	:A=*A_nopush(205)
132	:DBG_A(209) > 6
134	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
142	:DBG_A(209) > 8
144	:A=&VID(195) > 8(8, 0, 0, 0)
149	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
154	:AXBY(52)
155	:POP_AB(218)
156	:AU_INT_ADD_A(61)
157	:A=*A_nopush(205)
158	:DBG_A(209) > 6
160	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
169	:DBG_A(209) > 8
BakeCode_CompileCodes__usefunc : dbg ( "pos2 : (" , pos2 . x , ", " , pos2 . y , ")\n" ) 
171	:SET_A_CONST_STRING(214) > 9(9, 0, 0, 0)"pos2 : ("
185	:DBG_A(209) > 8
187	:A=&VID(195) > 16(16, 0, 0, 0)
192	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
197	:AXBY(52)
198	:POP_AB(218)
199	:AU_INT_ADD_A(61)
200	:A=*A_nopush(205)
201	:DBG_A(209) > 6
203	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
211	:DBG_A(209) > 8
213	:A=&VID(195) > 16(16, 0, 0, 0)
218	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
223	:AXBY(52)
224	:POP_AB(218)
225	:AU_INT_ADD_A(61)
226	:A=*A_nopush(205)
227	:DBG_A(209) > 6
229	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
238	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: line2d line1 = _line2d ( pos1 , pos2 ) 
240	:ADD_STACK_VARIABLE(0) > 32(32, 0, 0, 0)
245	:FUNC(189)
246	:A=&VID(195) > 16(16, 0, 0, 0)
251	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
256	:A=&VID(195) > 8(8, 0, 0, 0)
261	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
266	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 2(2, 0, 0, 0)
275	:A=&VID(195) > 32(32, 0, 0, 0)
280	:LA=A(199)
281	:*LA=*A_N(224) > 16(16, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "line1 : fp (" , line1 . fp . x , ", " , line1 . fp . y , "), lp(" , line1 . lp . x , ", " , line1 . lp . y , ")\n" ) 
286	:SET_A_CONST_STRING(214) > 13(13, 0, 0, 0)"line1 : fp ("
304	:DBG_A(209) > 8
306	:A=&VID(195) > 32(32, 0, 0, 0)
311	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
316	:AXBY(52)
317	:POP_AB(218)
318	:AU_INT_ADD_A(61)
319	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
324	:AXBY(52)
325	:POP_AB(218)
326	:AU_INT_ADD_A(61)
327	:A=*A_nopush(205)
328	:DBG_A(209) > 6
330	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
338	:DBG_A(209) > 8
340	:A=&VID(195) > 32(32, 0, 0, 0)
345	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
350	:AXBY(52)
351	:POP_AB(218)
352	:AU_INT_ADD_A(61)
353	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
358	:AXBY(52)
359	:POP_AB(218)
360	:AU_INT_ADD_A(61)
361	:A=*A_nopush(205)
362	:DBG_A(209) > 6
364	:SET_A_CONST_STRING(214) > 7(7, 0, 0, 0)"), lp("
376	:DBG_A(209) > 8
378	:A=&VID(195) > 32(32, 0, 0, 0)
383	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
388	:AXBY(52)
389	:POP_AB(218)
390	:AU_INT_ADD_A(61)
391	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
396	:AXBY(52)
397	:POP_AB(218)
398	:AU_INT_ADD_A(61)
399	:A=*A_nopush(205)
400	:DBG_A(209) > 6
402	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
410	:DBG_A(209) > 8
412	:A=&VID(195) > 32(32, 0, 0, 0)
417	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
422	:AXBY(52)
423	:POP_AB(218)
424	:AU_INT_ADD_A(61)
425	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
430	:AXBY(52)
431	:POP_AB(218)
432	:AU_INT_ADD_A(61)
433	:A=*A_nopush(205)
434	:DBG_A(209) > 6
436	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
445	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: float len = get_distance2d ( line1 ) 
447	:ADD_STACK_VARIABLE(0) > 36(36, 0, 0, 0)
452	:FUNC(189)
453	:A=&VID(195) > 32(32, 0, 0, 0)
458	:PARAM_N_COPY_BY_ADDRESS(219) > 16(16, 0, 0, 0)
463	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 8(8, 0, 0, 0)
472	:A=&VID(195) > 36(36, 0, 0, 0)
477	:LA=A(199)
478	:*LA=A_4(213)
BakeCode_CompileCodes__usefunc : dbg ( "len : " , len , "\n" ) 
479	:SET_A_CONST_STRING(214) > 7(7, 0, 0, 0)"len : "
491	:DBG_A(209) > 8
493	:A=&VID(195) > 36(36, 0, 0, 0)
498	:A=*A_nopush(205)
499	:DBG_A(209) > 6
501	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)"
"
509	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: circle cir1 = _circle ( pos1 , len ) 
511	:ADD_STACK_VARIABLE(0) > 48(48, 0, 0, 0)
516	:FUNC(189)
517	:A=&VID(195) > 36(36, 0, 0, 0)
522	:A=*A_nopush(205)
523	:PARAM_4(192)
524	:A=&VID(195) > 8(8, 0, 0, 0)
529	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
534	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 1(1, 0, 0, 0)
543	:A=&VID(195) > 48(48, 0, 0, 0)
548	:LA=A(199)
549	:*LA=*A_N(224) > 12(12, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "cir1 : center(" , cir1 . center . x , ", " , cir1 . center . y , "), radius(" , cir1 . radius , ")\n" ) 
554	:SET_A_CONST_STRING(214) > 15(15, 0, 0, 0)"cir1 : center("
574	:DBG_A(209) > 8
576	:A=&VID(195) > 48(48, 0, 0, 0)
581	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
586	:AXBY(52)
587	:POP_AB(218)
588	:AU_INT_ADD_A(61)
589	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
594	:AXBY(52)
595	:POP_AB(218)
596	:AU_INT_ADD_A(61)
597	:A=*A_nopush(205)
598	:DBG_A(209) > 6
600	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
608	:DBG_A(209) > 8
610	:A=&VID(195) > 48(48, 0, 0, 0)
615	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
620	:AXBY(52)
621	:POP_AB(218)
622	:AU_INT_ADD_A(61)
623	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
628	:AXBY(52)
629	:POP_AB(218)
630	:AU_INT_ADD_A(61)
631	:A=*A_nopush(205)
632	:DBG_A(209) > 6
634	:SET_A_CONST_STRING(214) > 11(11, 0, 0, 0)"), radius("
650	:DBG_A(209) > 8
652	:A=&VID(195) > 48(48, 0, 0, 0)
657	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
662	:AXBY(52)
663	:POP_AB(218)
664	:AU_INT_ADD_A(61)
665	:A=*A_nopush(205)
666	:DBG_A(209) > 6
668	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
677	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: vec2f ratePos = get_pos_in_LineAndRatioAB ( line1 , 2 , 1 ) 
679	:ADD_STACK_VARIABLE(0) > 56(56, 0, 0, 0)
684	:FUNC(189)
685	:PUSH_A_CONST_4(18) > 1(1, 0, 0, 0)
690	:CASTING_A(201) > 12
692	:PARAM_4(192)
693	:PUSH_A_CONST_4(18) > 2(2, 0, 0, 0)
698	:CASTING_A(201) > 12
700	:PARAM_4(192)
701	:A=&VID(195) > 32(32, 0, 0, 0)
706	:PARAM_N_COPY_BY_ADDRESS(219) > 16(16, 0, 0, 0)
711	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 6(6, 0, 0, 0)
720	:A=&VID(195) > 56(56, 0, 0, 0)
725	:LA=A(199)
726	:*LA=*A_N(224) > 8(8, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "ratePos : (" , ratePos . x , ", " , ratePos . y , ")\n" ) 
731	:SET_A_CONST_STRING(214) > 12(12, 0, 0, 0)"ratePos : ("
748	:DBG_A(209) > 8
750	:A=&VID(195) > 56(56, 0, 0, 0)
755	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
760	:AXBY(52)
761	:POP_AB(218)
762	:AU_INT_ADD_A(61)
763	:A=*A_nopush(205)
764	:DBG_A(209) > 6
766	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
774	:DBG_A(209) > 8
776	:A=&VID(195) > 56(56, 0, 0, 0)
781	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
786	:AXBY(52)
787	:POP_AB(218)
788	:AU_INT_ADD_A(61)
789	:A=*A_nopush(205)
790	:DBG_A(209) > 6
792	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
801	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: angle2d ang1 = _angle2d_delta ( pos1 . x - pos2 . x , pos1 . y - pos2 . y ) 
803	:ADD_STACK_VARIABLE(0) > 68(68, 0, 0, 0)
808	:FUNC(189)
809	:A=&VID(195) > 8(8, 0, 0, 0)
814	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
819	:AXBY(52)
820	:POP_AB(218)
821	:AU_INT_ADD_A(61)
822	:A=*A_nopush(205)
823	:A=&VID(195) > 16(16, 0, 0, 0)
828	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
833	:AXBY(52)
834	:POP_AB(218)
835	:AU_INT_ADD_A(61)
836	:B=A(223)
837	:POP_A(216)
838	:B=*B_nopush(206)
839	:AXBY(52)
840	:POP_AB(218)
841	:AU_FLOAT_MIN_A(79)
842	:PARAM_4(192)
843	:A=&VID(195) > 8(8, 0, 0, 0)
848	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
853	:AXBY(52)
854	:POP_AB(218)
855	:AU_INT_ADD_A(61)
856	:A=*A_nopush(205)
857	:A=&VID(195) > 16(16, 0, 0, 0)
862	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
867	:AXBY(52)
868	:POP_AB(218)
869	:AU_INT_ADD_A(61)
870	:B=A(223)
871	:POP_A(216)
872	:B=*B_nopush(206)
873	:AXBY(52)
874	:POP_AB(218)
875	:AU_FLOAT_MIN_A(79)
876	:PARAM_4(192)
877	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 3(3, 0, 0, 0)
886	:A=&VID(195) > 68(68, 0, 0, 0)
891	:LA=A(199)
892	:*LA=*A_N(224) > 12(12, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "angle1( rad : " , ang1 . radian , ", delta : (" , ang1 . delta . x , ", " , ang1 . delta . y , "))\n" ) 
897	:SET_A_CONST_STRING(214) > 15(15, 0, 0, 0)"angle1( rad : "
917	:DBG_A(209) > 8
919	:A=&VID(195) > 68(68, 0, 0, 0)
924	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
929	:AXBY(52)
930	:POP_AB(218)
931	:AU_INT_ADD_A(61)
932	:A=*A_nopush(205)
933	:DBG_A(209) > 6
935	:SET_A_CONST_STRING(214) > 12(12, 0, 0, 0)", delta : ("
952	:DBG_A(209) > 8
954	:A=&VID(195) > 68(68, 0, 0, 0)
959	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
964	:AXBY(52)
965	:POP_AB(218)
966	:AU_INT_ADD_A(61)
967	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
972	:AXBY(52)
973	:POP_AB(218)
974	:AU_INT_ADD_A(61)
975	:A=*A_nopush(205)
976	:DBG_A(209) > 6
978	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
986	:DBG_A(209) > 8
988	:A=&VID(195) > 68(68, 0, 0, 0)
993	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
998	:AXBY(52)
999	:POP_AB(218)
1000	:AU_INT_ADD_A(61)
1001	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1006	:AXBY(52)
1007	:POP_AB(218)
1008	:AU_INT_ADD_A(61)
1009	:A=*A_nopush(205)
1010	:DBG_A(209) > 6
1012	:SET_A_CONST_STRING(214) > 5(5, 0, 0, 0)"))
"
1022	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: angle2d ang2 = _angle2d ( PI / 3 ) 
1024	:ADD_STACK_VARIABLE(0) > 80(80, 0, 0, 0)
1029	:FUNC(189)
1030	:A=&Global_VID(220) > 0(0, 0, 0, 0)
1035	:A=*A_nopush(205)
1036	:PUSH_B_CONST_4(27) > 3(3, 0, 0, 0)
1041	:CASTING_B(202) > 12
1043	:AXBY(52)
1044	:POP_AB(218)
1045	:AU_FLOAT_DIV_A(107)
1046	:PARAM_4(192)
1047	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 4(4, 0, 0, 0)
1056	:A=&VID(195) > 80(80, 0, 0, 0)
1061	:LA=A(199)
1062	:*LA=*A_N(224) > 12(12, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "angle2( rad : " , ang2 . radian , ", delta : (" , ang2 . delta . x , ", " , ang2 . delta . y , "))\n" ) 
1067	:SET_A_CONST_STRING(214) > 15(15, 0, 0, 0)"angle2( rad : "
1087	:DBG_A(209) > 8
1089	:A=&VID(195) > 80(80, 0, 0, 0)
1094	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
1099	:AXBY(52)
1100	:POP_AB(218)
1101	:AU_INT_ADD_A(61)
1102	:A=*A_nopush(205)
1103	:DBG_A(209) > 6
1105	:SET_A_CONST_STRING(214) > 12(12, 0, 0, 0)", delta : ("
1122	:DBG_A(209) > 8
1124	:A=&VID(195) > 80(80, 0, 0, 0)
1129	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1134	:AXBY(52)
1135	:POP_AB(218)
1136	:AU_INT_ADD_A(61)
1137	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1142	:AXBY(52)
1143	:POP_AB(218)
1144	:AU_INT_ADD_A(61)
1145	:A=*A_nopush(205)
1146	:DBG_A(209) > 6
1148	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
1156	:DBG_A(209) > 8
1158	:A=&VID(195) > 80(80, 0, 0, 0)
1163	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1168	:AXBY(52)
1169	:POP_AB(218)
1170	:AU_INT_ADD_A(61)
1171	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1176	:AXBY(52)
1177	:POP_AB(218)
1178	:AU_INT_ADD_A(61)
1179	:A=*A_nopush(205)
1180	:DBG_A(209) > 6
1182	:SET_A_CONST_STRING(214) > 5(5, 0, 0, 0)"))
"
1192	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: angle2d rang = addAngle ( ang1 , ang2 ) 
1194	:ADD_STACK_VARIABLE(0) > 92(92, 0, 0, 0)
1199	:FUNC(189)
1200	:A=&VID(195) > 80(80, 0, 0, 0)
1205	:PARAM_N_COPY_BY_ADDRESS(219) > 12(12, 0, 0, 0)
1210	:A=&VID(195) > 68(68, 0, 0, 0)
1215	:PARAM_N_COPY_BY_ADDRESS(219) > 12(12, 0, 0, 0)
1220	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 10(10, 0, 0, 0)
1229	:A=&VID(195) > 92(92, 0, 0, 0)
1234	:LA=A(199)
1235	:*LA=*A_N(224) > 12(12, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "rang( rad : " , rang . radian , ", delta : (" , rang . delta . x , ", " , rang . delta . y , "))\n" ) 
1240	:SET_A_CONST_STRING(214) > 13(13, 0, 0, 0)"rang( rad : "
1258	:DBG_A(209) > 8
1260	:A=&VID(195) > 92(92, 0, 0, 0)
1265	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
1270	:AXBY(52)
1271	:POP_AB(218)
1272	:AU_INT_ADD_A(61)
1273	:A=*A_nopush(205)
1274	:DBG_A(209) > 6
1276	:SET_A_CONST_STRING(214) > 12(12, 0, 0, 0)", delta : ("
1293	:DBG_A(209) > 8
1295	:A=&VID(195) > 92(92, 0, 0, 0)
1300	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1305	:AXBY(52)
1306	:POP_AB(218)
1307	:AU_INT_ADD_A(61)
1308	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1313	:AXBY(52)
1314	:POP_AB(218)
1315	:AU_INT_ADD_A(61)
1316	:A=*A_nopush(205)
1317	:DBG_A(209) > 6
1319	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
1327	:DBG_A(209) > 8
1329	:A=&VID(195) > 92(92, 0, 0, 0)
1334	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1339	:AXBY(52)
1340	:POP_AB(218)
1341	:AU_INT_ADD_A(61)
1342	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1347	:AXBY(52)
1348	:POP_AB(218)
1349	:AU_INT_ADD_A(61)
1350	:A=*A_nopush(205)
1351	:DBG_A(209) > 6
1353	:SET_A_CONST_STRING(214) > 5(5, 0, 0, 0)"))
"
1363	:DBG_A(209) > 8
BakeCode_CompileCodes__set_var : pos1 = _vec2f ( pos1 . x + rang . delta . x * 30 , pos1 . y + rang . delta . y * 30 ) 
1365	:FUNC(189)
1366	:A=&VID(195) > 8(8, 0, 0, 0)
1371	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1376	:AXBY(52)
1377	:POP_AB(218)
1378	:AU_INT_ADD_A(61)
1379	:A=*A_nopush(205)
1380	:A=&VID(195) > 92(92, 0, 0, 0)
1385	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1390	:AXBY(52)
1391	:POP_AB(218)
1392	:AU_INT_ADD_A(61)
1393	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1398	:AXBY(52)
1399	:POP_AB(218)
1400	:AU_INT_ADD_A(61)
1401	:A=*A_nopush(205)
1402	:PUSH_B_CONST_4(27) > 30(30, 0, 0, 0)
1407	:CASTING_B(202) > 12
1409	:AXBY(52)
1410	:POP_AB(218)
1411	:AU_FLOAT_MUL_A(93)
1412	:B=A(223)
1413	:POP_A(216)
1414	:AXBY(52)
1415	:POP_AB(218)
1416	:AU_FLOAT_ADD_A(65)
1417	:PARAM_4(192)
1418	:A=&VID(195) > 8(8, 0, 0, 0)
1423	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1428	:AXBY(52)
1429	:POP_AB(218)
1430	:AU_INT_ADD_A(61)
1431	:A=*A_nopush(205)
1432	:A=&VID(195) > 92(92, 0, 0, 0)
1437	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1442	:AXBY(52)
1443	:POP_AB(218)
1444	:AU_INT_ADD_A(61)
1445	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1450	:AXBY(52)
1451	:POP_AB(218)
1452	:AU_INT_ADD_A(61)
1453	:A=*A_nopush(205)
1454	:PUSH_B_CONST_4(27) > 30(30, 0, 0, 0)
1459	:CASTING_B(202) > 12
1461	:AXBY(52)
1462	:POP_AB(218)
1463	:AU_FLOAT_MUL_A(93)
1464	:B=A(223)
1465	:POP_A(216)
1466	:AXBY(52)
1467	:POP_AB(218)
1468	:AU_FLOAT_ADD_A(65)
1469	:PARAM_4(192)
1470	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 0(0, 0, 0, 0)
1479	:A=&VID(195) > 8(8, 0, 0, 0)
1484	:LA=A(199)
1485	:*LA=*A_N(224) > 8(8, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "pos1 : (" , pos1 . x , ", " , pos1 . y , ")\n" ) 
1490	:SET_A_CONST_STRING(214) > 9(9, 0, 0, 0)"pos1 : ("
1504	:DBG_A(209) > 8
1506	:A=&VID(195) > 8(8, 0, 0, 0)
1511	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1516	:AXBY(52)
1517	:POP_AB(218)
1518	:AU_INT_ADD_A(61)
1519	:A=*A_nopush(205)
1520	:DBG_A(209) > 6
1522	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
1530	:DBG_A(209) > 8
1532	:A=&VID(195) > 8(8, 0, 0, 0)
1537	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1542	:AXBY(52)
1543	:POP_AB(218)
1544	:AU_INT_ADD_A(61)
1545	:A=*A_nopush(205)
1546	:DBG_A(209) > 6
1548	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
1557	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: vec2f cross = get_cross_line ( _line2d ( pos1 , _vec2f ( 10 , 0 ) ) , _line2d ( pos2 , cir1 . center ) ) 
1559	:ADD_STACK_VARIABLE(0) > 100(100, 0, 0, 0)
1564	:FUNC(189)
1565	:FUNC(189)
1566	:A=&VID(195) > 48(48, 0, 0, 0)
1571	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1576	:AXBY(52)
1577	:POP_AB(218)
1578	:AU_INT_ADD_A(61)
1579	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
1584	:A=&VID(195) > 16(16, 0, 0, 0)
1589	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
1594	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 2(2, 0, 0, 0)
1603	:PARAM_N_COPY_BY_ADDRESS(219) > 16(16, 0, 0, 0)
1608	:FUNC(189)
1609	:FUNC(189)
1610	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
1615	:CASTING_A(201) > 12
1617	:PARAM_4(192)
1618	:PUSH_A_CONST_4(18) > 10(10, 0, 0, 0)
1623	:CASTING_A(201) > 12
1625	:PARAM_4(192)
1626	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 0(0, 0, 0, 0)
1635	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
1640	:A=&VID(195) > 8(8, 0, 0, 0)
1645	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
1650	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 2(2, 0, 0, 0)
1659	:PARAM_N_COPY_BY_ADDRESS(219) > 16(16, 0, 0, 0)
1664	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 11(11, 0, 0, 0)
1673	:A=&VID(195) > 100(100, 0, 0, 0)
1678	:LA=A(199)
1679	:*LA=*A_N(224) > 8(8, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "cross : (" , cross . x , ", " , cross . y , ")\n" ) 
1684	:SET_A_CONST_STRING(214) > 10(10, 0, 0, 0)"cross : ("
1699	:DBG_A(209) > 8
1701	:A=&VID(195) > 100(100, 0, 0, 0)
1706	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1711	:AXBY(52)
1712	:POP_AB(218)
1713	:AU_INT_ADD_A(61)
1714	:A=*A_nopush(205)
1715	:DBG_A(209) > 6
1717	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
1725	:DBG_A(209) > 8
1727	:A=&VID(195) > 100(100, 0, 0, 0)
1732	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1737	:AXBY(52)
1738	:POP_AB(218)
1739	:AU_INT_ADD_A(61)
1740	:A=*A_nopush(205)
1741	:DBG_A(209) > 6
1743	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
1752	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: vec2f [ 2 ] circross = get_cross_CircleAndLine ( cir1 , _line2d ( cross , _vec2f ( 20 , 0 ) ) ) 
1754	:ADD_STACK_VARIABLE(0) > 116(116, 0, 0, 0)
1759	:FUNC(189)
1760	:FUNC(189)
1761	:FUNC(189)
1762	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
1767	:CASTING_A(201) > 12
1769	:PARAM_4(192)
1770	:PUSH_A_CONST_4(18) > 20(20, 0, 0, 0)
1775	:CASTING_A(201) > 12
1777	:PARAM_4(192)
1778	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 0(0, 0, 0, 0)
1787	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
1792	:A=&VID(195) > 100(100, 0, 0, 0)
1797	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
1802	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 2(2, 0, 0, 0)
1811	:PARAM_N_COPY_BY_ADDRESS(219) > 16(16, 0, 0, 0)
1816	:A=&VID(195) > 48(48, 0, 0, 0)
1821	:PARAM_N_COPY_BY_ADDRESS(219) > 12(12, 0, 0, 0)
1826	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 5(5, 0, 0, 0)
1835	:A=&VID(195) > 116(116, 0, 0, 0)
1840	:LA=A(199)
1841	:*LA=*A_N(224) > 16(16, 0, 0, 0)
BakeCode_CompileCodes__usefunc : dbg ( "circross[0] : (" , circross [ 0 ] . x , ", " , circross [ 0 ] . y , ")\n" ) 
1846	:SET_A_CONST_STRING(214) > 16(16, 0, 0, 0)"circross[0] : ("
1867	:DBG_A(209) > 8
1869	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
1874	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
1879	:AXBY(52)
1880	:POP_AB(218)
1881	:AU_UINT_MUL_B(92)
1882	:A=&VID(195) > 116(116, 0, 0, 0)
1887	:AXBY(52)
1888	:POP_AB(218)
1889	:AU_INT_ADD_A(61)
1890	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
1895	:AXBY(52)
1896	:POP_AB(218)
1897	:AU_INT_ADD_A(61)
1898	:A=*A_nopush(205)
1899	:DBG_A(209) > 6
1901	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
1909	:DBG_A(209) > 8
1911	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
1916	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
1921	:AXBY(52)
1922	:POP_AB(218)
1923	:AU_UINT_MUL_B(92)
1924	:A=&VID(195) > 116(116, 0, 0, 0)
1929	:AXBY(52)
1930	:POP_AB(218)
1931	:AU_INT_ADD_A(61)
1932	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
1937	:AXBY(52)
1938	:POP_AB(218)
1939	:AU_INT_ADD_A(61)
1940	:A=*A_nopush(205)
1941	:DBG_A(209) > 6
1943	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
1952	:DBG_A(209) > 8
BakeCode_CompileCodes__usefunc : dbg ( "circross[1] : (" , circross [ 1 ] . x , ", " , circross [ 1 ] . y , ")\n" ) 
1954	:SET_A_CONST_STRING(214) > 16(16, 0, 0, 0)"circross[1] : ("
1975	:DBG_A(209) > 8
1977	:PUSH_A_CONST_4(18) > 1(1, 0, 0, 0)
1982	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
1987	:AXBY(52)
1988	:POP_AB(218)
1989	:AU_UINT_MUL_B(92)
1990	:A=&VID(195) > 116(116, 0, 0, 0)
1995	:AXBY(52)
1996	:POP_AB(218)
1997	:AU_INT_ADD_A(61)
1998	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
2003	:AXBY(52)
2004	:POP_AB(218)
2005	:AU_INT_ADD_A(61)
2006	:A=*A_nopush(205)
2007	:DBG_A(209) > 6
2009	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
2017	:DBG_A(209) > 8
2019	:PUSH_A_CONST_4(18) > 1(1, 0, 0, 0)
2024	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
2029	:AXBY(52)
2030	:POP_AB(218)
2031	:AU_UINT_MUL_B(92)
2032	:A=&VID(195) > 116(116, 0, 0, 0)
2037	:AXBY(52)
2038	:POP_AB(218)
2039	:AU_INT_ADD_A(61)
2040	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
2045	:AXBY(52)
2046	:POP_AB(218)
2047	:AU_INT_ADD_A(61)
2048	:A=*A_nopush(205)
2049	:DBG_A(209) > 6
2051	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
2060	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: vec2f enableCross = _vec2f ( 0 , 0 ) 
2062	:ADD_STACK_VARIABLE(0) > 124(124, 0, 0, 0)
2067	:FUNC(189)
2068	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
2073	:CASTING_A(201) > 12
2075	:PARAM_4(192)
2076	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
2081	:CASTING_A(201) > 12
2083	:PARAM_4(192)
2084	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 0(0, 0, 0, 0)
2093	:A=&VID(195) > 124(124, 0, 0, 0)
2098	:LA=A(199)
2099	:*LA=*A_N(224) > 8(8, 0, 0, 0)
BakeCode_CompileCodes__if__sen : if ( isNAN ( circross [ 0 ] . x ) ) 
2104	:FUNC(189)
2105	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
2110	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
2115	:AXBY(52)
2116	:POP_AB(218)
2117	:AU_UINT_MUL_B(92)
2118	:A=&VID(195) > 116(116, 0, 0, 0)
2123	:AXBY(52)
2124	:POP_AB(218)
2125	:AU_INT_ADD_A(61)
2126	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
2131	:AXBY(52)
2132	:POP_AB(218)
2133	:AU_INT_ADD_A(61)
2134	:A=*A_nopush(205)
2135	:PARAM_4(192)
2136	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 12(12, 0, 0, 0)
2145	:IF(187) > -1(255, 255, 255, 255)
BakeCode_CompileCodes Block Start {
BakeCode_CompileCodes__usefunc : dbg ( "cross 0 is nan!!\n" ) 
2150	:SET_A_CONST_STRING(214) > 19(19, 0, 0, 0)"cross 0 is nan!!
"
2174	:DBG_A(209) > 8
BakeCode_CompileCodes__set_var : enableCross = circross [ 1 ] 
2176	:PUSH_A_CONST_4(18) > 1(1, 0, 0, 0)
2181	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
2186	:AXBY(52)
2187	:POP_AB(218)
2188	:AU_UINT_MUL_B(92)
2189	:A=&VID(195) > 116(116, 0, 0, 0)
2194	:AXBY(52)
2195	:POP_AB(218)
2196	:AU_INT_ADD_A(61)
2197	:A=&VID(195) > 124(124, 0, 0, 0)
2202	:LA=A(199)
2203	:*LA=*A_N(224) > 8(8, 0, 0, 0)
}; BakeCode_CompileCodes Block Finish
BakeCode_CompileCodes__if__sen : if ( isNAN ( circross [ 1 ] . x ) ) 
2208	:FUNC(189)
2209	:PUSH_A_CONST_4(18) > 1(1, 0, 0, 0)
2214	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
2219	:AXBY(52)
2220	:POP_AB(218)
2221	:AU_UINT_MUL_B(92)
2222	:A=&VID(195) > 116(116, 0, 0, 0)
2227	:AXBY(52)
2228	:POP_AB(218)
2229	:AU_INT_ADD_A(61)
2230	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
2235	:AXBY(52)
2236	:POP_AB(218)
2237	:AU_INT_ADD_A(61)
2238	:A=*A_nopush(205)
2239	:PARAM_4(192)
2240	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 12(12, 0, 0, 0)
2249	:IF(187) > -1(255, 255, 255, 255)
BakeCode_CompileCodes Block Start {
BakeCode_CompileCodes__usefunc : dbg ( "cross 1 is nan!!\n" ) 
2254	:SET_A_CONST_STRING(214) > 19(19, 0, 0, 0)"cross 1 is nan!!
"
2278	:DBG_A(209) > 8
BakeCode_CompileCodes__set_var : enableCross = circross [ 0 ] 
2280	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
2285	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
2290	:AXBY(52)
2291	:POP_AB(218)
2292	:AU_UINT_MUL_B(92)
2293	:A=&VID(195) > 116(116, 0, 0, 0)
2298	:AXBY(52)
2299	:POP_AB(218)
2300	:AU_INT_ADD_A(61)
2301	:A=&VID(195) > 124(124, 0, 0, 0)
2306	:LA=A(199)
2307	:*LA=*A_N(224) > 8(8, 0, 0, 0)
}; BakeCode_CompileCodes Block Finish
BakeCode_CompileCodes__usefunc : dbg ( "enableCross : (" , enableCross . x , ", " , enableCross . y , ")\n" ) 
2312	:SET_A_CONST_STRING(214) > 16(16, 0, 0, 0)"enableCross : ("
2333	:DBG_A(209) > 8
2335	:A=&VID(195) > 124(124, 0, 0, 0)
2340	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
2345	:AXBY(52)
2346	:POP_AB(218)
2347	:AU_INT_ADD_A(61)
2348	:A=*A_nopush(205)
2349	:DBG_A(209) > 6
2351	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
2359	:DBG_A(209) > 8
2361	:A=&VID(195) > 124(124, 0, 0, 0)
2366	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
2371	:AXBY(52)
2372	:POP_AB(218)
2373	:AU_INT_ADD_A(61)
2374	:A=*A_nopush(205)
2375	:DBG_A(209) > 6
2377	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
2386	:DBG_A(209) > 8
BakeCode_CompileCodes__adsetvar: int bSiz = 100 
2388	:ADD_STACK_VARIABLE(0) > 128(128, 0, 0, 0)
2393	:PUSH_A_CONST_4(18) > 100(100, 0, 0, 0)
2398	:A=&VID(195) > 128(128, 0, 0, 0)
2403	:LA=A(199)
2404	:*LA=A_4(213)
BakeCode_CompileCodes__adsetvar: vec2f [ 100 ] bezierCurve = get_poses_in_Bezier1F ( pos1 , cross , pos2 , bSiz ) 
2405	:ADD_STACK_VARIABLE(0) > 928(160, 3, 0, 0)
2410	:FUNC(189)
2411	:A=&VID(195) > 128(128, 0, 0, 0)
2416	:A=*A_nopush(205)
2417	:PARAM_4(192)
2418	:A=&VID(195) > 16(16, 0, 0, 0)
2423	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
2428	:A=&VID(195) > 100(100, 0, 0, 0)
2433	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
2438	:A=&VID(195) > 8(8, 0, 0, 0)
2443	:PARAM_N_COPY_BY_ADDRESS(219) > 8(8, 0, 0, 0)
2448	:Extend_Instruction(255) > 0(0, 0, 0, 0) > 7(7, 0, 0, 0)
2457	:A=&VID(195) > 928(160, 3, 0, 0)
2462	:LA=A(199)
2463	:*LA=*A_N(224) > 800(32, 3, 0, 0)
BakeCode_CompileCodes__adsetvar: int i = 0 
2468	:ADD_STACK_VARIABLE(0) > 932(164, 3, 0, 0)
2473	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
2478	:A=&VID(195) > 932(164, 3, 0, 0)
2483	:LA=A(199)
2484	:*LA=A_4(213)
BakeCode_CompileCodes__while__ : while ( i < bSiz ) 
2485	:A=&VID(195) > 932(164, 3, 0, 0)
2490	:A=*A_nopush(205)
2491	:B=&VID(196) > 128(128, 0, 0, 0)
2496	:B=*B_nopush(206)
2497	:AXBY(52)
2498	:POP_AB(218)
2499	:CM_BOOL_INT_RBIG_A(167)
2500	:IF(187) > -1(255, 255, 255, 255)
BakeCode_CompileCodes Block Start {
BakeCode_CompileCodes__usefunc : dbg ( "pos[" , i , "] : (" , bezierCurve [ i ] . x , ", " , bezierCurve [ i ] . y , ")\n" ) 
2505	:SET_A_CONST_STRING(214) > 5(5, 0, 0, 0)"pos["
2515	:DBG_A(209) > 8
2517	:A=&VID(195) > 932(164, 3, 0, 0)
2522	:A=*A_nopush(205)
2523	:DBG_A(209) > 4
2525	:SET_A_CONST_STRING(214) > 6(6, 0, 0, 0)"] : ("
2536	:DBG_A(209) > 8
2538	:A=&VID(195) > 932(164, 3, 0, 0)
2543	:A=*A_nopush(205)
2544	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
2549	:AXBY(52)
2550	:POP_AB(218)
2551	:AU_UINT_MUL_B(92)
2552	:A=&VID(195) > 928(160, 3, 0, 0)
2557	:AXBY(52)
2558	:POP_AB(218)
2559	:AU_INT_ADD_A(61)
2560	:PUSH_B_CONST_4(27) > 0(0, 0, 0, 0)
2565	:AXBY(52)
2566	:POP_AB(218)
2567	:AU_INT_ADD_A(61)
2568	:A=*A_nopush(205)
2569	:DBG_A(209) > 6
2571	:SET_A_CONST_STRING(214) > 3(3, 0, 0, 0)", "
2579	:DBG_A(209) > 8
2581	:A=&VID(195) > 932(164, 3, 0, 0)
2586	:A=*A_nopush(205)
2587	:PUSH_B_CONST_4(27) > 8(8, 0, 0, 0)
2592	:AXBY(52)
2593	:POP_AB(218)
2594	:AU_UINT_MUL_B(92)
2595	:A=&VID(195) > 928(160, 3, 0, 0)
2600	:AXBY(52)
2601	:POP_AB(218)
2602	:AU_INT_ADD_A(61)
2603	:PUSH_B_CONST_4(27) > 4(4, 0, 0, 0)
2608	:AXBY(52)
2609	:POP_AB(218)
2610	:AU_INT_ADD_A(61)
2611	:A=*A_nopush(205)
2612	:DBG_A(209) > 6
2614	:SET_A_CONST_STRING(214) > 4(4, 0, 0, 0)")
"
2623	:DBG_A(209) > 8
BakeCode_CompileCodes__set_var : i += 1 
2625	:PUSH_B_CONST_4(27) > 1(1, 0, 0, 0)
2630	:A=&VID(195) > 932(164, 3, 0, 0)
2635	:A=*A_nopush(205)
2636	:AXBY(52)
2637	:AU_INT_ADD_A(61)
2638	:A=&VID(195) > 932(164, 3, 0, 0)
2643	:LA=A(199)
2644	:*LA=A_4(213)
}; BakeCode_CompileCodes Block Finish
BakeCode_CompileCodes__return_ : return 0 
2650	:PUSH_A_CONST_4(18) > 0(0, 0, 0, 0)
2655	:RETURN(193)
}; BakeCode_CompileCodes Block Finish
BakeCode_CompileCodes...finish
ICB[0x7fffffff71e0] BakeCode finish.
Create_New_ICB_Context From ICB[0x7fffffff71e0], with 40960 size memory...finish.