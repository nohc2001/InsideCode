#include <iostream>
#include <string.h>
using namespace std;
// hello
#define coprange constexpr op_range
#define copn constexpr int

enum class op_type
{
  // undefined
  Undefine,

  // Reserved
  Reserved_UDF,

  // SME
  SME_OuterProduct_64bit_FP64_FMOPA,
  SME_OuterProduct_64bit_FP64_FMOPS,

  SME_OuterProduct_64bit_Int16_FMOPA,
  SME_OuterProduct_64bit_Int16_FMOPS,
  SME_OuterProduct_64bit_Int16_SUMOPA,
  SME_OuterProduct_64bit_Int16_SUMOPS,
  SME_OuterProduct_64bit_Int16_USMOPA,
  SME_OuterProduct_64bit_Int16_USMOPS,
  SME_OuterProduct_64bit_Int16_UMOPA,
  SME_OuterProduct_64bit_Int16_UMOPS,

  SME_FP_OuterProduct_32bit_FP32_FMOPA,
  SME_FP_OuterProduct_32bit_FP32_FMOPS,
  SME_FP_OuterProduct_32bit_Widning_BF16_BFMOPA,
  SME_FP_OuterProduct_32bit_Widning_BF16_BFMOPS,
  SME_FP_OuterProduct_32bit_FP16_Widning_FMOPA,
  SME_FP_OuterProduct_32bit_FP16_Widning_FMOPS,

  SME_2_Binary_OuterProduct_32bit_BMOPA,
  SME_2_Binary_OuterProduct_32bit_BMOPS,

  SME_Integer_Outer_Product_32bit_Int16_2Way_SMOPA,
  SME_Integer_Outer_Product_32bit_Int16_2Way_SMOPS,
  SME_Integer_Outer_Product_32bit_Int16_2Way_UMOPA,
  SME_Integer_Outer_Product_32bit_Int16_2Way_UMOPS,
  SME_Integer_Outer_Product_32bit_Int8_SMOPA,
  SME_Integer_Outer_Product_32bit_Int8_SMOPS,
  SME_Integer_Outer_Product_32bit_Int8_SUMOPA,
  SME_Integer_Outer_Product_32bit_Int8_SUMOPS,
  SME_Integer_Outer_Product_32bit_Int8_USMOPA,
  SME_Integer_Outer_Product_32bit_Int8_USMOPS,
  SME_Integer_Outer_Product_32bit_Int8_UMOPA,
  SME_Integer_Outer_Product_32bit_Int8_UMOPS,

  SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LD1B,
  SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LDNT1B,
  SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LD1H,
  SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LDNT1H,
  SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LD1W,
  SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LDNT1W,
  SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LD1D,
  SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LDNT1D,
  SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LD1B,
  SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LDNT1B,
  SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LD1H,
  SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LDNT1H,
  SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LD1W,
  SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LDNT1W,
  SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LD1D,
  SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LDNT1D,
  SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_ST1B,
  SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_STNT1B,
  SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_ST1H,
  SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_STNT1H,
  SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_ST1W,
  SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_STNT1W,
  SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_ST1D,
  SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_STNT1D,
  SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_ST1B,
  SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_STNT1B,
  SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_ST1H,
  SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_STNT1H,
  SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_ST1W,
  SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_STNT1W,
  SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_ST1D,
  SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_STNT1D,
  SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LD1B,
  SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LDNT1B,
  SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LD1H,
  SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LDNT1H,
  SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LD1W,
  SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LDNT1W,
  SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LD1D,
  SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LDNT1D,
  SME_2_MultiVector_Memory_Continguous_Load_spi_4Register_LD1B,
  SME_2_MultiVector_Memory_Continguous_Load_spi_4Register_LDNT1B,
  SME_2_MultiVector_Memory_Continguous_Load_spi_4Register_LD1H,
  SME_2_MultiVector_Memory_Continguous_Load_spi_4Register_LDNT1H,
  SME_2_MultiVector_Memory_Continguous_Load_spi_4Register_LD1W,
  SME_2_MultiVector_Memory_Continguous_Load_spi_4Register_LDNT1W,
  SME_2_MultiVector_Memory_Continguous_Load_spi_4Register_LD1D,
  SME_2_MultiVector_Memory_Continguous_Load_spi_4Register_LDNT1D,
  SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_ST1B,
  SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_STNT1B,
  SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_ST1H,
  SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_STNT1H,
  SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_ST1W,
  SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_STNT1W,
  SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_ST1D,
  SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_STNT1D,
  SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_ST1B,
  SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_STNT1B,
  SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_ST1H,
  SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_STNT1H,
  SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_ST1W,
  SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_STNT1W,
  SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_ST1D,
  SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_STNT1D,

  SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LD1B,
  SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LDNT1B,
  SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LD1H,
  SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LDNT1H,
  SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LD1W,
  SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LDNT1W,
  SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LD1D,
  SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LDNT1D,
  SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LD1B,
  SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LDNT1B,
  SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LD1H,
  SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LDNT1H,
  SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LD1W,
  SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LDNT1W,
  SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LD1D,
  SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LDNT1D,
  SME_2_MultiVector_Memory_Strided_Store_sps_2Register_ST1B,
  SME_2_MultiVector_Memory_Strided_Store_sps_2Register_STNT1B,
  SME_2_MultiVector_Memory_Strided_Store_sps_2Register_ST1H,
  SME_2_MultiVector_Memory_Strided_Store_sps_2Register_STNT1H,
  SME_2_MultiVector_Memory_Strided_Store_sps_2Register_ST1W,
  SME_2_MultiVector_Memory_Strided_Store_sps_2Register_STNT1W,
  SME_2_MultiVector_Memory_Strided_Store_sps_2Register_ST1D,
  SME_2_MultiVector_Memory_Strided_Store_sps_2Register_STNT1D,
  SME_2_MultiVector_Memory_Strided_Store_sps_4Register_ST1B,
  SME_2_MultiVector_Memory_Strided_Store_sps_4Register_STNT1B,
  SME_2_MultiVector_Memory_Strided_Store_sps_4Register_ST1H,
  SME_2_MultiVector_Memory_Strided_Store_sps_4Register_STNT1H,
  SME_2_MultiVector_Memory_Strided_Store_sps_4Register_ST1W,
  SME_2_MultiVector_Memory_Strided_Store_sps_4Register_STNT1W,
  SME_2_MultiVector_Memory_Strided_Store_sps_4Register_ST1D,
  SME_2_MultiVector_Memory_Strided_Store_sps_4Register_STNT1D,
  SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LD1B,
  SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LDNT1B,
  SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LD1H,
  SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LDNT1H,
  SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LD1W,
  SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LDNT1W,
  SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LD1D,
  SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LDNT1D,
  SME_2_MultiVector_Memory_Strided_Load_spi_4Register_LD1B,
  SME_2_MultiVector_Memory_Strided_Load_spi_4Register_LDNT1B,
  SME_2_MultiVector_Memory_Strided_Load_spi_4Register_LD1H,
  SME_2_MultiVector_Memory_Strided_Load_spi_4Register_LDNT1H,
  SME_2_MultiVector_Memory_Strided_Load_spi_4Register_LD1W,
  SME_2_MultiVector_Memory_Strided_Load_spi_4Register_LDNT1W,
  SME_2_MultiVector_Memory_Strided_Load_spi_4Register_LD1D,
  SME_2_MultiVector_Memory_Strided_Load_spi_4Register_LDNT1D,
  SME_2_MultiVector_Memory_Strided_Store_spi_2Register_ST1B,
  SME_2_MultiVector_Memory_Strided_Store_spi_2Register_STNT1B,
  SME_2_MultiVector_Memory_Strided_Store_spi_2Register_ST1H,
  SME_2_MultiVector_Memory_Strided_Store_spi_2Register_STNT1H,
  SME_2_MultiVector_Memory_Strided_Store_spi_2Register_ST1W,
  SME_2_MultiVector_Memory_Strided_Store_spi_2Register_STNT1W,
  SME_2_MultiVector_Memory_Strided_Store_spi_2Register_ST1D,
  SME_2_MultiVector_Memory_Strided_Store_spi_2Register_STNT1D,
  SME_2_MultiVector_Memory_Strided_Store_spi_4Register_ST1B,
  SME_2_MultiVector_Memory_Strided_Store_spi_4Register_STNT1B,
  SME_2_MultiVector_Memory_Strided_Store_spi_4Register_ST1H,
  SME_2_MultiVector_Memory_Strided_Store_spi_4Register_STNT1H,
  SME_2_MultiVector_Memory_Strided_Store_spi_4Register_ST1W,
  SME_2_MultiVector_Memory_Strided_Store_spi_4Register_STNT1W,
  SME_2_MultiVector_Memory_Strided_Store_spi_4Register_ST1D,
  SME_2_MultiVector_Memory_Strided_Store_spi_4Register_STNT1D,

  SME_MoveIntoArray_MOVA_2Register,
  SME_MoveIntoArray_MOVA_4Register,
  SME_MoveIntoArray_MoveVectorToArray,
  SME_MoveIntoArray_2_MoveVectorToTitle_2Register,
  SME_MoveIntoArray_2_MoveVectorToTitle_4Register,

  SME_MoveFromArray_MOVA_2Register,
  SME_MoveFromArray_MOVA_4Register,
  SME_MoveFromArray_MoveArrayToVector,
  SME_MoveFromArray_2_MoveTitleToVector_2Register,
  SME_MoveFromArray_2_MoveTitleToVector_4Register,

  SME_AddVectorToArray_ADDHA_FEAT_SME,
  SME_AddVectorToArray_ADDVA_FEAT_SME,
  SME_AddVectorToArray_ADDHA_FEAT_SME_I16I64,
  SME_AddVectorToArray_ADDVA_FEAT_SME_I16I64,

  SME_Zero,

  SME_2_Zero_LookupTable,

  SME_2_Move_LookupTable_From_MOVT,
  SME_2_Move_LookupTable_Into_MOVT,

  SME_2_Expand_LookupTable_Continguous_4Register_LUTI4,
  SME_2_Expand_LookupTable_Continguous_4Register_LUTI2,
  SME_2_Expand_LookupTable_Continguous_2Register_LUTI4,
  SME_2_Expand_LookupTable_Continguous_2Register_LUTI2,
  SME_2_Expand_LookupTable_Continguous_1Register_LUTI4,
  SME_2_Expand_LookupTable_Continguous_1Register_LUTI2,

  SME_2_MultiVector_Indexed_1Register_longMLA_32bit_SMLALL,
  SME_2_MultiVector_Indexed_1Register_longMLA_32bit_USMLALL,
  SME_2_MultiVector_Indexed_1Register_longMLA_32bit_SMLSLL,
  SME_2_MultiVector_Indexed_1Register_longMLA_32bit_UMLALL,
  SME_2_MultiVector_Indexed_1Register_longMLA_32bit_SUMLALL,
  SME_2_MultiVector_Indexed_1Register_longMLA_32bit_UMLSLL,
  SME_2_MultiVector_Indexed_1Register_longMLA_64bit_SMLALL,
  SME_2_MultiVector_Indexed_1Register_longMLA_64bit_SMLSLL,
  SME_2_MultiVector_Indexed_1Register_longMLA_64bit_UMLALL,
  SME_2_MultiVector_Indexed_1Register_longMLA_64bit_UMLSLL,
  SME_2_MultiVector_Indexed_1Register_longFMA_FMLAL,
  SME_2_MultiVector_Indexed_1Register_longFMA_FMLSL,
  SME_2_MultiVector_Indexed_1Register_longFMA_BFMLAL,
  SME_2_MultiVector_Indexed_1Register_longFMA_BFMLSL,
  SME_2_MultiVector_Indexed_1Register_longMLA_SMLAL,
  SME_2_MultiVector_Indexed_1Register_longMLA_SMLSL,
  SME_2_MultiVector_Indexed_1Register_longMLA_UMLAL,
  SME_2_MultiVector_Indexed_1Register_longMLA_UMLSL,

  SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_SMLALL,
  SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_SMLSLL,
  SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_UMLALL,
  SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_UMLSLL,
  SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_USMLALL,
  SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_SUMLALL,
  SME_2_MultiVector_Indexed_2Register_Ternary_32bit_FMLA,
  SME_2_MultiVector_Indexed_2Register_Ternary_32bit_FVDOT,
  SME_2_MultiVector_Indexed_2Register_Ternary_32bit_FMLS,
  SME_2_MultiVector_Indexed_2Register_Ternary_32bit_BFVDOT,
  SME_2_MultiVector_Indexed_2Register_Ternary_32bit_SVDOT,
  SME_2_MultiVector_Indexed_2Register_Ternary_32bit_UVDOT,
  SME_2_MultiVector_Indexed_2Register_Ternary_32bit_SDOT2,
  SME_2_MultiVector_Indexed_2Register_Ternary_32bit_FDOT,
  SME_2_MultiVector_Indexed_2Register_Ternary_32bit_UDOT,
  SME_2_MultiVector_Indexed_2Register_Ternary_32bit_BFDOT,
  SME_2_MultiVector_Indexed_2Register_Ternary_32bit_SDOT4,
  SME_2_MultiVector_Indexed_2Register_Ternary_32bit_USDOT,
  SME_2_MultiVector_Indexed_2Register_Ternary_32bit_UDOT,
  SME_2_MultiVector_Indexed_2Register_Ternary_32bit_SUDOT,
  SME_2_MultiVector_Indexed_2Register_llongMLA_ts_64bit_SMLALL,
  SME_2_MultiVector_Indexed_2Register_llongMLA_ts_64bit_SMLSLL,
  SME_2_MultiVector_Indexed_2Register_llongMLA_ts_64bit_UMLALL,
  SME_2_MultiVector_Indexed_2Register_llongMLA_ts_64bit_UMLSLL,
  SME_2_MultiVector_Indexed_2Register_longFMA_ts_FMLAL,
  SME_2_MultiVector_Indexed_2Register_longFMA_ts_FMLSL,
  SME_2_MultiVector_Indexed_2Register_longFMA_ts_BFMLAL,
  SME_2_MultiVector_Indexed_2Register_longFMA_ts_BFMLSL,
  SME_2_MultiVector_Indexed_2Register_Ternary_64bit_FMLA,
  SME_2_MultiVector_Indexed_2Register_Ternary_64bit_SDOT,
  SME_2_MultiVector_Indexed_2Register_Ternary_64bit_FMLS,
  SME_2_MultiVector_Indexed_2Register_Ternary_64bit_UDOT,
  SME_2_MultiVector_Indexed_2Register_longMLA_ts_SMLAL,
  SME_2_MultiVector_Indexed_2Register_longMLA_ts_SMLSL,
  SME_2_MultiVector_Indexed_2Register_longMLA_ts_UMLAL,
  SME_2_MultiVector_Indexed_2Register_longMLA_ts_UMLSL,

  SME_2_MultiVector_Indexed_4Register_llongMLA_fs_32bit_SMLALL,
  SME_2_MultiVector_Indexed_4Register_llongMLA_fs_32bit_SMLSLL,
  SME_2_MultiVector_Indexed_4Register_llongMLA_fs_32bit_UMLALL,
  SME_2_MultiVector_Indexed_4Register_llongMLA_fs_32bit_UMLSLL,
  SME_2_MultiVector_Indexed_4Register_llongMLA_fs_32bit_USMLALL,
  SME_2_MultiVector_Indexed_4Register_llongMLA_fs_32bit_SUMLALL,
  SME_2_MultiVector_Indexed_4Register_Ternary_32bit_FMLA,
  SME_2_MultiVector_Indexed_4Register_Ternary_32bit_FMLS,
  SME_2_MultiVector_Indexed_4Register_Ternary_32bit_SVDOT,
  SME_2_MultiVector_Indexed_4Register_Ternary_32bit_USVDOT,
  SME_2_MultiVector_Indexed_4Register_Ternary_32bit_UVDOT,
  SME_2_MultiVector_Indexed_4Register_Ternary_32bit_SUVDOT,
  SME_2_MultiVector_Indexed_4Register_Ternary_32bit_SDOT2,
  SME_2_MultiVector_Indexed_4Register_Ternary_32bit_FDOT,
  SME_2_MultiVector_Indexed_4Register_Ternary_32bit_UDOT2,
  SME_2_MultiVector_Indexed_4Register_Ternary_32bit_BFDOT,
  SME_2_MultiVector_Indexed_4Register_Ternary_32bit_SDOT4,
  SME_2_MultiVector_Indexed_4Register_Ternary_32bit_USDOT,
  SME_2_MultiVector_Indexed_4Register_Ternary_32bit_UDOT4,
  SME_2_MultiVector_Indexed_4Register_Ternary_32bit_SUDOT,
  SME_2_MultiVector_Indexed_4Register_llongMLA_fs_64bit_SMLALL,
  SME_2_MultiVector_Indexed_4Register_llongMLA_fs_64bit_SMLSLL,
  SME_2_MultiVector_Indexed_4Register_llongMLA_fs_64bit_UMLALL,
  SME_2_MultiVector_Indexed_4Register_llongMLA_fs_64bit_UMLSLL,
  SME_2_MultiVector_Indexed_4Register_longFMA_fs_FMLAL,
  SME_2_MultiVector_Indexed_4Register_longFMA_fs_FMLSL,
  SME_2_MultiVector_Indexed_4Register_longFMA_fs_BFMLAL,
  SME_2_MultiVector_Indexed_4Register_longFMA_fs_BFMLSL,
  SME_2_MultiVector_Indexed_4Register_Ternary_64bit_FMLA,
  SME_2_MultiVector_Indexed_4Register_Ternary_64bit_SDOT,
  SME_2_MultiVector_Indexed_4Register_Ternary_64bit_FMLS,
  SME_2_MultiVector_Indexed_4Register_Ternary_64bit_UDOT,
  SME_2_MultiVector_Indexed_4Register_Ternary_64bit_SVDOT,
  SME_2_MultiVector_Indexed_4Register_Ternary_64bit_UVDOT,
  SME_2_MultiVector_Indexed_4Register_longMLA_fs_SMLAL,
  SME_2_MultiVector_Indexed_4Register_longMLA_fs_SMLSL,
  SME_2_MultiVector_Indexed_4Register_longMLA_fs_UMLAL,
  SME_2_MultiVector_Indexed_4Register_longMLA_fs_UMLSL,

  SME_2_MultiVector_SVE_Select_SEL,

  SME_2_MultiVector_SVE_Constructive_Binary_QuadwordsZIP_2Register_ZIP,
  SME_2_MultiVector_SVE_Constructive_Binary_QuadwordsZIP_2Register_UZP,
  SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_2Register_SQRSHR,
  SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_2Register_UQRSHR,
  SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_2Register_SQRSHRU,
  SME_2_MultiVector_SVE_Constructive_Binary_FCLAMP,
  SME_2_MultiVector_SVE_Constructive_Binary_CLAMP_2Register_SCLAMP,
  SME_2_MultiVector_SVE_Constructive_Binary_CLAMP_2Register_UCLAMP,
  SME_2_MultiVector_SVE_Constructive_Binary_CLAMP_4Register_SCLAMP,
  SME_2_MultiVector_SVE_Constructive_Binary_CLAMP_4Register_UCLAMP,
  SME_2_MultiVector_SVE_Constructive_Binary_ZIP_2Register_ZIP,
  SME_2_MultiVector_SVE_Constructive_Binary_ZIP_2Register_UZP,
  SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_4Register_SQRSHR,
  SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_4Register_UQRSHR,
  SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_4Register_SQRSHRU,
  SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_4Register_SQRSHRN,
  SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_4Register_UQRSHRN,
  SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_4Register_SQRSHRUN,

  SME_2_MultiVector_SVE_Constructive_Unary_FPToIntConvert_2Register_FCVTZS,
  SME_2_MultiVector_SVE_Constructive_Unary_FPToIntConvert_2Register_FCVTZU,
  SME_2_MultiVector_SVE_Constructive_Unary_IntToFP_2Register_SCVTF,
  SME_2_MultiVector_SVE_Constructive_Unary_IntToFP_2Register_UCVTF,
  SME_2_MultiVector_SVE_Constructive_Unary_FPToIntConvert_4Register_FCVTZS,
  SME_2_MultiVector_SVE_Constructive_Unary_FPToIntConvert_4Register_FCVTZU,
  SME_2_MultiVector_SVE_Constructive_Unary_IntToFP_4Register_SCVTF,
  SME_2_MultiVector_SVE_Constructive_Unary_IntToFP_4Register_UCVTF,
  SME_2_MultiVector_SVE_Constructive_Unary_QuadwordZIP_4Register_ZIP,
  SME_2_MultiVector_SVE_Constructive_Unary_QuadwordZIP_4Register_UZP,
  SME_2_MultiVector_SVE_Constructive_Unary_FPdownConvert_2Register_FCVT,
  SME_2_MultiVector_SVE_Constructive_Unary_FPdownConvert_2Register_FCVTN,
  SME_2_MultiVector_SVE_Constructive_Unary_FPdownConvert_2Register_BFCVT,
  SME_2_MultiVector_SVE_Constructive_Unary_FPdownConvert_2Register_BFCVTN,
  SME_2_MultiVector_SVE_Constructive_Unary_IntDownConvert_2Regiter_SQCVT,
  SME_2_MultiVector_SVE_Constructive_Unary_IntDownConvert_2Regiter_UQCVT,
  SME_2_MultiVector_SVE_Constructive_Unary_IntDownConvert_2Regiter_SQCVTU,
  SME_2_MultiVector_SVE_Constructive_Unary_Unpack_2Register_SUNPK,
  SME_2_MultiVector_SVE_Constructive_Unary_Unpack_2Register_UUNPK,
  SME_2_MultiVector_SVE_Constructive_Unary_FRINT_2Register_FRINTN,
  SME_2_MultiVector_SVE_Constructive_Unary_FRINT_2Register_FRINTP,
  SME_2_MultiVector_SVE_Constructive_Unary_FRINT_2Register_FRINTM,
  SME_2_MultiVector_SVE_Constructive_Unary_FRINT_2Register_FRINTA,
  SME_2_MultiVector_SVE_Constructive_Unary_IntDownConvert_4Register_SQCVT,
  SME_2_MultiVector_SVE_Constructive_Unary_IntDownConvert_4Register_UQCVT,
  SME_2_MultiVector_SVE_Constructive_Unary_IntDownConvert_4Register_SQCVTN,
  SME_2_MultiVector_SVE_Constructive_Unary_IntDownConvert_4Register_UQCVTN,
  SME_2_MultiVector_SVE_Constructive_Unary_IntDownConvert_4Register_SQCVTU,
  SME_2_MultiVector_SVE_Constructive_Unary_IntDownConvert_4Register_SQCVTUN,
  SME_2_MultiVector_SVE_Constructive_Unary_Unpack_4Register_SUNPK,
  SME_2_MultiVector_SVE_Constructive_Unary_Unpack_4Register_UUNPK,
  SME_2_MultiVector_SVE_Constructive_Unary_ZIP_4Register_ZIP,
  SME_2_MultiVector_SVE_Constructive_Unary_ZIP_4Register_UZP,
  SME_2_MultiVector_SVE_Constructive_Unary_FRINT_4Register_FRINTN,
  SME_2_MultiVector_SVE_Constructive_Unary_FRINT_4Register_FRINTP,
  SME_2_MultiVector_SVE_Constructive_Unary_FRINT_4Register_FRINTM,
  SME_2_MultiVector_SVE_Constructive_Unary_FRINT_4Register_FRINTA,

  SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_IntMinMax_SMAX,
  SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_IntMinMax_UMAX,
  SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_IntMinMax_SMIN,
  SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_IntMinMax_UMIN,
  SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_FPMinMax_FMAX,
  SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_FPMinMax_FMIN,
  SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_FPMinMax_FMAXNM,
  SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_FPMinMax_FMINNM,
  SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_Shift_SRSHL,
  SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_Shift_URSHL,
  SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_SQDMULH,

  SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_IntMinMax_SMAX,
  SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_IntMinMax_UMAX,
  SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_IntMinMax_SMIN,
  SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_IntMinMax_UMIN,
  SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_FPMinMax_FMAX,
  SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_FPMinMax_FMIN,
  SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_FPMinMax_FMAXNM,
  SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_FPMinMax_FMINNM,
  SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_Shift_SRSHL,
  SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_Shift_URSHL,
  SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_SQDMULH,

  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_IntMinMax_SMAX,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_IntMinMax_UMAX,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_IntMinMax_SMIN,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_IntMinMax_UMIN,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_FPMinMax_FMAX,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_FPMinMax_FMIN,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_FPMinMax_FMAXNM,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_FPMinMax_FMINNM,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_Shift_SRSHL,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_Shift_URSHL,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_ADD,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_SQDMULH,

  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_IntMinMax_SMAX,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_IntMinMax_UMAX,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_IntMinMax_SMIN,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_IntMinMax_UMIN,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_FPMinMax_FMAX,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_FPMinMax_FMIN,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_FPMinMax_FMAXNM,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_FPMinMax_FMINNM,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_Shift_SRSHL,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_Shift_URSHL,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_ADD,
  SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_SQDMULH,

  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_ts_FMLAL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_ts_FMLSL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_ts_BFMLAL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_ts_BFMLSL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longFMA_os_FMLAL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longFMA_os_FMLSL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longFMA_os_BFMLAL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longFMA_os_BFMLSL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_smm_DotProduct_2Register_USDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_smm_DotProduct_2Register_SUDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_fs_FMLAL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_fs_FMLSL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_fs_BFMLAL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_fs_BFMLSL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_smm_DotProduct_4Register_USDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_smm_DotProduct_4Register_SUDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_ts_SMLAL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_ts_SMLSL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_ts_UMLAL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_ts_UMLSL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longMLA_os_SMLAL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longMLA_os_SMLSL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longMLA_os_UMLAL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longMLA_os_UMLSL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_smtw_DotProduct_2Register_SDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_smtw_DotProduct_2Register_UDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_fs_SMLAL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_fs_SMLSL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_fs_UMLAL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_fs_UMLSL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_smtw_DotProduct_4Register_SDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_smtw_DotProduct_4Register_UDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_ts_SMLALL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_ts_SMLSLL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_ts_UMLALL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_ts_UMLSLL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_ts_USMLALL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_ts_SUMLALL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_llongFMA_os_SMLALL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_llongFMA_os_SMLSLL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_llongFMA_os_UMLALL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_llongFMA_os_UMLSLL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_llongFMA_os_USMLALL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_FP_DotProduct_2Register_FDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_FP_DotProduct_2Register_BFDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_smfw_DotProduct_2Register_SDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_smfw_DotProduct_2Register_UDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_FP_2Register_FMLA,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_FP_2Register_FMLS,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_Int_2Register_ADD,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_Int_2Register_SUB,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_fs_SMLALL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_fs_SMLSLL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_fs_UMLALL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_fs_UMLSLL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_fs_USMLALL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_fs_SUMLALL,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_FP_DotProduct_4Register_FDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_FP_DotProduct_4Register_BFDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_smfw_DotProduct_4Register_SDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_smfw_DotProduct_4Register_UDOT,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_FP_4Register_FMLA,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_FP_4Register_FMLS,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_Int_4Register_ADD,
  SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_Int_4Register_SUB,

  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longFMA_ts_FMLAL,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longFMA_ts_FMLSL,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longFMA_ts_BFMLAL,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longFMA_ts_BFMLSL,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_USDOT,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longMLA_ts_SMLAL,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longMLA_ts_SMLSL,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longMLA_ts_UMLAL,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longMLA_ts_UMLSL,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvtw_DotProduct_SDOT,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvtw_DotProduct_UDOT,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvb_FP_FADD,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvb_FP_FSUB,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvb_Int_ADD,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvb_Int_SUB,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_llongMLA_ts_SMLALL,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_llongMLA_ts_SMLSLL,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_llongMLA_ts_UMLALL,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_llongMLA_ts_UMLSLL,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_llongMLA_ts_USMLALL,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_FP_DotProduct_FDOT,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_FP_DotProduct_BFDOT,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvfw_DotProduct_SDOT,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvfw_DotProduct_UDOT,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_Ternary_FP_FMLA,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_Ternary_FP_FMLS,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_Ternary_Int_ADD,
  SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_Ternary_Int_SUB,

  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longFMA_fs_FMLAL,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longFMA_fs_FMLSL,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longFMA_fs_BFMLAL,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longFMA_fs_BFMLSL,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_USDOT,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longMLA_fs_SMLAL,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longMLA_fs_SMLSL,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longMLA_fs_UMLAL,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longMLA_fs_UMLSL,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvtw_DotProduct_SDOT,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvtw_DotProduct_UDOT,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvb_FP_FADD,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvb_FP_FSUB,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvb_Int_ADD,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvb_Int_SUB,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_llongMLA_fs_SMLALL,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_llongMLA_fs_SMLSLL,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_llongMLA_fs_UMLALL,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_llongMLA_fs_UMLSLL,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_llongMLA_fs_USMLALL,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_FP_DotProduct_FDOT,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_FP_DotProduct_BFDOT,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvfw_DotProduct_SDOT,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvfw_DotProduct_UDOT,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_Ternary_FP_FMLA,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_Ternary_FP_FMLS,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_Ternary_Int_ADD,
  SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_Ternary_Int_SUB,

  SME_Memory_Load_ArrayVector_LD1B,
  SME_Memory_Load_ArrayVector_LD1H,
  SME_Memory_Load_ArrayVector_LD1W,
  SME_Memory_Load_ArrayVector_LD1D,
  SME_Memory_Store_ArrayVector_ST1B,
  SME_Memory_Store_ArrayVector_ST1H,
  SME_Memory_Store_ArrayVector_ST1W,
  SME_Memory_Store_ArrayVector_ST1D,
  SME_Memory_SaveAndRestoreArray_LDR,
  SME_Memory_SaveAndRestoreArray_STR,
  SME_Memory_LookupTable_LoadOrStore_LDR,
  SME_Memory_LookupTable_LoadOrStore_STR,
  SME_Memory_LD1Q,
  SME_Memory_ST1Q,

  // SVE 83
  SVE_Int_MultiAdd_Predicated_MAccumulateWritingAddressAddend_MLA,
  SVE_Int_MultiAdd_Predicated_MAccumulateWritingAddressAddend_MLS,
  SVE_Int_MultiAdd_Predicated_MAddWritingMultiplicand_MAD,
  SVE_Int_MultiAdd_Predicated_MAddWritingMultiplicand_MSB,

  SVE_Int_Binary_Arithmetic_Predicated_Int_AddSubVectors_ADD,
  SVE_Int_Binary_Arithmetic_Predicated_Int_AddSubVectors_SUB,
  SVE_Int_Binary_Arithmetic_Predicated_Int_AddSubVectors_SUBR,
  SVE_Int_Binary_Arithmetic_Predicated_Int_MinMaxDifference_SMAX,
  SVE_Int_Binary_Arithmetic_Predicated_Int_MinMaxDifference_UMAX,
  SVE_Int_Binary_Arithmetic_Predicated_Int_MinMaxDifference_SMIN,
  SVE_Int_Binary_Arithmetic_Predicated_Int_MinMaxDifference_UMIN,
  SVE_Int_Binary_Arithmetic_Predicated_Int_MinMaxDifference_SABD,
  SVE_Int_Binary_Arithmetic_Predicated_Int_MinMaxDifference_UABD,
  SVE_Int_Binary_Arithmetic_Predicated_Int_MultiplyVectors_MUL,
  SVE_Int_Binary_Arithmetic_Predicated_Int_MultiplyVectors_SMULH,
  SVE_Int_Binary_Arithmetic_Predicated_Int_MultiplyVectors_UMULH,
  SVE_Int_Binary_Arithmetic_Predicated_Int_DivideVectors_SDIV,
  SVE_Int_Binary_Arithmetic_Predicated_Int_DivideVectors_UDIV,
  SVE_Int_Binary_Arithmetic_Predicated_Int_DivideVectors_SDIVR,
  SVE_Int_Binary_Arithmetic_Predicated_Int_DivideVectors_UDIVR,
  SVE_Int_Binary_Arithmetic_Predicated_Bin_BitwiseLogicalOperations_ORR,
  SVE_Int_Binary_Arithmetic_Predicated_Bin_BitwiseLogicalOperations_EOR,
  SVE_Int_Binary_Arithmetic_Predicated_Bin_BitwiseLogicalOperations_AND,
  SVE_Int_Binary_Arithmetic_Predicated_Bin_BitwiseLogicalOperations_BIC,

  SVE_Int_Reduction_Int_AddReduction_SADDV,
  SVE_Int_Reduction_Int_AddReduction_UADDV,
  SVE_Int_Reduction_Int_MinMaxReduction_SMAXV,
  SVE_Int_Reduction_Int_MinMaxReduction_UMAXV,
  SVE_Int_Reduction_Int_MinMaxReduction_SMINV,
  SVE_Int_Reduction_Int_MinMaxReduction_UMINV,
  SVE_Int_Reduction_ConstructivePrefix_MOVPREFX,
  SVE_Int_Reduction_BitwiseLogicalOperation_ORV,
  SVE_Int_Reduction_BitwiseLogicalOperation_EORV,
  SVE_Int_Reduction_BitwiseLogicalOperation_ANDV,

  SVE_Bitwise_Shift_Predicated_byImmediate_ASR,
  SVE_Bitwise_Shift_Predicated_byImmediate_LSR,
  SVE_Bitwise_Shift_Predicated_byImmediate_LSL,
  SVE_Bitwise_Shift_Predicated_byImmediate_ASRD,
  SVE_Bitwise_Shift_Predicated_byImmediate_SQSHL,
  SVE_Bitwise_Shift_Predicated_byImmediate_UQSHL,
  SVE_Bitwise_Shift_Predicated_byImmediate_SRSHR,
  SVE_Bitwise_Shift_Predicated_byImmediate_URSHR,
  SVE_Bitwise_Shift_Predicated_byImmediate_SQSHLU,
  SVE_Bitwise_Shift_Predicated_byVector_ASR,
  SVE_Bitwise_Shift_Predicated_byVector_LSR,
  SVE_Bitwise_Shift_Predicated_byVector_LSL,
  SVE_Bitwise_Shift_Predicated_byVector_ASRR,
  SVE_Bitwise_Shift_Predicated_byVector_LSRR,
  SVE_Bitwise_Shift_Predicated_byVector_LSLR,
  SVE_Bitwise_Shift_Predicated_byWideElement_ASR,
  SVE_Bitwise_Shift_Predicated_byWideElement_LSR,
  SVE_Bitwise_Shift_Predicated_byWideElement_LSL,

  SVE_Int_Unary_Arithmetic_Predicated_Int_SXTx_BHW,
  SVE_Int_Unary_Arithmetic_Predicated_Int_UXTx_BHW,
  SVE_Int_Unary_Arithmetic_Predicated_Int_ABS,
  SVE_Int_Unary_Arithmetic_Predicated_Int_NEG,
  SVE_Int_Unary_Arithmetic_Predicated_Bin_CLS,
  SVE_Int_Unary_Arithmetic_Predicated_Bin_CLZ,
  SVE_Int_Unary_Arithmetic_Predicated_Bin_CNT,
  SVE_Int_Unary_Arithmetic_Predicated_Bin_CNOT,
  SVE_Int_Unary_Arithmetic_Predicated_Bin_FABS,
  SVE_Int_Unary_Arithmetic_Predicated_Bin_FNEG,
  SVE_Int_Unary_Arithmetic_Predicated_Bin_NOT,

  SVE_Int_AddSubVectors_UnPredicated_ADD,
  SVE_Int_AddSubVectors_UnPredicated_SUB,
  SVE_Int_AddSubVectors_UnPredicated_SQADD,
  SVE_Int_AddSubVectors_UnPredicated_UQADD,
  SVE_Int_AddSubVectors_UnPredicated_SQSUB,
  SVE_Int_AddSubVectors_UnPredicated_UQSUB,

  SVE_Bistwise_Logical_UnPredicated_Operations_AND,
  SVE_Bistwise_Logical_UnPredicated_Operations_ORR,
  SVE_Bistwise_Logical_UnPredicated_Operations_EOR,
  SVE_Bistwise_Logical_UnPredicated_Operations_BIC,
  SVE_Bistwise_Logical_UnPredicated_XAR,
  SVE_Bistwise_Logical_UnPredicated_TernaryOperations_EOR3,
  SVE_Bistwise_Logical_UnPredicated_TernaryOperations_BSL,
  SVE_Bistwise_Logical_UnPredicated_TernaryOperations_BCAX,
  SVE_Bistwise_Logical_UnPredicated_TernaryOperations_BSL1N,
  SVE_Bistwise_Logical_UnPredicated_TernaryOperations_BSL2N,
  SVE_Bistwise_Logical_UnPredicated_TernaryOperations_NBSL,

  SVE_IndexGeneration_Immediates_INDEX,
  SVE_IndexGeneration_ScalarAndImmediate_INDEX,
  SVE_IndexGeneration_ImmediateAndScalar_INDEX,
  SVE_IndexGeneration_Scalars_INDEX,

  SVE_StackAllocation_FrameAdjustment_ADDVL,
  SVE_StackAllocation_FrameAdjustment_ADDPL,
  SVE_StackAllocation_StreamingFrameAdjustment_ADDSVL,
  SVE_StackAllocation_StreamingFrameAdjustment_ADDSPL,
  SVE_StackAllocation_FrameSize_RDVL,
  SVE_StackAllocation_StreamingFrameSize_RDSVL,

  SVE_2_Int_Multiply_UnPredicated_Vectors_MUL,
  SVE_2_Int_Multiply_UnPredicated_Vectors_SMULH,
  SVE_2_Int_Multiply_UnPredicated_Vectors_UMULH,
  SVE_2_Int_Multiply_UnPredicated_Vectors_PMUL,
  SVE_2_Int_Multiply_UnPredicated_SignedSateratingDoublingHigh_SQDMULH,
  SVE_2_Int_Multiply_UnPredicated_SignedSateratingDoublingHigh_SQRDMULH,

  SVE_Bitwise_Shift_UnPredicated_WideElement_ASR,
  SVE_Bitwise_Shift_UnPredicated_WideElement_LSR,
  SVE_Bitwise_Shift_UnPredicated_WideElement_LSL,
  SVE_Bitwise_Shift_UnPredicated_Immediate_ASR,
  SVE_Bitwise_Shift_UnPredicated_Immediate_LSR,
  SVE_Bitwise_Shift_UnPredicated_Immediate_LSL,

  SVE_AddressGenration_ADR,

  SVE_Int_Misc_UnPredicated_FloatingPointTrigSelectCoefficient_FTSSEL,
  SVE_Int_Misc_UnPredicated_FloatingPointExponentialAccelerator_FEXPA,
  SVE_Int_Misc_UnPredicated_ConstructivePrefix_MOVPRFX,

  SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_SQINCH,
  SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_UQINCH,
  SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_SQDECH,
  SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_UQDECH,
  SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_SQINCW,
  SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_UQINCW,
  SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_SQDECW,
  SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_UQDECW,
  SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_SQINCD,
  SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_UQINCD,
  SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_SQDECD,
  SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_UQDECD,
  SVE_ElementCount_ElementCount_CNTx_BHWD,
  SVE_ElementCount_IncDec_Vector_byElementCount_INCx_HWD,
  SVE_ElementCount_IncDec_Vector_byElementCount_DECx_HWD,
  SVE_ElementCount_IncDev_Register_byElementCount_INCx_BHWD,
  SVE_ElementCount_IncDev_Register_byElementCount_DECx_BHWD,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQINCB,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQINCB,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQDECB,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQDECB,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQINCH,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQINCH,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQDECH,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQDECH,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQINCW,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQINCW,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQDECW,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQDECW,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQINCD,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQINCD,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQDECD,
  SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQDECD,

  SVE_Bitwise_Immediate_DUPM,
  SVE_Bitwise_Immediate_Logical_ORR,
  SVE_Bitwise_Immediate_Logical_EOR,
  SVE_Bitwise_Immediate_Logical_AND,

  SVE_Int_Wide_Immediate_Predicated_CopyInteger_Zeroing_CPY,
  SVE_Int_Wide_Immediate_Predicated_CopyInteger_Merging_CPY,
  SVE_Int_Wide_Immediate_Predicated_FCPY,

  SVE_DUP_Indexed_DUP,

  SVE_TableLookup_3s_TBL,
  SVE_TableLookup_3s_TBX,

  SVE_TBL,

  SVE_PermuteVector_UnPredicate_Scalar_DUP,
  SVE_PermuteVector_UnPredicate_Scalar_INSR,
  SVE_PermuteVector_UnPredicate_UnpackVectorElements_SUNPKHI,
  SVE_PermuteVector_UnPredicate_UnpackVectorElements_UUNPKHI,
  SVE_PermuteVector_UnPredicate_SIMD_FP_Scalar_INSR,
  SVE_PermuteVector_UnPredicate_Vector_REV,

  SVE_Permute_Predicate_UnpackElement_PUNPKxx_HI_LO,
  SVE_Permute_Predicate_PremuteElement_ZIPx_12,
  SVE_Permute_Predicate_PremuteElement_UZPx_12,
  SVE_Permute_Predicate_PremuteElement_TRNx_12,
  SVE_Permute_Predicate_REV,

  SVE_PermuteVectorElements_ZIPx_12,
  SVE_PermuteVectorElements_UZPx_12,
  SVE_PermuteVectorElements_TRNx_12,

  SVE_PermuteVector_Predicate_SIMD_FP_Scalar_CPY,
  SVE_PermuteVector_Predicate_COMPACT,
  SVE_PermuteVector_Predicate_ExtractElementToGeneralRegister_LASTA,
  SVE_PermuteVector_Predicate_ExtractElementToGeneralRegister_LASTB,
  SVE_PermuteVector_Predicate_ExtractElementToSIMDandFPscalarRegister_LASTA,
  SVE_PermuteVector_Predicate_ExtractElementToSIMDandFPscalarRegister_LASTB,
  SVE_PermuteVector_Predicate_ReverseWithinElements_REVx_BHW,
  SVE_PermuteVector_Predicate_ReverseWithinElements_RBIT,
  SVE_PermuteVector_Predicate_Scalar_CPY,
  SVE_PermuteVector_Predicate_ConditionallyBroadCastElementToVector_CLASTA,
  SVE_PermuteVector_Predicate_ConditionallyBroadCastElementToVector_CLASTB,
  SVE_PermuteVector_Predicate_ConditionallyExtractElementToSIMDandFPscalar_CLASTA,
  SVE_PermuteVector_Predicate_ConditionallyExtractElementToSIMDandFPscalar_CLASTB,
  SVE_PermuteVector_Predicate_SPLICE,
  SVE_PermuteVector_Predicate_ReverseDoubleWord_REVD,
  SVE_PermuteVector_Predicate_ConditionallyExtractElementToGeneralRegister_CLASTA,
  SVE_PermuteVector_Predicate_ConditionallyExtractElementToGeneralRegister_CLASTB,

  SVE_Vector_SEL,

  SVE_PermuteVector_Extract_EXT,

  SVE_PermuteVector_Segments_Vector_ZIPx_12,
  SVE_PermuteVector_Segments_Vector_UZPx_12,
  SVE_PermuteVector_Segments_Vector_TRNx_12,

  SVE_Int_Compare_Vectors_CMPcc,
  SVE_Int_Compare_Vectors_WithWideElement_CMPcc,

  SVE_Int_Compare_UnsignedImmediate_Immediate_CMPcc,

  SVE_Int_Compare_SignedImmediate_Immediate_CMPcc,

  SVE_Predicate_LogicalOperation_AND,
  SVE_Predicate_LogicalOperation_BIC,
  SVE_Predicate_LogicalOperation_EOR,
  SVE_Predicate_LogicalOperation_SEL,
  SVE_Predicate_LogicalOperation_ANDS,
  SVE_Predicate_LogicalOperation_BICS,
  SVE_Predicate_LogicalOperation_EORS,
  SVE_Predicate_LogicalOperation_ORR,
  SVE_Predicate_LogicalOperation_ORN,
  SVE_Predicate_LogicalOperation_NOR,
  SVE_Predicate_LogicalOperation_NAND,
  SVE_Predicate_LogicalOperation_ORRS,
  SVE_Predicate_LogicalOperation_ORNS,
  SVE_Predicate_LogicalOperation_NORS,
  SVE_Predicate_LogicalOperation_NANDS,

  SVE_PropagateBreak_FromPreviousPartition_BRKPA,
  SVE_PropagateBreak_FromPreviousPartition_BRKPB,
  SVE_PropagateBreak_FromPreviousPartition_BRKPAS,
  SVE_PropagateBreak_FromPreviousPartition_BRKPBS,

  SVE_PartitionBreak_PropagateBreakToNextPartition_BRKN,
  SVE_PartitionBreak_PropagateBreakToNextPartition_BRKNS,
  SVE_PartitionBreak_Condition_BRKA,
  SVE_PartitionBreak_Condition_BRKAS,
  SVE_PartitionBreak_Condition_BRKB,
  SVE_PartitionBreak_Condition_BRKBS,

  SVE_PredicateMisc_PredicateTest_PTEST,
  SVE_PredicateMisc_PredicateFirstActive_PFIRST,
  SVE_PredicateMisc_PredicateZero_PFALSE,
  SVE_PredicateMisc_PredicateReadFromFFR_Predicate_RDFFR,
  SVE_PredicateMisc_PredicateReadFromFFR_Predicate_RDFFRS,
  SVE_PredicateMisc_PNEXT,
  SVE_PredicateMisc_PredicateReadFromFFR_UnPredicate_RDFFR,
  SVE_PredicateMisc_PredicateInitialize_PTRUE,
  SVE_PredicateMisc_PredicateInitialize_PTRUES,

  SVE_Int_Compare_Scalars_CountAndLimit_WHILEGE,
  SVE_Int_Compare_Scalars_CountAndLimit_WHILEGT,
  SVE_Int_Compare_Scalars_CountAndLimit_WHILELT,
  SVE_Int_Compare_Scalars_CountAndLimit_WHILELE,
  SVE_Int_Compare_Scalars_CountAndLimit_WHILEHS,
  SVE_Int_Compare_Scalars_CountAndLimit_WHILEHI,
  SVE_Int_Compare_Scalars_CountAndLimit_WHILELO,
  SVE_Int_Compare_Scalars_CountAndLimit_WHILELS,
  SVE_Int_Compare_Scalars_ConditionallyTerminateScalar_CTERMEQlCTERMNE,
  SVE_Int_Compare_Scalars_PointerConflictCompare_WHILEWR,
  SVE_Int_Compare_Scalars_PointerConflictCompare_WHILERW,

  SVE_BroadcastPredicatedElement_PSEL,

  SVE_ScalarInt_Compare_PredicateAsCounter_ExtractMaskPredicateFromPredicateAsCounter_PEXT,
  SVE_ScalarInt_Compare_PredicateAsCounter_ExtractMaskPredicateFromPredicateAsCounter_Pair_PEXT,
  SVE_ScalarInt_Compare_PredicateAsCounter_PTRUE,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILEGE,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILEGT,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILELT,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILELE,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILEHS,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILEHI,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILELO,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILELS,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILEGE,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILEGT,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILELT,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILELE,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILEHS,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILEHI,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILELO,
  SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILELS,

  SVE_Int_Wide_Immediate_UnPredicated_AddSub_ADD,
  SVE_Int_Wide_Immediate_UnPredicated_AddSub_SUB,
  SVE_Int_Wide_Immediate_UnPredicated_AddSub_SUBR,
  SVE_Int_Wide_Immediate_UnPredicated_AddSub_SQADD,
  SVE_Int_Wide_Immediate_UnPredicated_AddSub_UQADD,
  SVE_Int_Wide_Immediate_UnPredicated_AddSub_SQSUB,
  SVE_Int_Wide_Immediate_UnPredicated_AddSub_UQSUB,
  SVE_Int_Wide_Immediate_UnPredicated_MinMax_SMAX,
  SVE_Int_Wide_Immediate_UnPredicated_MinMax_UMAX,
  SVE_Int_Wide_Immediate_UnPredicated_MinMax_SMIN,
  SVE_Int_Wide_Immediate_UnPredicated_MinMax_UMIN,
  SVE_Int_Wide_Immediate_UnPredicated_Multiply_Immediate_MUL,
  SVE_Int_Wide_Immediate_UnPredicated_Broadcast_Int_Immediate_DUP,
  SVE_Int_Wide_Immediate_UnPredicated_Broadcast_Float_FDUP,

  SVE_Predicated_Count_PredicateAsCounter_CNTP,
  SVE_Predicated_Count_CNTP,

  SVE_IncOrDecByPredicateCount_Saturating_Vector_SQINCP,
  SVE_IncOrDecByPredicateCount_Saturating_Vector_UQINCP,
  SVE_IncOrDecByPredicateCount_Saturating_Vector_SQDECP,
  SVE_IncOrDecByPredicateCount_Saturating_Vector_UQDECP,
  SVE_IncOrDecByPredicateCount_Saturating_Register_SQINCP,
  SVE_IncOrDecByPredicateCount_Saturating_Register_UQINCP,
  SVE_IncOrDecByPredicateCount_Saturating_Register_SQDECP,
  SVE_IncOrDecByPredicateCount_Saturating_Register_UQDECP,
  SVE_IncOrDecByPredicateCount_Vector_INCP,
  SVE_IncOrDecByPredicateCount_Vector_DECP,
  SVE_IncOrDecByPredicateCount_Register_INCP,
  SVE_IncOrDecByPredicateCount_Register_DECP,

  SVE_WriteFFR_FromPredicate_WRFFR,
  SVE_WriteFFR_Initialise_SETFFR,

  SVE_Int_MultiAdd_UnPredicated_DotProduct_SDOT,
  SVE_Int_MultiAdd_UnPredicated_DotProduct_UDOT,
  SVE_Int_MultiAdd_UnPredicated_2_Saturating_MultiAdd_Interleaved_long_SQDMLALBT,
  SVE_Int_MultiAdd_UnPredicated_2_Saturating_MultiAdd_Interleaved_long_SQDMLSLBT,
  SVE_Int_MultiAdd_UnPredicated_Vector_CDOT,
  SVE_Int_MultiAdd_UnPredicated_ComplexInt_MultiAdd_CMLA,
  SVE_Int_MultiAdd_UnPredicated_ComplexInt_MultiAdd_SQRDCMLAH,
  SVE_Int_MultiAdd_UnPredicated_Int_MultiAdd_long_SMLALB,
  SVE_Int_MultiAdd_UnPredicated_Int_MultiAdd_long_SMLALT,
  SVE_Int_MultiAdd_UnPredicated_Int_MultiAdd_long_UMLALB,
  SVE_Int_MultiAdd_UnPredicated_Int_MultiAdd_long_UMLALT,
  SVE_Int_MultiAdd_UnPredicated_Int_MultiAdd_long_SMLSLB,
  SVE_Int_MultiAdd_UnPredicated_Int_MultiAdd_long_SMLSLT,
  SVE_Int_MultiAdd_UnPredicated_Int_MultiAdd_long_UMLSLB,
  SVE_Int_MultiAdd_UnPredicated_Int_MultiAdd_long_UMLSLT,
  SVE_Int_MultiAdd_UnPredicated_Saturating_MultiAdd_long_SQDMLALB,
  SVE_Int_MultiAdd_UnPredicated_Saturating_MultiAdd_long_SQDMLALT,
  SVE_Int_MultiAdd_UnPredicated_Saturating_MultiAdd_long_SQDMLSLB,
  SVE_Int_MultiAdd_UnPredicated_Saturating_MultiAdd_long_SQDMLSLT,
  SVE_Int_MultiAdd_UnPredicated_Saturating_MultiAdd_high_SQRDMLAH,
  SVE_Int_MultiAdd_UnPredicated_Saturating_MultiAdd_high_SQRDMLSH,
  SVE_Int_MultiAdd_UnPredicated_MixedSign_DotProduct_USDOT,

  SVE_2_Int_Predicated_PairwiseAddAndAccumulateLong_SADALP,
  SVE_2_Int_Predicated_PairwiseAddAndAccumulateLong_UADALP,
  SVE_2_Int_Predicated_UnaryOperations_URECPE,
  SVE_2_Int_Predicated_UnaryOperations_URSQRTE,
  SVE_2_Int_Predicated_UnaryOperations_SQABS,
  SVE_2_Int_Predicated_UnaryOperations_SQNEG,
  SVE_2_Int_Predicated_SaturatingOrRounding_Bitwise_ShiftLeft_SRSHL,
  SVE_2_Int_Predicated_SaturatingOrRounding_Bitwise_ShiftLeft_URSHL,
  SVE_2_Int_Predicated_SaturatingOrRounding_Bitwise_ShiftLeft_SRSHLR,
  SVE_2_Int_Predicated_SaturatingOrRounding_Bitwise_ShiftLeft_URSHLR,
  SVE_2_Int_Predicated_SaturatingOrRounding_Bitwise_ShiftLeft_Vectors_SQSHL,
  SVE_2_Int_Predicated_SaturatingOrRounding_Bitwise_ShiftLeft_Vectors_UQSHL,
  SVE_2_Int_Predicated_SaturatingOrRounding_Bitwise_ShiftLeft_SQRSHL,
  SVE_2_Int_Predicated_SaturatingOrRounding_Bitwise_ShiftLeft_UQRSHL,
  SVE_2_Int_Predicated_SaturatingOrRounding_Bitwise_ShiftLeft_SQSHLR,
  SVE_2_Int_Predicated_SaturatingOrRounding_Bitwise_ShiftLeft_UQSHLR,
  SVE_2_Int_Predicated_SaturatingOrRounding_Bitwise_ShiftLeft_SQRSHLR,
  SVE_2_Int_Predicated_SaturatingOrRounding_Bitwise_ShiftLeft_UQRSHLR,
  SVE_2_Int_Predicated_Halving_AddSub_SHADD,
  SVE_2_Int_Predicated_Halving_AddSub_UHADD,
  SVE_2_Int_Predicated_Halving_AddSub_SHSUB,
  SVE_2_Int_Predicated_Halving_AddSub_UHSUB,
  SVE_2_Int_Predicated_Halving_AddSub_SRHADD,
  SVE_2_Int_Predicated_Halving_AddSub_URHADD,
  SVE_2_Int_Predicated_Halving_AddSub_SHSUBR,
  SVE_2_Int_Predicated_Halving_AddSub_UHSUBR,
  SVE_2_Int_Predicated_PairwiseArithmetic_ADDP,
  SVE_2_Int_Predicated_PairwiseArithmetic_SMAXP,
  SVE_2_Int_Predicated_PairwiseArithmetic_UMAXP,
  SVE_2_Int_Predicated_PairwiseArithmetic_SMINP,
  SVE_2_Int_Predicated_PairwiseArithmetic_UMINP,
  SVE_2_Int_Predicated_Saturating_AddSub_SQADD,
  SVE_2_Int_Predicated_Saturating_AddSub_UQADD,
  SVE_2_Int_Predicated_Saturating_AddSub_SQSUB,
  SVE_2_Int_Predicated_Saturating_AddSub_UQSUB,
  SVE_2_Int_Predicated_Saturating_AddSub_SUQADD,
  SVE_2_Int_Predicated_Saturating_AddSub_USQADD,
  SVE_2_Int_Predicated_Saturating_AddSub_SQSUBR,
  SVE_2_Int_Predicated_Saturating_AddSub_UQSUBR,

  SVE_Int_Clamp_SCLAMP,
  SVE_Int_Clamp_UCLAMP,

  SVE_Multiply_Indexed_Int_DotProduct_4w_SDOT,
  SVE_Multiply_Indexed_Int_DotProduct_4w_UDOT,
  SVE_Multiply_Indexed_2_Int_MultiAdd_MLA,
  SVE_Multiply_Indexed_2_Int_MultiAdd_MLS,
  SVE_Multiply_Indexed_2_Saturating_MultiAdd_high_SQRDMLAH,
  SVE_Multiply_Indexed_2_Saturating_MultiAdd_high_SQRDMLSH,
  SVE_Multiply_Indexed_MixedSign_DotProduct_USDOT,
  SVE_Multiply_Indexed_MixedSign_DotProduct_SUDOT,
  SVE_Multiply_Indexed_2_Saturating_MultiAdd_SQDMLALB,
  SVE_Multiply_Indexed_2_Saturating_MultiAdd_SQDMLALT,
  SVE_Multiply_Indexed_2_Saturating_MultiAdd_SQDMLSLB,
  SVE_Multiply_Indexed_2_Saturating_MultiAdd_SQDMLSLB,
  SVE_Multiply_Indexed_2_ComplexInt_DotProduct_CDOT,
  SVE_Multiply_Indexed_2_ComplexInt_MultiAdd_CMLA,
  SVE_Multiply_Indexed_2_Complex_Saturating_MultiAdd_SQRDCMLAH,
  SVE_Multiply_Indexed_2_Int_MultiAdd_long_SMLALB,
  SVE_Multiply_Indexed_2_Int_MultiAdd_long_SMLALT,
  SVE_Multiply_Indexed_2_Int_MultiAdd_long_UMLALB,
  SVE_Multiply_Indexed_2_Int_MultiAdd_long_UMLALT,
  SVE_Multiply_Indexed_2_Int_MultiAdd_long_SMLSLB,
  SVE_Multiply_Indexed_2_Int_MultiAdd_long_SMLSLT,
  SVE_Multiply_Indexed_2_Int_MultiAdd_long_UMLSLB,
  SVE_Multiply_Indexed_2_Int_MultiAdd_long_UMLSLT,
  SVE_Multiply_Indexed_2_Saturating_Multiply_SQDMULLB,
  SVE_Multiply_Indexed_2_Saturating_Multiply_SQDMULLT,
  SVE_Multiply_Indexed_2_Saturating_Multiply_high,
  SVE_Multiply_Indexed_2_Int_Multiply_MUL,

  SVE_tw_DotProduct_SDOT,
  SVE_tw_DotProduct_UDOT,

  SVE_tw_DotProduct_Indexed_SDOT,
  SVE_tw_DotProduct_Indexed_UDOT,

  SVE_2_Widening_Int_Arithmetic_AddSub_long_SADDLB,
  SVE_2_Widening_Int_Arithmetic_AddSub_long_SADDLT,
  SVE_2_Widening_Int_Arithmetic_AddSub_long_UADDLB,
  SVE_2_Widening_Int_Arithmetic_AddSub_long_UADDLT,
  SVE_2_Widening_Int_Arithmetic_AddSub_long_SSUBLB,
  SVE_2_Widening_Int_Arithmetic_AddSub_long_SSUBLT,
  SVE_2_Widening_Int_Arithmetic_AddSub_long_USUBLB,
  SVE_2_Widening_Int_Arithmetic_AddSub_long_USUBLT,
  SVE_2_Widening_Int_Arithmetic_AddSub_long_SABDLB,
  SVE_2_Widening_Int_Arithmetic_AddSub_long_SABDLT,
  SVE_2_Widening_Int_Arithmetic_AddSub_long_UABDLB,
  SVE_2_Widening_Int_Arithmetic_AddSub_long_UABDLT,
  SVE_2_Widening_Int_Arithmetic_AddSub_wide_SADDWB,
  SVE_2_Widening_Int_Arithmetic_AddSub_wide_SADDWT,
  SVE_2_Widening_Int_Arithmetic_AddSub_wide_UADDWB,
  SVE_2_Widening_Int_Arithmetic_AddSub_wide_UADDWT,
  SVE_2_Widening_Int_Arithmetic_AddSub_wide_SSUBWB,
  SVE_2_Widening_Int_Arithmetic_AddSub_wide_SSUBWT,
  SVE_2_Widening_Int_Arithmetic_AddSub_wide_USUBTB,
  SVE_2_Widening_Int_Arithmetic_AddSub_wide_USUBWT,
  SVE_2_Widening_Int_Arithmetic_Multiply_long_SQDMULLB,
  SVE_2_Widening_Int_Arithmetic_Multiply_long_SQDMULLT,
  SVE_2_Widening_Int_Arithmetic_Multiply_long_SMULLB,
  SVE_2_Widening_Int_Arithmetic_Multiply_long_SMULLT,
  SVE_2_Widening_Int_Arithmetic_Multiply_long_UMULLB,
  SVE_2_Widening_Int_Arithmetic_Multiply_long_UMULLT,
  SVE_2_Widening_Int_Arithmetic_Multiply_long_PMULLB,
  SVE_2_Widening_Int_Arithmetic_Multiply_long_PMULLT,

  SVE_Misc_BitwiseShiftLeft_long_SSHLLB,
  SVE_Misc_BitwiseShiftLeft_long_SSHLLT,
  SVE_Misc_BitwiseShiftLeft_long_USHLLB,
  SVE_Misc_BitwiseShiftLeft_long_USHLLT,
  SVE_Misc_Int_AddSub_Interleaved_long_SADDLBT,
  SVE_Misc_Int_AddSub_Interleaved_long_SSUBLBT,
  SVE_Misc_Int_AddSub_Interleaved_long_SSUBLTB,
  SVE_Misc_BitwiseExclusiveOrInterleaved_EORBT,
  SVE_Misc_BitwiseExclusiveOrInterleaved_EORTB,
  SVE_Misc_Int_MatrixMultiplyAccumulate_SMMLA,
  SVE_Misc_Int_MatrixMultiplyAccumulate_USMMLA,
  SVE_Misc_Int_MatrixMultiplyAccumulate_UMMLA,
  SVE_Misc_BitwisePermute_BEXT,
  SVE_Misc_BitwisePermute_BDEP,
  SVE_Misc_BitwisePermute_BGRP,

  SVE_2_Accumulate_ComplexInt_Add_CADD,
  SVE_2_Accumulate_ComplexInt_Add_SQCADD,
  SVE_2_Accumulate_Int_AbsDiffrenceAndAccumulate_long_SABALB,
  SVE_2_Accumulate_Int_AbsDiffrenceAndAccumulate_long_SABALT,
  SVE_2_Accumulate_Int_AbsDiffrenceAndAccumulate_long_UABALB,
  SVE_2_Accumulate_Int_AbsDiffrenceAndAccumulate_long_UABALT,
  SVE_2_Accumulate_Int_AddSub_long_withCarry_ADCLB,
  SVE_2_Accumulate_Int_AddSub_long_withCarry_ADCLT,
  SVE_2_Accumulate_Int_AddSub_long_withCarry_SBCLB,
  SVE_2_Accumulate_Int_AddSub_long_withCarry_SBCLT,
  SVE_2_Accumulate_BitwiseShiftRightAndAccumulate_SSRA,
  SVE_2_Accumulate_BitwiseShiftRightAndAccumulate_USRA,
  SVE_2_Accumulate_BitwiseShiftRightAndAccumulate_SRSRA,
  SVE_2_Accumulate_BitwiseShiftRightAndAccumulate_URSRA,
  SVE_2_Accumulate_BitwiseShiftAndInsert_SRI,
  SVE_2_Accumulate_BitwiseShiftAndInsert_SLI,
  SVE_2_Accumulate_AbsDifferenceAndAccumulate_SABA,
  SVE_2_Accumulate_AbsDifferenceAndAccumulate_UABA,

  SVE_2_Narrowing_SaturatingExtract_SQXTNB,
  SVE_2_Narrowing_SaturatingExtract_SQXTNT,
  SVE_2_Narrowing_SaturatingExtract_UQXTNB,
  SVE_2_Narrowing_SaturatingExtract_UQXTNT,
  SVE_2_Narrowing_SaturatingExtract_SQXTUNB,
  SVE_2_Narrowing_SaturatingExtract_SQXTUNT,
  SVE_2_Narrowing_MultiVec_Extract_SQCVTN,
  SVE_2_Narrowing_MultiVec_Extract_UQCVTN,
  SVE_2_Narrowing_MultiVec_Extract_SQCVTUN,
  SVE_2_Narrowing_BitwiseShiftRight_SQSHRUNB,
  SVE_2_Narrowing_BitwiseShiftRight_SQSHRUNT,
  SVE_2_Narrowing_BitwiseShiftRight_SQRSHRUNB,
  SVE_2_Narrowing_BitwiseShiftRight_SQRSHRUNT,
  SVE_2_Narrowing_BitwiseShiftRight_SHRNB,
  SVE_2_Narrowing_BitwiseShiftRight_SHRNT,
  SVE_2_Narrowing_BitwiseShiftRight_RSHRNB,
  SVE_2_Narrowing_BitwiseShiftRight_RSHRNT,
  SVE_2_Narrowing_BitwiseShiftRight_SQSHRNB,
  SVE_2_Narrowing_BitwiseShiftRight_SQSHRNT,
  SVE_2_Narrowing_BitwiseShiftRight_SQRSHRNB,
  SVE_2_Narrowing_BitwiseShiftRight_SQRSHRNT,
  SVE_2_Narrowing_BitwiseShiftRight_UQSHRNB,
  SVE_2_Narrowing_BitwiseShiftRight_UQSHRNT,
  SVE_2_Narrowing_BitwiseShiftRight_UQRSHRNB,
  SVE_2_Narrowing_BitwiseShiftRight_UQRSHRNT,
  SVE_2_Narrowing_MultiVec_Shift_SQRSHRUN,
  SVE_2_Narrowing_MultiVec_Shift_SQRSHRN,
  SVE_2_Narrowing_MultiVec_Shift_UQRSHRN,
  SVE_2_Narrowing_Int_AddSub_HighPart_ADDHNB,
  SVE_2_Narrowing_Int_AddSub_HighPart_ADDHNT,
  SVE_2_Narrowing_Int_AddSub_HighPart_RADDHNB,
  SVE_2_Narrowing_Int_AddSub_HighPart_RADDHNT,
  SVE_2_Narrowing_Int_AddSub_HighPart_SUBHNB,
  SVE_2_Narrowing_Int_AddSub_HighPart_SUBHNT,
  SVE_2_Narrowing_Int_AddSub_HighPart_RSUBHNB,
  SVE_2_Narrowing_Int_AddSub_HighPart_RSUBHNT,

  SVE_2_Charactor_Match_MATCH,
  SVE_2_Charactor_Match_NMATCH,

  SVE_2_HistogramComputation_Segment_HISTSEG,

  SVE_HISTCNT,

  SVE_2_Crypto_Extensions_UnaryOperations_AESMC,
  SVE_2_Crypto_Extensions_UnaryOperations_AESIMC,
  SVE_2_Crypto_Extensions_DestuctiveBinaryOperations_AESE,
  SVE_2_Crypto_Extensions_DestuctiveBinaryOperations_AESD,
  SVE_2_Crypto_Extensions_DestuctiveBinaryOperations_SM4E,
  SVE_2_Crypto_Extensions_ConstructiveBinaryOperations_SM4EKEY,
  SVE_2_Crypto_Extensions_ConstructiveBinaryOperations_RAX1,

  SVE_Vectors_FCMLA,

  SVE_FCADD,

  SVE_FloatingPoint_ConvertPrecisionOddElement_FCVTXNT,
  SVE_FloatingPoint_ConvertPrecisionOddElement_FCVTNT,
  SVE_FloatingPoint_ConvertPrecisionOddElement_FCVTLT,
  SVE_FloatingPoint_ConvertPrecisionOddElement_BFCVTNT,

  SVE_FloatingPoint_PairwiseOperations_FADDP,
  SVE_FloatingPoint_PairwiseOperations_FMAXNMP,
  SVE_FloatingPoint_PairwiseOperations_FMINNMP,
  SVE_FloatingPoint_PairwiseOperations_FMAXP,
  SVE_FloatingPoint_PairwiseOperations_FMINP,

  SVE_FloatingPoint_MultiAdd_Indexed_FMLA,
  SVE_FloatingPoint_MultiAdd_Indexed_FMLS,

  SVE_FloatingPoint_Complex_MultiAdd_Indexed_FCMLA,

  SVE_FloatingPoint_Multiply_Indexed_FMUL,

  SVE_FCLAMP,

  SVE_FloatPoint_Widening_MultiAdd_Indexed_BFloat16_DotProduct_FDOT,
  SVE_FloatPoint_Widening_MultiAdd_Indexed_BFloat16_DotProduct_BFDOT,
  SVE_FloatPoint_Widening_MultiAdd_Indexed_Float_MultiAdd_long_FMLALB,
  SVE_FloatPoint_Widening_MultiAdd_Indexed_Float_MultiAdd_long_FMLALT,
  SVE_FloatPoint_Widening_MultiAdd_Indexed_Float_MultiAdd_long_FMLSLB,
  SVE_FloatPoint_Widening_MultiAdd_Indexed_Float_MultiAdd_long_FMLSLT,
  SVE_FloatPoint_Widening_MultiAdd_Indexed_Float_MultiAdd_long_BFMLALB,
  SVE_FloatPoint_Widening_MultiAdd_Indexed_Float_MultiAdd_long_BFMLALT,
  SVE_FloatPoint_Widening_MultiAdd_Indexed_Float_MultiAdd_long_BFMLSLB,
  SVE_FloatPoint_Widening_MultiAdd_Indexed_Float_MultiAdd_long_BFMLSLT,

  SVE_FloatPoint_Widening_MultiAdd_BFloat16_DotProduct_FDOT,
  SVE_FloatPoint_Widening_MultiAdd_BFloat16_DotProduct_BFDOT,
  SVE_FloatPoint_Widening_MultiAdd_Float_MultiAdd_long_FMLALB,
  SVE_FloatPoint_Widening_MultiAdd_Float_MultiAdd_long_FMLALT,
  SVE_FloatPoint_Widening_MultiAdd_Float_MultiAdd_long_FMLSLB,
  SVE_FloatPoint_Widening_MultiAdd_Float_MultiAdd_long_FMLSLT,
  SVE_FloatPoint_Widening_MultiAdd_Float_MultiAdd_long_BFMLALB,
  SVE_FloatPoint_Widening_MultiAdd_Float_MultiAdd_long_BFMLALT,
  SVE_FloatPoint_Widening_MultiAdd_Float_MultiAdd_long_BFMLSLB,
  SVE_FloatPoint_Widening_MultiAdd_Float_MultiAdd_long_BFMLSLT,

  SVE_FloatPoint_MatrixMultiplyAccumulate_BFMMLA,
  SVE_FloatPoint_MatrixMultiplyAccumulate_FMMLA,

  SVE_FloatPoint_Compare_Vectors_FCMcc,
  SVE_FloatPoint_Compare_Vectors_FACcc,

  SVE_FloatPoint_Arithmetic_UnPredicate_FADD,
  SVE_FloatPoint_Arithmetic_UnPredicate_FSUB,
  SVE_FloatPoint_Arithmetic_UnPredicate_FMUL,
  SVE_FloatPoint_Arithmetic_UnPredicate_FTSMUL,
  SVE_FloatPoint_Arithmetic_UnPredicate_FRECPS,
  SVE_FloatPoint_Arithmetic_UnPredicate_FRSQRTS,

  SVE_FloatPoint_Arithmetic_Predicate_n_FADD,
  SVE_FloatPoint_Arithmetic_Predicate_n_FSUB,
  SVE_FloatPoint_Arithmetic_Predicate_n_FMUL,
  SVE_FloatPoint_Arithmetic_Predicate_n_FSUBR,
  SVE_FloatPoint_Arithmetic_Predicate_n_FMAXNM,
  SVE_FloatPoint_Arithmetic_Predicate_n_FMINNM,
  SVE_FloatPoint_Arithmetic_Predicate_n_FMAX,
  SVE_FloatPoint_Arithmetic_Predicate_n_FMIN,
  SVE_FloatPoint_Arithmetic_Predicate_n_FABD,
  SVE_FloatPoint_Arithmetic_Predicate_n_FSCALE,
  SVE_FloatPoint_Arithmetic_Predicate_n_FMULX,
  SVE_FloatPoint_Arithmetic_Predicate_n_FDIVR,
  SVE_FloatPoint_Arithmetic_Predicate_n_FDIV,
  SVE_FloatPoint_Arithmetic_Predicate_FTMAD,
  SVE_FloatPoint_Arithmetic_Predicate_withImmediate_FADD,
  SVE_FloatPoint_Arithmetic_Predicate_withImmediate_FSUB,
  SVE_FloatPoint_Arithmetic_Predicate_withImmediate_FMUL,
  SVE_FloatPoint_Arithmetic_Predicate_withImmediate_FSUBR,
  SVE_FloatPoint_Arithmetic_Predicate_withImmediate_FMAXNM,
  SVE_FloatPoint_Arithmetic_Predicate_withImmediate_FMINNM,
  SVE_FloatPoint_Arithmetic_Predicate_withImmediate_FMAX,
  SVE_FloatPoint_Arithmetic_Predicate_withImmediate_FMIN,

  SVE_FloatPoint_UnaryOperations_Predicated_RoundToInt_FRINTr,
  SVE_FloatPoint_UnaryOperations_Predicated_ConvertPrecision_FCTX,
  SVE_FloatPoint_UnaryOperations_Predicated_ConvertPrecision_FCVT,
  SVE_FloatPoint_UnaryOperations_Predicated_ConvertPrecision_BFCVT,
  SVE_FloatPoint_UnaryOperations_Predicated_n_FRECPX,
  SVE_FloatPoint_UnaryOperations_Predicated_n_FSQRT,
  SVE_FloatPoint_UnaryOperations_Predicated_IntConvertToFloat_SCVTF,
  SVE_FloatPoint_UnaryOperations_Predicated_IntConvertToFloat_UCVTF,
  SVE_FloatPoint_UnaryOperations_Predicated_ConvertToInt_FLOGB,
  SVE_FloatPoint_UnaryOperations_Predicated_ConvertToInt_FCVTZS,
  SVE_FloatPoint_UnaryOperations_Predicated_ConvertToInt_FCVTZU,

  SVE_FloatPoint_RecursiveReduction_FADDV,
  SVE_FloatPoint_RecursiveReduction_FMAXNMV,
  SVE_FloatPoint_RecursiveReduction_FMINNMV,
  SVE_FloatPoint_RecursiveReduction_FMAXV,
  SVE_FloatPoint_RecursiveReduction_FMINV,

  SVE_FloatPoint_UnaryOperations_UnPredicated_ReciprocalEstimate_FRECPE,
  SVE_FloatPoint_UnaryOperations_UnPredicated_ReciprocalEstimate_FRSQRTE,

  SVE_FloatPoint_Compare_withZero_FCMcc,

  SVE_FloatPoint_AccumulatingReduction_Serial_FADDA,

  SVE_FloatPoint_MultiAdd_WritingAddEnd_FMLA,
  SVE_FloatPoint_MultiAdd_WritingAddEnd_FMLS,
  SVE_FloatPoint_MultiAdd_WritingAddEnd_FNMLA,
  SVE_FloatPoint_MultiAdd_WritingAddEnd_FNMLS,
  SVE_FloatPoint_MultiAdd_WritingMuliplicand_FMAD,
  SVE_FloatPoint_MultiAdd_WritingMuliplicand_FMSB,
  SVE_FloatPoint_MultiAdd_WritingMuliplicand_FNMAD,
  SVE_FloatPoint_MultiAdd_WritingMuliplicand_FNMSB,

  SVE_Memory_32bitGatherAndUnsizedContiguous_Prefetch_ScalarPlus32bitScaledOffsets_PRFB,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Prefetch_ScalarPlus32bitScaledOffsets_PRFH,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Prefetch_ScalarPlus32bitScaledOffsets_PRFW,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Prefetch_ScalarPlus32bitScaledOffsets_PRFD,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Load_Halfwords_ScalarPlus32bitScaledOffsets_LD1SH,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Load_Halfwords_ScalarPlus32bitScaledOffsets_LDFF1SH,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Load_Halfwords_ScalarPlus32bitScaledOffsets_LD1H,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Load_Halfwords_ScalarPlus32bitScaledOffsets_LDFF1H,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Load_Words_ScalarPlus32bitScaledOffsets_LD1W,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Load_Words_ScalarPlus32bitScaledOffsets_LDFF1W,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Predicate_LDR,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Vector_LDR,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Prefetch_ScalarPlusImmediate_PRFB,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Prefetch_ScalarPlusImmediate_PRFH,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Prefetch_ScalarPlusImmediate_PRFW,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Prefetch_ScalarPlusImmediate_PRFD,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Gather_Load_ScalarPlus32bitUnScaledOffsets_LD1SB,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Gather_Load_ScalarPlus32bitUnScaledOffsets_LDFF1SB,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Gather_Load_ScalarPlus32bitUnScaledOffsets_LD1B,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Gather_Load_ScalarPlus32bitUnScaledOffsets_LDFF1B,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Gather_Load_ScalarPlus32bitUnScaledOffsets_LD1SH,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Gather_Load_ScalarPlus32bitUnScaledOffsets_LDFF1SH,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Gather_Load_ScalarPlus32bitUnScaledOffsets_LD1H,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Gather_Load_ScalarPlus32bitUnScaledOffsets_LDFF1H,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Gather_Load_ScalarPlus32bitUnScaledOffsets_LD1W,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Gather_Load_ScalarPlus32bitUnScaledOffsets_LDFF1W,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Gather_NonTemporalLoad_VectorPlusScalar_LDNT1SB,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Gather_NonTemporalLoad_VectorPlusScalar_LDNT1B,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Gather_NonTemporalLoad_VectorPlusScalar_LDNT1SH,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Gather_NonTemporalLoad_VectorPlusScalar_LDNT1H,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Gather_NonTemporalLoad_VectorPlusScalar_LDNT1W,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Prefetch_ScalarPlusScalar_PRFB,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Prefetch_ScalarPlusScalar_PRFH,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Prefetch_ScalarPlusScalar_PRFW,
  SVE_Memory_32bitGatherAndUnsizedContiguous_Prefetch_ScalarPlusScalar_PRFD,
  SVE_Memory_32bitGatherAndUnsizedContiguous_32bitGather_Prefetch_VectorPlusImmediate_PRFB,
  SVE_Memory_32bitGatherAndUnsizedContiguous_32bitGather_Prefetch_VectorPlusImmediate_PRFH,
  SVE_Memory_32bitGatherAndUnsizedContiguous_32bitGather_Prefetch_VectorPlusImmediate_PRFW,
  SVE_Memory_32bitGatherAndUnsizedContiguous_32bitGather_Prefetch_VectorPlusImmediate_PRFD,
  SVE_Memory_32bitGatherAndUnsizedContiguous_32bitGather_Load_VectorPlusImmediate_LD1SB,
  SVE_Memory_32bitGatherAndUnsizedContiguous_32bitGather_Load_VectorPlusImmediate_LDFF1SB,
  SVE_Memory_32bitGatherAndUnsizedContiguous_32bitGather_Load_VectorPlusImmediate_LD1B,
  SVE_Memory_32bitGatherAndUnsizedContiguous_32bitGather_Load_VectorPlusImmediate_LDFF1B,
  SVE_Memory_32bitGatherAndUnsizedContiguous_32bitGather_Load_VectorPlusImmediate_LD1SH,
  SVE_Memory_32bitGatherAndUnsizedContiguous_32bitGather_Load_VectorPlusImmediate_LDFF1SH,
  SVE_Memory_32bitGatherAndUnsizedContiguous_32bitGather_Load_VectorPlusImmediate_LD1H,
  SVE_Memory_32bitGatherAndUnsizedContiguous_32bitGather_Load_VectorPlusImmediate_LDFF1H,
  SVE_Memory_32bitGatherAndUnsizedContiguous_32bitGather_Load_VectorPlusImmediate_LD1W,
  SVE_Memory_32bitGatherAndUnsizedContiguous_32bitGather_Load_VectorPlusImmediate_LDFF1W,
  SVE_Memory_32bitGatherAndUnsizedContiguous_LoadAndBroadcastElement_LD1RB,
  SVE_Memory_32bitGatherAndUnsizedContiguous_LoadAndBroadcastElement_LD1RSW,
  SVE_Memory_32bitGatherAndUnsizedContiguous_LoadAndBroadcastElement_LD1RH,
  SVE_Memory_32bitGatherAndUnsizedContiguous_LoadAndBroadcastElement_LD1RSH,
  SVE_Memory_32bitGatherAndUnsizedContiguous_LoadAndBroadcastElement_LD1RW,
  SVE_Memory_32bitGatherAndUnsizedContiguous_LoadAndBroadcastElement_LD1RSB,
  SVE_Memory_32bitGatherAndUnsizedContiguous_LoadAndBroadcastElement_LD1RD,

  SVE_Memory_ContiguousLoad_NonTemporal_Load_ScalarPlusImmediate_LDNT1B,
  SVE_Memory_ContiguousLoad_NonTemporal_Load_ScalarPlusImmediate_LDNT1H,
  SVE_Memory_ContiguousLoad_NonTemporal_Load_ScalarPlusImmediate_LDNT1W,
  SVE_Memory_ContiguousLoad_NonTemporal_Load_ScalarPlusImmediate_LDNT1D,
  SVE_Memory_ContiguousLoad_NonTemporal_Load_ScalarPlusScalar_LDNT1B,
  SVE_Memory_ContiguousLoad_NonTemporal_Load_ScalarPlusScalar_LDNT1H,
  SVE_Memory_ContiguousLoad_NonTemporal_Load_ScalarPlusScalar_LDNT1W,
  SVE_Memory_ContiguousLoad_NonTemporal_Load_ScalarPlusScalar_LDNT1D,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusImmediate_LD2B,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusImmediate_LD3B,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusImmediate_LD4B,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusImmediate_LD2H,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusImmediate_LD3H,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusImmediate_LD4H,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusImmediate_LD2W,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusImmediate_LD3W,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusImmediate_LD4W,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusImmediate_LD2D,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusImmediate_LD3D,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusImmediate_LD4D,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusScalar_LD2B,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusScalar_LD3B,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusScalar_LD4B,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusScalar_LD2H,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusScalar_LD3H,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusScalar_LD4H,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusScalar_LD2W,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusScalar_LD3W,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusScalar_LD4W,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusScalar_LD2D,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusScalar_LD3D,
  SVE_Memory_ContiguousLoad_Load_MultipleStructures_ScalarPlusScalar_LD4D,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusImmediate_LD1RQB,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusImmediate_LD1ROB,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusImmediate_LD1RQH,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusImmediate_LD1ROH,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusImmediate_LD1RQW,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusImmediate_LD1ROW,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusImmediate_LD1RQD,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusImmediate_LD1ROD,
  SVE_Memory_ContiguousLoad_ScalarPlusImmediate_LD1B,
  SVE_Memory_ContiguousLoad_ScalarPlusImmediate_LD1SW,
  SVE_Memory_ContiguousLoad_ScalarPlusImmediate_LD1H,
  SVE_Memory_ContiguousLoad_ScalarPlusImmediate_LD1SH,
  SVE_Memory_ContiguousLoad_ScalarPlusImmediate_LD1W,
  SVE_Memory_ContiguousLoad_ScalarPlusImmediate_LD1SB,
  SVE_Memory_ContiguousLoad_ScalarPlusImmediate_LD1D,
  SVE_Memory_ContiguousLoad_NonFaultLoad_ScalarPlusImmediate_LDNF1B,
  SVE_Memory_ContiguousLoad_NonFaultLoad_ScalarPlusImmediate_LDNF1SW,
  SVE_Memory_ContiguousLoad_NonFaultLoad_ScalarPlusImmediate_LDMF1H,
  SVE_Memory_ContiguousLoad_NonFaultLoad_ScalarPlusImmediate_LDNF1SH,
  SVE_Memory_ContiguousLoad_NonFaultLoad_ScalarPlusImmediate_LDNF1W,
  SVE_Memory_ContiguousLoad_NonFaultLoad_ScalarPlusImmediate_LDNF1SB,
  SVE_Memory_ContiguousLoad_NonFaultLoad_ScalarPlusImmediate_LDNF1D,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusScalar_LD1RQB,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusScalar_LD1ROB,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusScalar_LD1RQH,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusScalar_LD1ROH,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusScalar_LD1RQW,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusScalar_LD1ROW,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusScalar_LD1RQD,
  SVE_Memory_ContiguousLoad_LoadAndBroadcast_Quadword_ScalarPlusScalar_LD1ROD,
  SVE_Memory_ContiguousLoad_ScalarPlusScalar_LD1B,
  SVE_Memory_ContiguousLoad_ScalarPlusScalar_LD1SW,
  SVE_Memory_ContiguousLoad_ScalarPlusScalar_LD1H,
  SVE_Memory_ContiguousLoad_ScalarPlusScalar_LD1SH,
  SVE_Memory_ContiguousLoad_ScalarPlusScalar_LD1W,
  SVE_Memory_ContiguousLoad_ScalarPlusScalar_LD1SB,
  SVE_Memory_ContiguousLoad_ScalarPlusScalar_LD1D,
  SVE_Memory_ContiguousLoad_FirstFaultLoad_ScalarPlusScalar_LDFF1B,
  SVE_Memory_ContiguousLoad_FirstFaultLoad_ScalarPlusScalar_LDFF1SW,
  SVE_Memory_ContiguousLoad_FirstFaultLoad_ScalarPlusScalar_LDFF1H,
  SVE_Memory_ContiguousLoad_FirstFaultLoad_ScalarPlusScalar_LDFF1SH,
  SVE_Memory_ContiguousLoad_FirstFaultLoad_ScalarPlusScalar_LDFF1W,
  SVE_Memory_ContiguousLoad_FirstFaultLoad_ScalarPlusScalar_LDFF1SB,
  SVE_Memory_ContiguousLoad_FirstFaultLoad_ScalarPlusScalar_LDFF1D,

  SVE_Memory_64bitGather_Prefetch_ScalarPlus64bitScaledOffsets_PRFB,
  SVE_Memory_64bitGather_Prefetch_ScalarPlus64bitScaledOffsets_PRFH,
  SVE_Memory_64bitGather_Prefetch_ScalarPlus64bitScaledOffsets_PRFW,
  SVE_Memory_64bitGather_Prefetch_ScalarPlus64bitScaledOffsets_PRFD,
  SVE_Memory_64bitGather_Prefetch_ScalarPlusUnpacked32bitOffsets_PRFB,
  SVE_Memory_64bitGather_Prefetch_ScalarPlusUnpacked32bitOffsets_PRFH,
  SVE_Memory_64bitGather_Prefetch_ScalarPlusUnpacked32bitOffsets_PRFW,
  SVE_Memory_64bitGather_Prefetch_ScalarPlusUnpacked32bitOffsets_PRFD,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitScaledOffsets_LD1SH,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitScaledOffsets_LDFF1SH,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitScaledOffsets_LD1H,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitScaledOffsets_LDFF1H,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitScaledOffsets_LD1SW,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitScaledOffsets_LDFF1SW,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitScaledOffsets_LD1W,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitScaledOffsets_LDFF1W,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitScaledOffsets_LD1D,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitScaledOffsets_LDFF1D,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpacked32bitOffsets_LD1SH,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpacked32bitOffsets_LDFF1SH,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpacked32bitOffsets_LD1H,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpacked32bitOffsets_LDFF1H,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpacked32bitOffsets_LD1SW,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpacked32bitOffsets_LDFF1SW,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpacked32bitOffsets_LD1W,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpacked32bitOffsets_LDFF1W,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpacked32bitOffsets_LD1D,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpacked32bitOffsets_LDFF1D,
  SVE_Memory_64bitGather_Prefetch_VectorPlusImmediate_PRFB,
  SVE_Memory_64bitGather_Prefetch_VectorPlusImmediate_PRFH,
  SVE_Memory_64bitGather_Prefetch_VectorPlusImmediate_PRFW,
  SVE_Memory_64bitGather_Prefetch_VectorPlusImmediate_PRFD,
  SVE_Memory_64bitGather_NonTemporalLoad_VectorPlusScalar_LDNT1SB,
  SVE_Memory_64bitGather_NonTemporalLoad_VectorPlusScalar_LDNT1B,
  SVE_Memory_64bitGather_NonTemporalLoad_VectorPlusScalar_LDNT1SH,
  SVE_Memory_64bitGather_NonTemporalLoad_VectorPlusScalar_LDNT1H,
  SVE_Memory_64bitGather_NonTemporalLoad_VectorPlusScalar_LDNT1SW,
  SVE_Memory_64bitGather_NonTemporalLoad_VectorPlusScalar_LDNT1W,
  SVE_Memory_64bitGather_NonTemporalLoad_VectorPlusScalar_LDNT1D,
  SVE_Memory_64bitGather_Load_VectorPlusImmediate_LD1SB,
  SVE_Memory_64bitGather_Load_VectorPlusImmediate_LDFF1SB,
  SVE_Memory_64bitGather_Load_VectorPlusImmediate_LD1B,
  SVE_Memory_64bitGather_Load_VectorPlusImmediate_LDFF1B,
  SVE_Memory_64bitGather_Load_VectorPlusImmediate_LD1SH,
  SVE_Memory_64bitGather_Load_VectorPlusImmediate_LDFF1SH,
  SVE_Memory_64bitGather_Load_VectorPlusImmediate_LD1H,
  SVE_Memory_64bitGather_Load_VectorPlusImmediate_LDFF1H,
  SVE_Memory_64bitGather_Load_VectorPlusImmediate_LD1SW,
  SVE_Memory_64bitGather_Load_VectorPlusImmediate_LDFF1SW,
  SVE_Memory_64bitGather_Load_VectorPlusImmediate_LD1W,
  SVE_Memory_64bitGather_Load_VectorPlusImmediate_LDFF1W,
  SVE_Memory_64bitGather_Load_VectorPlusImmediate_LD1D,
  SVE_Memory_64bitGather_Load_VectorPlusImmediate_LDFF1D,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitUnScaledOffsets_LD1SB,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitUnScaledOffsets_LDFF1SB,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitUnScaledOffsets_LD1B,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitUnScaledOffsets_LDFF1B,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitUnScaledOffsets_LD1SH,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitUnScaledOffsets_LDFF1SH,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitUnScaledOffsets_LD1H,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitUnScaledOffsets_LDFF1H,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitUnScaledOffsets_LD1SW,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitUnScaledOffsets_LDFF1SW,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitUnScaledOffsets_LD1W,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitUnScaledOffsets_LDFF1W,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitUnScaledOffsets_LD1D,
  SVE_Memory_64bitGather_Load_ScalarPlus64bitUnScaledOffsets_LDFF1D,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpack32bitUnScaledOffsets_LD1SB,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpack32bitUnScaledOffsets_LDFF1SB,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpack32bitUnScaledOffsets_LD1B,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpack32bitUnScaledOffsets_LDFF1B,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpack32bitUnScaledOffsets_LD1SH,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpack32bitUnScaledOffsets_LDFF1SH,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpack32bitUnScaledOffsets_LD1H,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpack32bitUnScaledOffsets_LDFF1H,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpack32bitUnScaledOffsets_LD1SW,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpack32bitUnScaledOffsets_LDFF1SW,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpack32bitUnScaledOffsets_LD1W,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpack32bitUnScaledOffsets_LDFF1W,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpack32bitUnScaledOffsets_LD1D,
  SVE_Memory_64bitGather_Load_ScalarPlusUnpack32bitUnScaledOffsets_LDFF1D,

  SVE_Memory_ContiguousStoreAndUnsizedContiguous_Predicate_STR,
  SVE_Memory_ContiguousStoreAndUnsizedContiguous_Vector_STR,
  SVE_Memory_ContiguousStoreAndUnsizedContiguous_ScalarPlusScalar_ST1B,
  SVE_Memory_ContiguousStoreAndUnsizedContiguous_ScalarPlusScalar_ST1H,
  SVE_Memory_ContiguousStoreAndUnsizedContiguous_ScalarPlusScalar_ST1W,
  SVE_Memory_ContiguousStoreAndUnsizedContiguous_ScalarPlusScalar_ST1D,

  SVE_Memory_NonTemporalAndQuadwordScatterStore_64bit_NonTemporal_VectorPlusScalar_STNT1B,
  SVE_Memory_NonTemporalAndQuadwordScatterStore_64bit_NonTemporal_VectorPlusScalar_STNT1H,
  SVE_Memory_NonTemporalAndQuadwordScatterStore_64bit_NonTemporal_VectorPlusScalar_STNT1W,
  SVE_Memory_NonTemporalAndQuadwordScatterStore_64bit_NonTemporal_VectorPlusScalar_STNT1D,
  SVE_Memory_NonTemporalAndQuadwordScatterStore_32bit_NonTemporal_VectorPlusScalar_STNT1B,
  SVE_Memory_NonTemporalAndQuadwordScatterStore_32bit_NonTemporal_VectorPlusScalar_STNT1H,
  SVE_Memory_NonTemporalAndQuadwordScatterStore_32bit_NonTemporal_VectorPlusScalar_STNT1W,

  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_ScalarPlusScalar_STNT1B,
  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_ScalarPlusScalar_STNT1H,
  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_ScalarPlusScalar_STNT1W,
  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_ScalarPlusScalar_STNT1D,
  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_MultipleStructures_ScalarPlusScalar_ST2B,
  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_MultipleStructures_ScalarPlusScalar_ST3B,
  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_MultipleStructures_ScalarPlusScalar_ST4B,
  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_MultipleStructures_ScalarPlusScalar_ST2H,
  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_MultipleStructures_ScalarPlusScalar_ST3H,
  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_MultipleStructures_ScalarPlusScalar_ST4H,
  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_MultipleStructures_ScalarPlusScalar_ST2W,
  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_MultipleStructures_ScalarPlusScalar_ST3W,
  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_MultipleStructures_ScalarPlusScalar_ST4W,
  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_MultipleStructures_ScalarPlusScalar_ST2D,
  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_MultipleStructures_ScalarPlusScalar_ST3D,
  SVE_Memory_NonTempoalAndMultiRegisterContiguousStore_MultipleStructures_ScalarPlusScalar_ST4D,

  SVE_Memory_ScatterWithOptionalSignExtend_64bitStore_ScalarPlusUnpacked32bitUnScaledOffsets_ST1B,
  SVE_Memory_ScatterWithOptionalSignExtend_64bitStore_ScalarPlusUnpacked32bitUnScaledOffsets_ST1H,
  SVE_Memory_ScatterWithOptionalSignExtend_64bitStore_ScalarPlusUnpacked32bitUnScaledOffsets_ST1W,
  SVE_Memory_ScatterWithOptionalSignExtend_64bitStore_ScalarPlusUnpacked32bitUnScaledOffsets_ST1D,
  SVE_Memory_ScatterWithOptionalSignExtend_64bitStore_ScalarPlusUnpacked32bitScaledOffsets_ST1H,
  SVE_Memory_ScatterWithOptionalSignExtend_64bitStore_ScalarPlusUnpacked32bitScaledOffsets_ST1W,
  SVE_Memory_ScatterWithOptionalSignExtend_64bitStore_ScalarPlusUnpacked32bitScaledOffsets_ST1D,
  SVE_Memory_ScatterWithOptionalSignExtend_32bitStore_ScalarPlus32bitUnScaledOffsets_ST1B,
  SVE_Memory_ScatterWithOptionalSignExtend_32bitStore_ScalarPlus32bitUnScaledOffsets_ST1H,
  SVE_Memory_ScatterWithOptionalSignExtend_32bitStore_ScalarPlus32bitUnScaledOffsets_ST1W,
  SVE_Memory_ScatterWithOptionalSignExtend_32bitStore_ScalarPlus32bitScaledOffsets_ST1H,
  SVE_Memory_ScatterWithOptionalSignExtend_32bitStore_ScalarPlus32bitScaledOffsets_ST1W,

  SVE_Memory_Scatter_64bitStore_ScalarPlus64bitUnScaledOffsets_ST1B,
  SVE_Memory_Scatter_64bitStore_ScalarPlus64bitUnScaledOffsets_ST1H,
  SVE_Memory_Scatter_64bitStore_ScalarPlus64bitUnScaledOffsets_ST1W,
  SVE_Memory_Scatter_64bitStore_ScalarPlus64bitUnScaledOffsets_ST1D,
  SVE_Memory_Scatter_64bitStore_ScalarPlus64bitScaledOffsets_ST1H,
  SVE_Memory_Scatter_64bitStore_ScalarPlus64bitScaledOffsets_ST1W,
  SVE_Memory_Scatter_64bitStore_ScalarPlus64bitScaledOffsets_ST1D,
  SVE_Memory_Scatter_64bitStore_VectorPlusImmediate_ST1B,
  SVE_Memory_Scatter_64bitStore_VectorPlusImmediate_ST1H,
  SVE_Memory_Scatter_64bitStore_VectorPlusImmediate_ST1W,
  SVE_Memory_Scatter_64bitStore_VectorPlusImmediate_ST1D,
  SVE_Memory_Scatter_32bitStore_VectorPlusImmediate_ST1B,
  SVE_Memory_Scatter_32bitStore_VectorPlusImmediate_ST1H,
  SVE_Memory_Scatter_32bitStore_VectorPlusImmediate_ST1W,

  SVE_Memory_ContinguousStoreWithImmediateOffset_NonTemporal_ScalarPlusImmediate_STNT1B,
  SVE_Memory_ContinguousStoreWithImmediateOffset_NonTemporal_ScalarPlusImmediate_STNT1H,
  SVE_Memory_ContinguousStoreWithImmediateOffset_NonTemporal_ScalarPlusImmediate_STNT1W,
  SVE_Memory_ContinguousStoreWithImmediateOffset_NonTemporal_ScalarPlusImmediate_STNT1D,
  SVE_Memory_ContinguousStoreWithImmediateOffset_MultipleStructures_ScalarPlusImmediate_ST2B,
  SVE_Memory_ContinguousStoreWithImmediateOffset_MultipleStructures_ScalarPlusImmediate_ST3B,
  SVE_Memory_ContinguousStoreWithImmediateOffset_MultipleStructures_ScalarPlusImmediate_ST4B,
  SVE_Memory_ContinguousStoreWithImmediateOffset_MultipleStructures_ScalarPlusImmediate_ST2H,
  SVE_Memory_ContinguousStoreWithImmediateOffset_MultipleStructures_ScalarPlusImmediate_ST3H,
  SVE_Memory_ContinguousStoreWithImmediateOffset_MultipleStructures_ScalarPlusImmediate_ST4H,
  SVE_Memory_ContinguousStoreWithImmediateOffset_MultipleStructures_ScalarPlusImmediate_ST2W,
  SVE_Memory_ContinguousStoreWithImmediateOffset_MultipleStructures_ScalarPlusImmediate_ST3W,
  SVE_Memory_ContinguousStoreWithImmediateOffset_MultipleStructures_ScalarPlusImmediate_ST4W,
  SVE_Memory_ContinguousStoreWithImmediateOffset_MultipleStructures_ScalarPlusImmediate_ST2D,
  SVE_Memory_ContinguousStoreWithImmediateOffset_MultipleStructures_ScalarPlusImmediate_ST3D,
  SVE_Memory_ContinguousStoreWithImmediateOffset_MultipleStructures_ScalarPlusImmediate_ST4D,
  SVE_Memory_ContinguousStoreWithImmediateOffset_Contiguous_ScalarPlusImmediate_ST1B,
  SVE_Memory_ContinguousStoreWithImmediateOffset_Contiguous_ScalarPlusImmediate_ST1H,
  SVE_Memory_ContinguousStoreWithImmediateOffset_Contiguous_ScalarPlusImmediate_ST1W,
  SVE_Memory_ContinguousStoreWithImmediateOffset_Contiguous_ScalarPlusImmediate_ST1D,

  // DataProcessing_Immidate
  DataProcessing_Immidate_PCrel_Addressing_ADR,
  DataProcessing_Immidate_PCrel_Addressing_ADRP,

  DataProcessing_Immidate_AddSub_ADD,
  DataProcessing_Immidate_AddSub_ADDS,
  DataProcessing_Immidate_AddSub_SUB,
  DataProcessing_Immidate_AddSub_SUBS,

  DataProcessing_Immidate_AddSub_Tag_ADDG,
  DataProcessing_Immidate_AddSub_Tag_SUBG,

  DataProcessing_Immidate_Logical_AND,
  DataProcessing_Immidate_Logical_ORR,
  DataProcessing_Immidate_Logical_EOR,
  DataProcessing_Immidate_Logical_ANDS,

  DataProcessing_Immidate_MoveWide_32bitVariant_MOVN,
  DataProcessing_Immidate_MoveWide_32bitVariant_MOVZ,
  DataProcessing_Immidate_MoveWide_32bitVariant_MOVK,
  DataProcessing_Immidate_MoveWide_64bitVariant_MOVN,
  DataProcessing_Immidate_MoveWide_64bitVariant_MOVZ,
  DataProcessing_Immidate_MoveWide_64bitVariant_MOVK,

  DataProcessing_Immidate_Bitfield_32bitVariant_SBFM,
  DataProcessing_Immidate_Bitfield_32bitVariant_BFM,
  DataProcessing_Immidate_Bitfield_32bitVariant_UBFM,
  DataProcessing_Immidate_Bitfield_64bitVariant_SBFM,
  DataProcessing_Immidate_Bitfield_64bitVariant_BFM,
  DataProcessing_Immidate_Bitfield_64bitVariant_UBFM,

  DataProcessing_Immidate_Extract_32bitVariant_EXTR,
  DataProcessing_Immidate_Extract_64bitVariant_EXTR,

  // Branch or ExeptionSystemInstruction
  Branch_or_ExeptionSystemInstruction_ConditionalBranch_Immediate_Bcond,
  Branch_or_ExeptionSystemInstruction_ConditionalBranch_Immediate_BCcond,

  Branch_or_ExeptionSystemInstruction_ExceptionGeneration_SVC,
  Branch_or_ExeptionSystemInstruction_ExceptionGeneration_HVC,
  Branch_or_ExeptionSystemInstruction_ExceptionGeneration_SMC,
  Branch_or_ExeptionSystemInstruction_ExceptionGeneration_BRK,
  Branch_or_ExeptionSystemInstruction_ExceptionGeneration_HLT,
  Branch_or_ExeptionSystemInstruction_ExceptionGeneration_TCANCEL,
  Branch_or_ExeptionSystemInstruction_ExceptionGeneration_DCPS1,
  Branch_or_ExeptionSystemInstruction_ExceptionGeneration_DCPS2,
  Branch_or_ExeptionSystemInstruction_ExceptionGeneration_DCPS3,

  Branch_or_ExeptionSystemInstruction_SystemInstruction_Register_WFET,
  Branch_or_ExeptionSystemInstruction_SystemInstruction_Register_WFIT,

  Branch_or_ExeptionSystemInstruction_Hints_HINT,
  Branch_or_ExeptionSystemInstruction_Hints_NOP,
  Branch_or_ExeptionSystemInstruction_Hints_YIELD,
  Branch_or_ExeptionSystemInstruction_Hints_WFE,
  Branch_or_ExeptionSystemInstruction_Hints_WFI,
  Branch_or_ExeptionSystemInstruction_Hints_SEV,
  Branch_or_ExeptionSystemInstruction_Hints_SEVL,
  Branch_or_ExeptionSystemInstruction_Hints_DGH,
  Branch_or_ExeptionSystemInstruction_Hints_XPACx_series,
  Branch_or_ExeptionSystemInstruction_Hints_PACIAx_series,
  Branch_or_ExeptionSystemInstruction_Hints_PACIBx_series,
  Branch_or_ExeptionSystemInstruction_Hints_AUTIAx_series,
  Branch_or_ExeptionSystemInstruction_Hints_AUTIBx_series,
  Branch_or_ExeptionSystemInstruction_Hints_ESB,
  Branch_or_ExeptionSystemInstruction_Hints_PSB_CSYNC,
  Branch_or_ExeptionSystemInstruction_Hints_TSB_CSYNC,
  Branch_or_ExeptionSystemInstruction_Hints_CSDB,
  Branch_or_ExeptionSystemInstruction_Hints_BTI,

  Branch_or_ExeptionSystemInstruction_Barriers_CLREX,
  Branch_or_ExeptionSystemInstruction_Barriers_DSB,
  Branch_or_ExeptionSystemInstruction_Barriers_DMB,
  Branch_or_ExeptionSystemInstruction_Barriers_ISB,
  Branch_or_ExeptionSystemInstruction_Barriers_SB,
  Branch_or_ExeptionSystemInstruction_Barriers_DSB,
  Branch_or_ExeptionSystemInstruction_Barriers_TCOMMIT,

  Branch_or_ExeptionSystemInstruction_PSTATE_MSR,
  Branch_or_ExeptionSystemInstruction_PSTATE_CFINV,
  Branch_or_ExeptionSystemInstruction_PSTATE_XAFLAG,
  Branch_or_ExeptionSystemInstruction_PSTATE_AXFLAG,

  Branch_or_ExeptionSystemInstruction_SystemWithResult_TSTART,
  Branch_or_ExeptionSystemInstruction_SystemWithResult_TTEST,

  Branch_or_ExeptionSystemInstruction_SystemInstructions_SYS,
  Branch_or_ExeptionSystemInstruction_SystemInstructions_SYSL,

  Branch_or_ExeptionSystemInstruction_SystemRegisterMove_Register_MSR,
  Branch_or_ExeptionSystemInstruction_SystemRegisterMove_MRS,

  Branch_or_ExeptionSystemInstruction_UnconditionalBranch_Register_BR,
  Branch_or_ExeptionSystemInstruction_UnconditionalBranch_Register_BRAAx_KeyA_series,
  Branch_or_ExeptionSystemInstruction_UnconditionalBranch_Register_BRAAx_KeyB_series,
  Branch_or_ExeptionSystemInstruction_UnconditionalBranch_Register_BLR,
  Branch_or_ExeptionSystemInstruction_UnconditionalBranch_Register_BLRAAx_KeyA_series,
  Branch_or_ExeptionSystemInstruction_UnconditionalBranch_Register_BLRAAx_KeyB_series,
  Branch_or_ExeptionSystemInstruction_UnconditionalBranch_Register_RET,
  Branch_or_ExeptionSystemInstruction_UnconditionalBranch_Register_RETAA_RETABtoRETAB,
  Branch_or_ExeptionSystemInstruction_UnconditionalBranch_Register_RETAA_RETABtoRETAB,
  Branch_or_ExeptionSystemInstruction_UnconditionalBranch_Register_ERET,
  Branch_or_ExeptionSystemInstruction_UnconditionalBranch_Register_ERETAA_ERETABtoERETAA,
  Branch_or_ExeptionSystemInstruction_UnconditionalBranch_Register_ERETAA_ERETABtoERETAB,
  Branch_or_ExeptionSystemInstruction_UnconditionalBranch_Register_DRPS,

  Branch_or_ExeptionSystemInstruction_UnconditionalBranch_Immediate_B,
  Branch_or_ExeptionSystemInstruction_UnconditionalBranch_Immediate_BL,

  Branch_or_ExeptionSystemInstruction_CompareAndBranch_Immediate_32bitVariant_CBZ,
  Branch_or_ExeptionSystemInstruction_CompareAndBranch_Immediate_32bitVariant_CBNZ,
  Branch_or_ExeptionSystemInstruction_CompareAndBranch_Immediate_64bitVariant_CBZ,
  Branch_or_ExeptionSystemInstruction_CompareAndBranch_Immediate_64bitVariant_CBNZ,

  Branch_or_ExeptionSystemInstruction_TestAndBranch_Immediate_TBZ,
  Branch_or_ExeptionSystemInstruction_TestAndBranch_Immediate_TBNZ,

  // Load and Store
  Load_or_Store_CompareAndSwapPair_32bit_CASPv_CASP_series,
  Load_or_Store_CompareAndSwapPair_32bit_CASPLv_CASP_series,
  Load_or_Store_CompareAndSwapPair_32bit_CASPAv_CASP_series,
  Load_or_Store_CompareAndSwapPair_32bit_CASPALv_CASP_series,
  Load_or_Store_CompareAndSwapPair_64bit_CASPv_CASP_series,
  Load_or_Store_CompareAndSwapPair_64bit_CASPLv_CASP_series,
  Load_or_Store_CompareAndSwapPair_64bit_CASPAv_CASP_series,
  Load_or_Store_CompareAndSwapPair_64bit_CASPALv_CASP_series,

  Load_or_Store_AdvancedSIMD_MultipleStructures_ST4,
  Load_or_Store_AdvancedSIMD_MultipleStructures_4RegisterVariant_ST1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_ST3,
  Load_or_Store_AdvancedSIMD_MultipleStructures_3RegisterVariant_ST1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_1RegisterVariant_ST1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_ST2,
  Load_or_Store_AdvancedSIMD_MultipleStructures_2RegisterVariant_ST1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_LD4,
  Load_or_Store_AdvancedSIMD_MultipleStructures_4RegisterVariant_LD1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_LD3,
  Load_or_Store_AdvancedSIMD_MultipleStructures_3RegisterVariant_LD1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_1RegisterVariant_LD1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_LD2,
  Load_or_Store_AdvancedSIMD_MultipleStructures_2RegisterVariant_LD1,

  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_RegisterOffsetVariant_ST4,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_4Register_RegisterOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_RegisterOffsetVariant_ST3,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_3Register_RegisterOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_1Register_RegisterOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_RegisterOffsetVariant_ST2,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_2Register_RegisterOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_ImmediateOffsetVariant_ST4,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_4Register_ImmediateOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_ImmediateOffsetVariant_ST3,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_3Register_ImmediateOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_1Register_ImmediateOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_ImmediateOffsetVariant_ST2,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_2Register_ImmediateOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_RegisterOffsetVariant_LD4,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_4Register_RegisterOffsetVariant_LD1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_RegisterOffsetVariant_LD3,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_3Register_RegisterOffsetVariant_LD1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_1Register_RegisterOffsetVariant_LD1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_RegisterOffsetVariant_LD2,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_2Register_RegisterOffsetVariant_LD1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_ImmediateOffsetVariant_LD4,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_4Register_ImmediateOffsetVariant_LD1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_ImmediateOffsetVariant_LD3,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_3Register_ImmediateOffsetVariant_LD1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_1Register_ImmediateOffsetVariant_LD1,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_ImmediateOffsetVariant_LD2,
  Load_or_Store_AdvancedSIMD_MultipleStructures_PostIndexed_2Register_ImmediateOffsetVariant_LD1,

  Load_or_Store_AdvancedSIMD_SingleStructure_8bitVariant_ST1,
  Load_or_Store_AdvancedSIMD_SingleStructure_8bitVariant_ST3,
  Load_or_Store_AdvancedSIMD_SingleStructure_16bitVariant_ST1,
  Load_or_Store_AdvancedSIMD_SingleStructure_16bitVariant_ST3,
  Load_or_Store_AdvancedSIMD_SingleStructure_32bitVariant_ST1,
  Load_or_Store_AdvancedSIMD_SingleStructure_64bitVariant_ST1,
  Load_or_Store_AdvancedSIMD_SingleStructure_32bitVariant_ST3,
  Load_or_Store_AdvancedSIMD_SingleStructure_64bitVariant_ST3,
  Load_or_Store_AdvancedSIMD_SingleStructure_8bitVariant_ST2,
  Load_or_Store_AdvancedSIMD_SingleStructure_8bitVariant_ST4,
  Load_or_Store_AdvancedSIMD_SingleStructure_16bitVariant_ST2,
  Load_or_Store_AdvancedSIMD_SingleStructure_16bitVariant_ST4,
  Load_or_Store_AdvancedSIMD_SingleStructure_32bitVariant_ST2,
  Load_or_Store_AdvancedSIMD_SingleStructure_64bitVariant_ST2,
  Load_or_Store_AdvancedSIMD_SingleStructure_32bitVariant_ST4,
  Load_or_Store_AdvancedSIMD_SingleStructure_64bitVariant_ST4,
  Load_or_Store_AdvancedSIMD_SingleStructure_8bitVariant_LD1,
  Load_or_Store_AdvancedSIMD_SingleStructure_8bitVariant_LD3,
  Load_or_Store_AdvancedSIMD_SingleStructure_16bitVariant_LD1,
  Load_or_Store_AdvancedSIMD_SingleStructure_16bitVariant_LD3,
  Load_or_Store_AdvancedSIMD_SingleStructure_32bitVariant_LD1,
  Load_or_Store_AdvancedSIMD_SingleStructure_64bitVariant_LD1,
  Load_or_Store_AdvancedSIMD_SingleStructure_32bitVariant_LD3,
  Load_or_Store_AdvancedSIMD_SingleStructure_64bitVariant_LD3,
  Load_or_Store_AdvancedSIMD_SingleStructure_LD1R,
  Load_or_Store_AdvancedSIMD_SingleStructure_LD3R,
  Load_or_Store_AdvancedSIMD_SingleStructure_8bitVariant_LD2,
  Load_or_Store_AdvancedSIMD_SingleStructure_8bitVariant_LD4,
  Load_or_Store_AdvancedSIMD_SingleStructure_16bitVariant_LD2,
  Load_or_Store_AdvancedSIMD_SingleStructure_16bitVariant_LD4,
  Load_or_Store_AdvancedSIMD_SingleStructure_32bitVariant_LD2,
  Load_or_Store_AdvancedSIMD_SingleStructure_64bitVariant_LD2,
  Load_or_Store_AdvancedSIMD_SingleStructure_32bitVariant_LD4,
  Load_or_Store_AdvancedSIMD_SingleStructure_64bitVariant_LD4,
  Load_or_Store_AdvancedSIMD_SingleStructure_LD2R,
  Load_or_Store_AdvancedSIMD_SingleStructure_LD4R,

  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitRegisterOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitRegisterOffsetVariant_ST3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitRegisterOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitRegisterOffsetVariant_ST3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitRegisterOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitRegisterOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitRegisterOffsetVariant_ST3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitRegisterOffsetVariant_ST3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitImmediateOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitImmediateOffsetVariant_ST3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitImmediateOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitImmediateOffsetVariant_ST3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitImmediateOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitImmediateOffsetVariant_ST1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitImmediateOffsetVariant_ST3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitImmediateOffsetVariant_ST3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitRegisterOffsetVariant_ST2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitRegisterOffsetVariant_ST4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitRegisterOffsetVariant_ST2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitRegisterOffsetVariant_ST4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitRegisterOffsetVariant_ST2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitRegisterOffsetVariant_ST2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitRegisterOffsetVariant_ST4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitRegisterOffsetVariant_ST4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitImmediateOffsetVariant_ST2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitImmediateOffsetVariant_ST4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitImmediateOffsetVariant_ST2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitImmediateOffsetVariant_ST4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitImmediateOffsetVariant_ST2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitImmediateOffsetVariant_ST2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitImmediateOffsetVariant_ST4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitImmediateOffsetVariant_ST4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitRegisterOffsetVariant_LD1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitRegisterOffsetVariant_LD3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitRegisterOffsetVariant_LD1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitRegisterOffsetVariant_LD3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitRegisterOffsetVariant_LD1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitRegisterOffsetVariant_LD1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitRegisterOffsetVariant_LD3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitRegisterOffsetVariant_LD3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_RegisterOffsetVariant_LD1R,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_RegisterOffsetVariant_LD3R,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitImmediateOffsetVariant_LD1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitImmediateOffsetVariant_LD3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitImmediateOffsetVariant_LD1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitImmediateOffsetVariant_LD3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitImmediateOffsetVariant_LD1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitImmediateOffsetVariant_LD1,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitImmediateOffsetVariant_LD3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitImmediateOffsetVariant_LD3,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_ImmediateOffsetVariant_LD1R,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_ImmediateOffsetVariant_LD4R,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitRegisterOffsetVariant_LD2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitRegisterOffsetVariant_LD4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitRegisterOffsetVariant_LD2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitRegisterOffsetVariant_LD4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitRegisterOffsetVariant_LD2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitRegisterOffsetVariant_LD2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitRegisterOffsetVariant_LD4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitRegisterOffsetVariant_LD4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_RegisterOffsetVariant_LD2R,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_RegisterOffsetVariant_LD4R,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitImmediateOffsetVariant_LD2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_8bitImmediateOffsetVariant_LD4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitImmediateOffsetVariant_LD2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_16bitImmediateOffsetVariant_LD4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitImmediateOffsetVariant_LD2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitImmediateOffsetVariant_LD2,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_32bitImmediateOffsetVariant_LD4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_64bitImmediateOffsetVariant_LD4,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_ImmediateOffsetVariant_LD2R,
  Load_or_Store_AdvancedSIMD_SingleStructure_PostIndexed_ImmediateOffsetVariant_LD4R,

  Load_or_Store_MemoryTags_STG,
  Load_or_Store_MemoryTags_STZGM,
  Load_or_Store_MemoryTags_LDG,
  Load_or_Store_MemoryTags_STZG,
  Load_or_Store_MemoryTags_ST2G,
  Load_or_Store_MemoryTags_STGM,
  Load_or_Store_MemoryTags_STZ2G,
  Load_or_Store_MemoryTags_LDGM,

  Load_or_Store_ExclusivePair_STXP,
  Load_or_Store_ExclusivePair_STLXP,
  Load_or_Store_ExclusivePair_LDXP,
  Load_or_Store_ExclusivePair_LDAXP,

  Load_or_Store_ExclusiveRegister_STXRB,
  Load_or_Store_ExclusiveRegister_STLXRB,
  Load_or_Store_ExclusiveRegister_LDXRB,
  Load_or_Store_ExclusiveRegister_LDAXRB,
  Load_or_Store_ExclusiveRegister_STXRH,
  Load_or_Store_ExclusiveRegister_STLXRH,
  Load_or_Store_ExclusiveRegister_LDXRH,
  Load_or_Store_ExclusiveRegister_LDAXRH,
  Load_or_Store_ExclusiveRegister_32bitVariant_STXR,
  Load_or_Store_ExclusiveRegister_32bitVariant_STLXR,
  Load_or_Store_ExclusiveRegister_32bitVariant_LDXR,
  Load_or_Store_ExclusiveRegister_32bitVariant_LDAXR,
  Load_or_Store_ExclusiveRegister_64bitVariant_STXR,
  Load_or_Store_ExclusiveRegister_64bitVariant_STLXR,
  Load_or_Store_ExclusiveRegister_64bitVariant_LDXR,
  Load_or_Store_ExclusiveRegister_64bitVariant_LDAXR,

  Load_or_Store_Ordered_STLLRB,
  Load_or_Store_Ordered_STLRB,
  Load_or_Store_Ordered_LDLARB,
  Load_or_Store_Ordered_LDARB,
  Load_or_Store_Ordered_STLLRH,
  Load_or_Store_Ordered_STLRH,
  Load_or_Store_Ordered_LDLARH,
  Load_or_Store_Ordered_LDARH,
  Load_or_Store_Ordered_32bitVariant_STLLR,
  Load_or_Store_Ordered_32bitVariant_STLR,
  Load_or_Store_Ordered_32bitVariant_LDLAR,
  Load_or_Store_Ordered_32bitVariant_LDAR,
  Load_or_Store_Ordered_64bitVariant_STLLR,
  Load_or_Store_Ordered_64bitVariant_STLR,
  Load_or_Store_Ordered_64bitVariant_LDLAR,
  Load_or_Store_Ordered_64bitVariant_LDAR,

  Load_or_Store_CompareAndSwap_CASBvariant_CASxB_series,
  Load_or_Store_CompareAndSwap_CASLBvariant_CASxB_series,
  Load_or_Store_CompareAndSwap_CASABvariant_CASxB_series,
  Load_or_Store_CompareAndSwap_CASALBvariant_CASxB_series,
  Load_or_Store_CompareAndSwap_CASHvariant_CASxH_series,
  Load_or_Store_CompareAndSwap_CASLHvariant_CASxH_series,
  Load_or_Store_CompareAndSwap_CASAHvariant_CASxH_series,
  Load_or_Store_CompareAndSwap_CASALHvariant_CASxH_series,
  Load_or_Store_CompareAndSwap_32bitCASvariant_CASx_series,
  Load_or_Store_CompareAndSwap_32bitCASLvariant_CASx_series,
  Load_or_Store_CompareAndSwap_32bitCASAvariant_CASx_series,
  Load_or_Store_CompareAndSwap_32bitCASALvariant_CASx_series,
  Load_or_Store_CompareAndSwap_64bitCASvariant_CASx_series,
  Load_or_Store_CompareAndSwap_64bitCASLvariant_CASx_series,
  Load_or_Store_CompareAndSwap_64bitCASAvariant_CASx_series,
  Load_or_Store_CompareAndSwap_64bitCASALvariant_CASx_series,

  Load_or_Store_UnScaledImmediate_LDAPR_STLR,

  Load_or_Store_LoadRegister_Literal_32bitVariant_LDR,
  Load_or_Store_LoadRegister_Literal_32bitVariant_SIMDandFP_LDR,
  Load_or_Store_LoadRegister_Literal_64bitVariant_LDR,
  Load_or_Store_LoadRegister_Literal_64bitVariant_SIMDandFP_LDR,
  Load_or_Store_LoadRegister_Literal_LDRSW,
  Load_or_Store_LoadRegister_Literal_128bitVariant_SIMDandFP_LDR,
  Load_or_Store_LoadRegister_Literal_PRFM,

  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFx_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFxWT_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFxRT_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFxT_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFxWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFxWTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFxRTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFxTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFxRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFxWTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFxRTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFxTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFxN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFxWTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFxRTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYFxTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFx_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFxWT_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFxRT_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFxT_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFxWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFxWTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFxRTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFxTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFxRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFxWTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFxRTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFxTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFxN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFxWTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFxRTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYFxTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFx_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFxWT_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFxRT_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFxT_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFxWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFxWTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFxRTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFxTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFxRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFxWTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFxRTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFxTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFxN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFxWTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFxRTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYFxTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_SETx_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_SETxT_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_SETxN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_SETxTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_SETx_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_SETxT_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_SETxN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_SETxTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_SETx_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_SETxT_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_SETxN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_SETxTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYx_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYxWT_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYxRT_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYxT_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYxWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYxWTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYxRTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYxTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYxRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYxWTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYxRTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYxTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYxN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYxWTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYxRTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_CPYxTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYx_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYxWT_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYxRT_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYxT_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYxWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYxWTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYxRTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYxTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYxRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYxWTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYxRTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYxTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYxN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYxWTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYxRTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_CPYxTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYx_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYxWT_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYxRT_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYxT_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYxWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYxWTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYxRTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYxTWN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYxRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYxWTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYxRTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYxTRN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYxN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYxWTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYxRTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_CPYxTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_SETGx_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_SETGxT_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_SETGxN_series,
  Load_or_Store_MemoryCopyAndMemorySet_PrologueVariant_SETGxTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_SETGx_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_SETGxT_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_SETGxN_series,
  Load_or_Store_MemoryCopyAndMemorySet_MainVariant_SETGxTN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_SETGx_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_SETGxT_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_SETGxN_series,
  Load_or_Store_MemoryCopyAndMemorySet_EpilogueVariant_SETGxTN_series,

  Load_or_Store_NoAllocatePair_Offset_32bitVariant_STNP,
  Load_or_Store_NoAllocatePair_Offset_32bitVariant_LDNP,
  Load_or_Store_NoAllocatePair_Offset_32bitVariant_SIMDFP_STNP,
  Load_or_Store_NoAllocatePair_Offset_32bitVariant_SIMDFP_LDNP,
  Load_or_Store_NoAllocatePair_Offset_64bitVariant_SIMDFP_STNP,
  Load_or_Store_NoAllocatePair_Offset_64bitVariant_SIMDFP_LDNP,
  Load_or_Store_NoAllocatePair_Offset_64bitVariant_STNP,
  Load_or_Store_NoAllocatePair_Offset_64bitVariant_LDNP,
  Load_or_Store_NoAllocatePair_Offset_128bitVariant_SIMDFP_STNP,
  Load_or_Store_NoAllocatePair_Offset_128bitVariant_SIMDFP_LDNP,

  Load_or_Store_RegisterPair_PostIndexed_32bitVariant_STP,
  Load_or_Store_RegisterPair_PostIndexed_32bitVariant_LDP,
  Load_or_Store_RegisterPair_PostIndexed_32bitVariant_SIMDFP_STP,
  Load_or_Store_RegisterPair_PostIndexed_32bitVariant_SIMDFP_LDP,
  Load_or_Store_RegisterPair_PostIndexed_STGP,
  Load_or_Store_RegisterPair_PostIndexed_LDPSW,
  Load_or_Store_RegisterPair_PostIndexed_64bitVariant_SIMDFP_STP,
  Load_or_Store_RegisterPair_PostIndexed_64bitVariant_SIMDFP_LDP,
  Load_or_Store_RegisterPair_PostIndexed_64bitVariant_STP,
  Load_or_Store_RegisterPair_PostIndexed_64bitVariant_LDP,
  Load_or_Store_RegisterPair_PostIndexed_128bitVariant_SIMDFP_STP,
  Load_or_Store_RegisterPair_PostIndexed_128bitVariant_SIMDFP_LDP,

  Load_or_Store_RegisterPair_Offset_32bitVariant_STP,
  Load_or_Store_RegisterPair_Offset_32bitVariant_LDP,
  Load_or_Store_RegisterPair_Offset_32bitVariant_SIMDFP_STP,
  Load_or_Store_RegisterPair_Offset_32bitVariant_SIMDFP_LDP,
  Load_or_Store_RegisterPair_Offset_STGP,
  Load_or_Store_RegisterPair_Offset_LDPSW,
  Load_or_Store_RegisterPair_Offset_64bitVariant_SIMDFP_STP,
  Load_or_Store_RegisterPair_Offset_64bitVariant_SIMDFP_LDP,
  Load_or_Store_RegisterPair_Offset_64bitVariant_STP,
  Load_or_Store_RegisterPair_Offset_64bitVariant_LDP,
  Load_or_Store_RegisterPair_Offset_128bitVariant_SIMDFP_STP,
  Load_or_Store_RegisterPair_Offset_128bitVariant_SIMDFP_LDP,

  Load_or_Store_RegisterPair_PreIndexed_32bitVariant_STP,
  Load_or_Store_RegisterPair_PreIndexed_32bitVariant_LDP,
  Load_or_Store_RegisterPair_PreIndexed_32bitVariant_SIMDFP_STP,
  Load_or_Store_RegisterPair_PreIndexed_32bitVariant_SIMDFP_LDP,
  Load_or_Store_RegisterPair_PreIndexed_STGP,
  Load_or_Store_RegisterPair_PreIndexed_LDPSW,
  Load_or_Store_RegisterPair_PreIndexed_64bitVariant_SIMDFP_STP,
  Load_or_Store_RegisterPair_PreIndexed_64bitVariant_SIMDFP_LDP,
  Load_or_Store_RegisterPair_PreIndexed_64bitVariant_STP,
  Load_or_Store_RegisterPair_PreIndexed_64bitVariant_LDP,
  Load_or_Store_RegisterPair_PreIndexed_128bitVariant_SIMDFP_STP,
  Load_or_Store_RegisterPair_PreIndexed_128bitVariant_SIMDFP_LDP,

  Load_or_Store_Register_UnScaledImmediate_STURB,
  Load_or_Store_Register_UnScaledImmediate_LDURB,
  Load_or_Store_Register_UnScaledImmediate_64bitVariant_LDURSB,
  Load_or_Store_Register_UnScaledImmediate_32bitVariant_LDURSB,
  Load_or_Store_Register_UnScaledImmediate_8bitVariant_SIMDFP_STUR,
  Load_or_Store_Register_UnScaledImmediate_8bitVariant_SIMDFP_LDUR,
  Load_or_Store_Register_UnScaledImmediate_128bitVariant_SIMDFP_STUR,
  Load_or_Store_Register_UnScaledImmediate_128bitVariant_SIMDFP_LDUR,
  Load_or_Store_Register_UnScaledImmediate_STURH,
  Load_or_Store_Register_UnScaledImmediate_LDURH,
  Load_or_Store_Register_UnScaledImmediate_64bitVariant_LDURSH,
  Load_or_Store_Register_UnScaledImmediate_32bitVariant_LDURSH,
  Load_or_Store_Register_UnScaledImmediate_16bitVariant_SIMDFP_STUR,
  Load_or_Store_Register_UnScaledImmediate_16bitVariant_SIMDFP_LDUR,
  Load_or_Store_Register_UnScaledImmediate_32bitVariant_STUR,
  Load_or_Store_Register_UnScaledImmediate_32bitVariant_LDUR,
  Load_or_Store_Register_UnScaledImmediate_LDURSW,
  Load_or_Store_Register_UnScaledImmediate_32bitVariant_SIMDFP_STUR,
  Load_or_Store_Register_UnScaledImmediate_32bitVariant_SIMDFP_LDUR,
  Load_or_Store_Register_UnScaledImmediate_64bitVariant_STUR,
  Load_or_Store_Register_UnScaledImmediate_64bitVariant_LDUR,
  Load_or_Store_Register_UnScaledImmediate_PRFUM,
  Load_or_Store_Register_UnScaledImmediate_64bitVariant_SIMDFP_STUR,
  Load_or_Store_Register_UnScaledImmediate_64bitVariant_SIMDFP_LDUR,

  Load_or_Store_Register_Immediate_PostIndexed_STRB,
  Load_or_Store_Register_Immediate_PostIndexed_LDRB,
  Load_or_Store_Register_Immediate_PostIndexed_64bitVariant_LDRSB,
  Load_or_Store_Register_Immediate_PostIndexed_32bitVariant_LDRSB,
  Load_or_Store_Register_Immediate_PostIndexed_8bitVariant_immSIMDFP_STR,
  Load_or_Store_Register_Immediate_PostIndexed_8bitVariant_immSIMDFP_LDR,
  Load_or_Store_Register_Immediate_PostIndexed_128bitVariant_immSIMDFP_STR,
  Load_or_Store_Register_Immediate_PostIndexed_128bitVariant_immSIMDFP_LDR,
  Load_or_Store_Register_Immediate_PostIndexed_STRH,
  Load_or_Store_Register_Immediate_PostIndexed_LDRH,
  Load_or_Store_Register_Immediate_PostIndexed_64bitVariant_LDRSH,
  Load_or_Store_Register_Immediate_PostIndexed_32bitVariant_LDRSH,
  Load_or_Store_Register_Immediate_PostIndexed_16bitVariant_immSIMDFP_STR,
  Load_or_Store_Register_Immediate_PostIndexed_16bitVariant_immSIMDFP_LDR,
  Load_or_Store_Register_Immediate_PostIndexed_32bitVariant_STR,
  Load_or_Store_Register_Immediate_PostIndexed_32bitVariant_LDR,
  Load_or_Store_Register_Immediate_PostIndexed_LDRSW,
  Load_or_Store_Register_Immediate_PostIndexed_32bitVariant_immSIMDFP_STR,
  Load_or_Store_Register_Immediate_PostIndexed_32bitVariant_immSIMDFP_LDR,
  Load_or_Store_Register_Immediate_PostIndexed_64bitVariant_STR,
  Load_or_Store_Register_Immediate_PostIndexed_64bitVariant_LDR,
  Load_or_Store_Register_Immediate_PostIndexed_64bitVariant_immSIMDFP_STR,
  Load_or_Store_Register_Immediate_PostIndexed_64bitVariant_immSIMDFP_LDR,

  Load_or_Store_Register_UnPrivileged_STRB,
  Load_or_Store_Register_UnPrivileged_LDRB,
  Load_or_Store_Register_UnPrivileged_64bitVariant_LDTRSB,
  Load_or_Store_Register_UnPrivileged_32bitVariant_LDTRSB,
  Load_or_Store_Register_UnPrivileged_STTRH,
  Load_or_Store_Register_UnPrivileged_LDTRH,
  Load_or_Store_Register_UnPrivileged_64bitVariant_LDTRSH,
  Load_or_Store_Register_UnPrivileged_32bitVariant_LDTRSH,
  Load_or_Store_Register_UnPrivileged_32bitVariant_STTR,
  Load_or_Store_Register_UnPrivileged_32bitVariant_LDTR,
  Load_or_Store_Register_UnPrivileged_LDTRSW,
  Load_or_Store_Register_UnPrivileged_64bitVariant_STTR,
  Load_or_Store_Register_UnPrivileged_64bitVariant_LDTR,

  Load_or_Store_Register_ImmediatePreIndexed_STRB,
  Load_or_Store_Register_ImmediatePreIndexed_LDRB,
  Load_or_Store_Register_ImmediatePreIndexed_64bitVariant_LDRSB,
  Load_or_Store_Register_ImmediatePreIndexed_32bitVariant_LDRSB,
  Load_or_Store_Register_ImmediatePreIndexed_8bitVariant_SIMDFP_STR,
  Load_or_Store_Register_ImmediatePreIndexed_8bitVariant_SIMDFP_LDR,
  Load_or_Store_Register_ImmediatePreIndexed_128bitVariant_SIMDFP_STR,
  Load_or_Store_Register_ImmediatePreIndexed_128bitVariant_SIMDFP_LDR,
  Load_or_Store_Register_ImmediatePreIndexed_STRH,
  Load_or_Store_Register_ImmediatePreIndexed_LDRH,
  Load_or_Store_Register_ImmediatePreIndexed_64bitVariant_LDRSH,
  Load_or_Store_Register_ImmediatePreIndexed_32bitVariant_LDRSH,
  Load_or_Store_Register_ImmediatePreIndexed_16bitVariant_immSIMDFP_STR,
  Load_or_Store_Register_ImmediatePreIndexed_16bitVariant_immSIMDFP_LDR,
  Load_or_Store_Register_ImmediatePreIndexed_32bitVariant_imm_STR,
  Load_or_Store_Register_ImmediatePreIndexed_32bitVariant_imm_LDR,
  Load_or_Store_Register_ImmediatePreIndexed_imm_LDRSW,
  Load_or_Store_Register_ImmediatePreIndexed_32bitVariant_immSIMDFP_STR,
  Load_or_Store_Register_ImmediatePreIndexed_32bitVariant_immSIMDFP_LDR,
  Load_or_Store_Register_ImmediatePreIndexed_64bitVariant_imm_STR,
  Load_or_Store_Register_ImmediatePreIndexed_64bitVariant_imm_LDR,
  Load_or_Store_Register_ImmediatePreIndexed_64bitVariant_immSIMDFP_STR,
  Load_or_Store_Register_ImmediatePreIndexed_64bitVariant_immSIMDFP_LDR,

  Load_or_Store_AtomicMemoryOperations_LDADDB,
  Load_or_Store_AtomicMemoryOperations_LDCLRB,
  Load_or_Store_AtomicMemoryOperations_LDEORB,
  Load_or_Store_AtomicMemoryOperations_LDSETB,
  Load_or_Store_AtomicMemoryOperations_LDSMAXB,
  Load_or_Store_AtomicMemoryOperations_LDSMINB,
  Load_or_Store_AtomicMemoryOperations_LDUMAXB,
  Load_or_Store_AtomicMemoryOperations_LDUMINB,
  Load_or_Store_AtomicMemoryOperations_SWPB,
  Load_or_Store_AtomicMemoryOperations_LDADDLB,
  Load_or_Store_AtomicMemoryOperations_LDCLRLB,
  Load_or_Store_AtomicMemoryOperations_LDEORLB,
  Load_or_Store_AtomicMemoryOperations_LDSETLB,
  Load_or_Store_AtomicMemoryOperations_LDSMAXLB,
  Load_or_Store_AtomicMemoryOperations_LDSMINLB,
  Load_or_Store_AtomicMemoryOperations_LDUMAXLB,
  Load_or_Store_AtomicMemoryOperations_LDUMINLB,
  Load_or_Store_AtomicMemoryOperations_SWPLB,
  Load_or_Store_AtomicMemoryOperations_LDADDAB,
  Load_or_Store_AtomicMemoryOperations_LDCLRAB,
  Load_or_Store_AtomicMemoryOperations_LDEORAB,
  Load_or_Store_AtomicMemoryOperations_LDSETAB,
  Load_or_Store_AtomicMemoryOperations_LDSMAXLB,
  Load_or_Store_AtomicMemoryOperations_LDSMINLB,
  Load_or_Store_AtomicMemoryOperations_LDUMAXLB,
  Load_or_Store_AtomicMemoryOperations_LDUMINLB,
  Load_or_Store_AtomicMemoryOperations_SWPAB,
  Load_or_Store_AtomicMemoryOperations_LDADDALB,
  Load_or_Store_AtomicMemoryOperations_LDCLRALB,
  Load_or_Store_AtomicMemoryOperations_LDEORALB,
  Load_or_Store_AtomicMemoryOperations_LDSETALB,
  Load_or_Store_AtomicMemoryOperations_LDSMAXALB,
  Load_or_Store_AtomicMemoryOperations_LDSMINALB,
  Load_or_Store_AtomicMemoryOperations_LDUMAXALB,
  Load_or_Store_AtomicMemoryOperations_LDUMINALB,
  Load_or_Store_AtomicMemoryOperations_SWPALB,
  Load_or_Store_AtomicMemoryOperations_LDADDH,
  Load_or_Store_AtomicMemoryOperations_LDCLRH,
  Load_or_Store_AtomicMemoryOperations_LDEORH,
  Load_or_Store_AtomicMemoryOperations_LDSETH,
  Load_or_Store_AtomicMemoryOperations_LDSMAXH,
  Load_or_Store_AtomicMemoryOperations_LDSMINH,
  Load_or_Store_AtomicMemoryOperations_LDUMAXH,
  Load_or_Store_AtomicMemoryOperations_LDUMINH,
  Load_or_Store_AtomicMemoryOperations_SWPH,
  Load_or_Store_AtomicMemoryOperations_LDADDLH,
  Load_or_Store_AtomicMemoryOperations_LDCLRLH,
  Load_or_Store_AtomicMemoryOperations_LDEORLH,
  Load_or_Store_AtomicMemoryOperations_LDSETLH,
  Load_or_Store_AtomicMemoryOperations_LDSMAXLH,
  Load_or_Store_AtomicMemoryOperations_LDSMINLH,
  Load_or_Store_AtomicMemoryOperations_LDUMAXLH,
  Load_or_Store_AtomicMemoryOperations_LDUMINLH,
  Load_or_Store_AtomicMemoryOperations_SWPLH,
  Load_or_Store_AtomicMemoryOperations_LDADDAH,
  Load_or_Store_AtomicMemoryOperations_LDCLRAH,
  Load_or_Store_AtomicMemoryOperations_LDEORAH,
  Load_or_Store_AtomicMemoryOperations_LDSETAH,
  Load_or_Store_AtomicMemoryOperations_LDSMAXAH,
  Load_or_Store_AtomicMemoryOperations_LDSMINAH,
  Load_or_Store_AtomicMemoryOperations_LDUMAXAH,
  Load_or_Store_AtomicMemoryOperations_LDUMINAH,
  Load_or_Store_AtomicMemoryOperations_SWPAH,
  Load_or_Store_AtomicMemoryOperations_LDAPRH,
  Load_or_Store_AtomicMemoryOperations_LDADDALH,
  Load_or_Store_AtomicMemoryOperations_LDCLRALH,
  Load_or_Store_AtomicMemoryOperations_LDEORALH,
  Load_or_Store_AtomicMemoryOperations_LDSETALH,
  Load_or_Store_AtomicMemoryOperations_LDSMAXALH,
  Load_or_Store_AtomicMemoryOperations_LDSMINALH,
  Load_or_Store_AtomicMemoryOperations_LDUMAXALH,
  Load_or_Store_AtomicMemoryOperations_LDUMINALH,
  Load_or_Store_AtomicMemoryOperations_SWPALH,
  Load_or_Store_AtomicMemoryOperations_LDADD,
  Load_or_Store_AtomicMemoryOperations_32bit_LDADD,
  Load_or_Store_AtomicMemoryOperations_32bit_LDCLR,
  Load_or_Store_AtomicMemoryOperations_32bit_LDEOR,
  Load_or_Store_AtomicMemoryOperations_32bit_LDSET,
  Load_or_Store_AtomicMemoryOperations_32bit_LDSMAX,
  Load_or_Store_AtomicMemoryOperations_32bit_LDSMIN,
  Load_or_Store_AtomicMemoryOperations_32bit_LDUMAX,
  Load_or_Store_AtomicMemoryOperations_32bit_LDUMIN,
  Load_or_Store_AtomicMemoryOperations_32bit_SWP,
  Load_or_Store_AtomicMemoryOperations_32bit_LDADDL,
  Load_or_Store_AtomicMemoryOperations_32bit_LDCLRL,
  Load_or_Store_AtomicMemoryOperations_32bit_LDEORL,
  Load_or_Store_AtomicMemoryOperations_32bit_LDSETL,
  Load_or_Store_AtomicMemoryOperations_32bit_LDSMAXL,
  Load_or_Store_AtomicMemoryOperations_32bit_LDSMINL,
  Load_or_Store_AtomicMemoryOperations_32bit_LDUMAXL,
  Load_or_Store_AtomicMemoryOperations_32bit_LDUMINL,
  Load_or_Store_AtomicMemoryOperations_32bit_SWPL,
  Load_or_Store_AtomicMemoryOperations_32bit_LDADDA,
  Load_or_Store_AtomicMemoryOperations_32bit_LDCLRA,
  Load_or_Store_AtomicMemoryOperations_32bit_LDEORA,
  Load_or_Store_AtomicMemoryOperations_32bit_LDSETA,
  Load_or_Store_AtomicMemoryOperations_32bit_LDSMAXA,
  Load_or_Store_AtomicMemoryOperations_32bit_LDSMINA,
  Load_or_Store_AtomicMemoryOperations_32bit_LDUMAXA,
  Load_or_Store_AtomicMemoryOperations_32bit_LDUMINA,
  Load_or_Store_AtomicMemoryOperations_32bit_SWPA,
  Load_or_Store_AtomicMemoryOperations_32bit_LDADDAL,
  Load_or_Store_AtomicMemoryOperations_32bit_LDCLRAL,
  Load_or_Store_AtomicMemoryOperations_32bit_LDEORAL,
  Load_or_Store_AtomicMemoryOperations_32bit_LDSETAL,
  Load_or_Store_AtomicMemoryOperations_32bit_LDSMAXAL,
  Load_or_Store_AtomicMemoryOperations_32bit_LDSMINAL,
  Load_or_Store_AtomicMemoryOperations_32bit_LDUMAXAL,
  Load_or_Store_AtomicMemoryOperations_32bit_LDUMINAL,
  Load_or_Store_AtomicMemoryOperations_32bit_SWPAL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDADD,
  Load_or_Store_AtomicMemoryOperations_64bit_LDCLR,
  Load_or_Store_AtomicMemoryOperations_64bit_LDEOR,
  Load_or_Store_AtomicMemoryOperations_64bit_LDSET,
  Load_or_Store_AtomicMemoryOperations_64bit_LDSMAX,
  Load_or_Store_AtomicMemoryOperations_64bit_LDSMIN,
  Load_or_Store_AtomicMemoryOperations_64bit_LDUMAX,
  Load_or_Store_AtomicMemoryOperations_64bit_LDUMIN,
  Load_or_Store_AtomicMemoryOperations_64bit_SWP,
  Load_or_Store_AtomicMemoryOperations_64bit_LDADDL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDCLRL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDEORL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDSETL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDSMAXL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDSMINL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDUMAXL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDUMINL,
  Load_or_Store_AtomicMemoryOperations_64bit_SWPL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDADDA,
  Load_or_Store_AtomicMemoryOperations_64bit_LDCLRA,
  Load_or_Store_AtomicMemoryOperations_64bit_LDEORA,
  Load_or_Store_AtomicMemoryOperations_64bit_LDSETA,
  Load_or_Store_AtomicMemoryOperations_64bit_LDSMAXA,
  Load_or_Store_AtomicMemoryOperations_64bit_LDSMINA,
  Load_or_Store_AtomicMemoryOperations_64bit_LDUMAXA,
  Load_or_Store_AtomicMemoryOperations_64bit_LDUMINA,
  Load_or_Store_AtomicMemoryOperations_64bit_SWPA,
  Load_or_Store_AtomicMemoryOperations_64bit_LDADDAL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDCLRAL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDEORAL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDSETAL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDSMAXAL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDSMINAL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDUMAXAL,
  Load_or_Store_AtomicMemoryOperations_64bit_LDUMINAL,
  Load_or_Store_AtomicMemoryOperations_64bit_SWPAL,

  Load_or_Store_Register_RegisterOffset_ExtendRegisterVariant_STRB,
  Load_or_Store_Register_RegisterOffset_ShiftedReigherVariant_STRB,
  Load_or_Store_Register_RegisterOffset_ExtendedRegisterVariant_LDRB,
  Load_or_Store_Register_RegisterOffset_ShiftedRegisterVariant_LDRB,
  Load_or_Store_Register_RegisterOffset_64bit_ExtendedRegisterOffsetVariant_LDRSB,
  Load_or_Store_Register_RegisterOffset_64bit_ShiftedRegisterOffsetVariant_LDRSB,
  Load_or_Store_Register_RegisterOffset_32bit_ExtendedRegisterOffsetVariant_LDRSB,
  Load_or_Store_Register_RegisterOffset_32bit_ShiftedRegisterOffsetVariant_LDRSB,
  Load_or_Store_Register_RegisterOffset_SIMDFP_STR,
  Load_or_Store_Register_RegisterOffset_SIMDFP_LDR,
  Load_or_Store_Register_RegisterOffset_STRH,
  Load_or_Store_Register_RegisterOffset_LDRH,
  Load_or_Store_Register_RegisterOffset_64bit_LDRSH,
  Load_or_Store_Register_RegisterOffset_32bit_LDRSH,
  Load_or_Store_Register_RegisterOffset_32bit_STR,
  Load_or_Store_Register_RegisterOffset_32bit_LDR,
  Load_or_Store_Register_RegisterOffset_LDRSW,
  Load_or_Store_Register_RegisterOffset_64bit_STR,
  Load_or_Store_Register_RegisterOffset_64bit_LDR,
  Load_or_Store_Register_RegisterOffset_PRFM,

  Load_or_Store_Register_Pac_KeyA_OffsetVariant_LDRAx,
  Load_or_Store_Register_Pac_KeyA_PreIndexedVariant_LDRAx,
  Load_or_Store_Register_Pac_KeyB_OffsetVaraint_LDRAx,
  Load_or_Store_Register_Pac_KeyB_PreIndexedVariant_LDRAx,

  Load_or_Store_Register_UnsignedImmediate_STRB,
  Load_or_Store_Register_UnsignedImmediate_LDRB,
  Load_or_Store_Register_UnsignedImmediate_64bitVariant_LDRSB,
  Load_or_Store_Register_UnsignedImmediate_32bitVariant_LDRSB,
  Load_or_Store_Register_UnsignedImmediate_8bitVariant_STR,
  Load_or_Store_Register_UnsignedImmediate_8bitVariant_LDR,
  Load_or_Store_Register_UnsignedImmediate_128bitVariant_STR,
  Load_or_Store_Register_UnsignedImmediate_128bitVariant_LDR,
  Load_or_Store_Register_UnsignedImmediate_STRH,
  Load_or_Store_Register_UnsignedImmediate_LDRH,
  Load_or_Store_Register_UnsignedImmediate_32bitVariant_STR,
  Load_or_Store_Register_UnsignedImmediate_32bitVariant_LDR,
  Load_or_Store_Register_UnsignedImmediate_LDRSW,
  Load_or_Store_Register_UnsignedImmediate_32bitVariant_SIMDFP_STR,
  Load_or_Store_Register_UnsignedImmediate_32bitVariant_SIMDFP_LDR,
  Load_or_Store_Register_UnsignedImmediate_64bitVariant_STR,
  Load_or_Store_Register_UnsignedImmediate_64bitVariant_LDR,
  Load_or_Store_Register_UnsignedImmediate_PRFM,
  Load_or_Store_Register_UnsignedImmediate_64bitVariant_SIMDFP_STR,
  Load_or_Store_Register_UnsignedImmediate_64bitVariant_SIMDFP_LDR,

  // DataProcessing_Register
  DataProcessing_Register_DataProccessing_2s_32bit_UDIV,
  DataProcessing_Register_DataProccessing_2s_32bit_SDIV,
  DataProcessing_Register_DataProccessing_2s_32bit_LSLV,
  DataProcessing_Register_DataProccessing_2s_32bit_LSRV,
  DataProcessing_Register_DataProccessing_2s_32bit_ASRV,
  DataProcessing_Register_DataProccessing_2s_32bit_RORV,
  DataProcessing_Register_DataProccessing_2s_CRC32B,
  DataProcessing_Register_DataProccessing_2s_CRC32H,
  DataProcessing_Register_DataProccessing_2s_CRC32W,
  DataProcessing_Register_DataProccessing_2s_CRC32CB,
  DataProcessing_Register_DataProccessing_2s_CRC32CH,
  DataProcessing_Register_DataProccessing_2s_CRC32CW,
  DataProcessing_Register_DataProccessing_2s_SUBP,
  DataProcessing_Register_DataProccessing_2s_64bit_UDIV,
  DataProcessing_Register_DataProccessing_2s_64bit_SDIV,
  DataProcessing_Register_DataProccessing_2s_IRG,
  DataProcessing_Register_DataProccessing_2s_GMI,
  DataProcessing_Register_DataProccessing_2s_64bit_LSLV,
  DataProcessing_Register_DataProccessing_2s_64bit_LSRV,
  DataProcessing_Register_DataProccessing_2s_64bit_ASRV,
  DataProcessing_Register_DataProccessing_2s_64bit_RORV,
  DataProcessing_Register_DataProccessing_2s_PACGA,
  DataProcessing_Register_DataProccessing_2s_CRC32X,
  DataProcessing_Register_DataProccessing_2s_CRC32CX,
  DataProcessing_Register_DataProccessing_2s_SUBPS,

  DataProcessing_Register_DataProccessing_1s_32bit_RBIT,
  DataProcessing_Register_DataProccessing_1s_32bit_REV16,
  DataProcessing_Register_DataProccessing_1s_32bit_REV,
  DataProcessing_Register_DataProccessing_1s_32bit_CLZ,
  DataProcessing_Register_DataProccessing_1s_32bit_CLS,
  DataProcessing_Register_DataProccessing_1s_32bit_RBIT,
  DataProcessing_Register_DataProccessing_1s_32bit_REV16,
  DataProcessing_Register_DataProccessing_1s_REV32,
  DataProcessing_Register_DataProccessing_1s_32bit_REV,
  DataProcessing_Register_DataProccessing_1s_32bit_CLZ,
  DataProcessing_Register_DataProccessing_1s_32bit_CLS,
  DataProcessing_Register_DataProccessing_1s_PACIA,
  DataProcessing_Register_DataProccessing_1s_PACIB,
  DataProcessing_Register_DataProccessing_1s_PACDA,
  DataProcessing_Register_DataProccessing_1s_AUTIA,
  DataProcessing_Register_DataProccessing_1s_AUTIB,
  DataProcessing_Register_DataProccessing_1s_AUTDA,
  DataProcessing_Register_DataProccessing_1s_AUTDB,
  DataProcessing_Register_DataProccessing_1s_PACIZA,
  DataProcessing_Register_DataProccessing_1s_PICIZB,
  DataProcessing_Register_DataProccessing_1s_PACDZA,
  DataProcessing_Register_DataProccessing_1s_PACDZB,
  DataProcessing_Register_DataProccessing_1s_AUTIZA,
  DataProcessing_Register_DataProccessing_1s_AUTIZB,
  DataProcessing_Register_DataProccessing_1s_AUTDZA,
  DataProcessing_Register_DataProccessing_1s_AUTDZB,
  DataProcessing_Register_DataProccessing_1s_XPACI,
  DataProcessing_Register_DataProccessing_1s_XPACD,

  DataProcessing_Register_logic_ShiftesdRegister_32bit_AND,
  DataProcessing_Register_logic_ShiftesdRegister_32bit_BIC,
  DataProcessing_Register_logic_ShiftesdRegister_32bit_ORR,
  DataProcessing_Register_logic_ShiftesdRegister_32bit_ORN,
  DataProcessing_Register_logic_ShiftesdRegister_32bit_EOR,
  DataProcessing_Register_logic_ShiftesdRegister_32bit_EON,
  DataProcessing_Register_logic_ShiftesdRegister_32bit_ANDS,
  DataProcessing_Register_logic_ShiftesdRegister_32bit_BICS,
  DataProcessing_Register_logic_ShiftesdRegister_64bit_AND,
  DataProcessing_Register_logic_ShiftesdRegister_64bit_BIC,
  DataProcessing_Register_logic_ShiftesdRegister_64bit_ORR,
  DataProcessing_Register_logic_ShiftesdRegister_64bit_ORN,
  DataProcessing_Register_logic_ShiftesdRegister_64bit_EOR,
  DataProcessing_Register_logic_ShiftesdRegister_64bit_EON,
  DataProcessing_Register_logic_ShiftesdRegister_64bit_ANDS,
  DataProcessing_Register_logic_ShiftesdRegister_64bit_BICS,

  DataProcessing_Register_AddSub_ShiftedRegister_32bit_ADD,
  DataProcessing_Register_AddSub_ShiftedRegister_32bit_ADDS,
  DataProcessing_Register_AddSub_ShiftedRegister_32bit_SUB,
  DataProcessing_Register_AddSub_ShiftedRegister_32bit_SUBS,
  DataProcessing_Register_AddSub_ShiftedRegister_64bit_ADD,
  DataProcessing_Register_AddSub_ShiftedRegister_64bit_ADDS,
  DataProcessing_Register_AddSub_ShiftedRegister_64bit_SUB,
  DataProcessing_Register_AddSub_ShiftedRegister_64bit_SUBS,

  DataProcessing_Register_AddSub_ExtendedRegister_32bit_ADD,
  DataProcessing_Register_AddSub_ExtendedRegister_32bit_ADDS,
  DataProcessing_Register_AddSub_ExtendedRegister_32bit_SUB,
  DataProcessing_Register_AddSub_ExtendedRegister_32bit_SUBS,
  DataProcessing_Register_AddSub_ExtendedRegister_64bit_ADD,
  DataProcessing_Register_AddSub_ExtendedRegister_64bit_ADDS,
  DataProcessing_Register_AddSub_ExtendedRegister_64bit_SUB,
  DataProcessing_Register_AddSub_ExtendedRegister_64bit_SUBS,

  DataProcessing_Register_AddSub_WithCarry_32bit_ADC,
  DataProcessing_Register_AddSub_WithCarry_32bit_ADCS,
  DataProcessing_Register_AddSub_WithCarry_32bit_SBC,
  DataProcessing_Register_AddSub_WithCarry_32bit_SBCS,
  DataProcessing_Register_AddSub_WithCarry_64bit_ADC,
  DataProcessing_Register_AddSub_WithCarry_64bit_ADCS,
  DataProcessing_Register_AddSub_WithCarry_64bit_SBC,
  DataProcessing_Register_AddSub_WithCarry_64bit_SBCS,

  DataProcessing_Register_RotateRightIntoFlags_RMIF,

  DataProcessing_Register_EvaluateIntoFlag_SETF8,
  DataProcessing_Register_EvaluateIntoFlag_SETF16,

  DataProcessing_Register_ConditionalCompare_Register_32bit_CCMN,
  DataProcessing_Register_ConditionalCompare_Register_32bit_CCMP,
  DataProcessing_Register_ConditionalCompare_Register_64bit_CCMN,
  DataProcessing_Register_ConditionalCompare_Register_64bit_CCMP,

  DataProcessing_Register_ConfitionalCompare_Immediate,

  DataProcessing_Register_ConditionalCompare_Immediate_32bit_CCMN,
  DataProcessing_Register_ConditionalCompare_Immediate_32bit_CCMP,
  DataProcessing_Register_ConditionalCompare_Immediate_64bit_CCMN,
  DataProcessing_Register_ConditionalCompare_Immediate_64bit_CCMP,

  DataProcessing_Register_ConditionalSelect_32bit_CSEL,
  DataProcessing_Register_ConditionalSelect_32bit_CSINC,
  DataProcessing_Register_ConditionalSelect_32bit_CSINV,
  DataProcessing_Register_ConditionalSelect_32bit_CSNEG,
  DataProcessing_Register_ConditionalSelect_64bit_CSEL,
  DataProcessing_Register_ConditionalSelect_64bit_CSINC,
  DataProcessing_Register_ConditionalSelect_64bit_CSINV,
  DataProcessing_Register_ConditionalSelect_64bit_CSNEG,

  DataProcessing_Register_DataProccessing_3s_32bit_MADD,
  DataProcessing_Register_DataProccessing_3s_32bit_MSUB,
  DataProcessing_Register_DataProccessing_3s_64bit_MADD,
  DataProcessing_Register_DataProccessing_3s_64bit_MSUB,
  DataProcessing_Register_DataProccessing_3s_SMADDL,
  DataProcessing_Register_DataProccessing_3s_SMSUBL,
  DataProcessing_Register_DataProccessing_3s_SMULH,
  DataProcessing_Register_DataProccessing_3s_UMADDL,
  DataProcessing_Register_DataProccessing_3s_UMSUBL,
  DataProcessing_Register_DataProccessing_3s_UMULH,

  // DataProcessing_ScalarFloat and SIMD
  DataProcessing_ScalarFloat_or_SIMD,
  LAST
};

uint32_t mainInst;

inline bool is1(uint32_t loc)
{
  return mainInst & (1 << loc);
}

struct op_range
{
  int start = 0;
  int end = 0;
};

inline int gr(op_range r, int index)
{
  return r.end - index;
}

bool masking(op_range r, const char *mask)
{
  int len = 1 + r.end - r.start;
  bool b = true;
  for (int i = 0; i < len; ++i)
  {
    switch (mask[i])
    {
    case '1':
      b = b && is1(gr(r, i));
      break;
    case '0':
      b = b && !is1(gr(r, i));
      break;
    case '>':
      return b;
    }

    if (b == false)
      return false;
  }

  return true;
}

bool isp(int loc, char bit)
{
  switch (bit)
  {
  case '1':
    return is1(loc);
  }
  return !is1(loc);
}

struct ccstr
{
  char text[124] = {};
  int up = 0;
};

void push_text(ccstr *str, const char *text)
{
  int len = strlen(text);
  for (int i = 0; i < len; ++i)
  {
    str->text[str->up] = text[i];
    str->up += 1;
  }
  str->text[str->up] = 0;
}

struct inst_info
{
  // mnimonic
  char mnimonic[16] = {};

  // param_array
  int param_len = 0;
  uint32_t params[16] = {};

  // assembly code text
  ccstr asm_text;

  // emulate execute function pointer(uint32* param, int mod)
  // mod -
  // 0 : emulate / 1 : to machine code / 2 : to assembly
  void (*func)(inst_info *, int);

  // inst type
  op_type inst_type;

  // machine code
  uint32_t inst_data;
};

void Reserved_UDF_func(inst_info *ii, int mod)
{
  switch (mod)
  {
  case 0:
    break;
  case 1:
    break;
  case 2:
  {
    strcpy(ii->mnimonic, "UDF");
    ii->param_len = 1;
    ii->params[0] = getParam(ii->inst_data, {0, 15});
    push_text(&ii->asm_text, ii->mnimonic);
    push_text(&ii->asm_text, " #");
    push_text(&ii->asm_text, to_string(ii->params[0]).c_str());
  }
  break;
  }
}

uint32_t getParam(uint32_t inst, op_range r)
{
  uint32_t out = inst;
  int en = (31 - r.end);
  out = out << en;
  out = out >> en;
  out = out >> r.start;
  return out;
}

inst_info gii(op_type type)
{
  inst_info ii;
  ii.inst_type = type;
  ii.inst_data = mainInst;
  switch (ii.inst_type)
  {
  case op_type::Reserved_UDF:
    ii.func = Reserved_UDF_func;
    break;
  }

  ii.func(&ii, 2);

  return ii;
}

copn op0 = 31;
coprange op1 = {25, 28};

inst_info getOP_Reserved()
{
  static coprange sop0 = {29, 30};
  static coprange sop1 = {16, 24};
  if (masking(sop0, "00") && masking(sop1, "000000000"))
  {
    return gii(op_type::Reserved_UDF);
  }

  return gii(op_type::Undefine);
}

inst_info getOP_SME()
{
  static coprange sop0 = {29, 30};
  static coprange sop1 = {10, 24};
  static coprange sop2 = {2, 4};

  if (masking(sop0, "00"))
  {
    if (masking(sop1, "x10>") && masking(sop2, "x00"))
    {
      copn ssop0 = 24;
      copn ssop1 = 21;
      copn S = 4;
      if (!is1(ssop0) && !is1(ssop1))
      {
        if (!is1(S))
        {
          return gii(op_type::SME_FP_OuterProduct_32bit_FP32_FMOPA);
        }
        else
        {
          return gii(op_type::SME_FP_OuterProduct_32bit_FP32_FMOPS);
        }
      }
      if (is1(ssop0))
      {
        if (!is1(ssop1))
        {
          if (!is1(S))
          {
            return gii(op_type::SME_FP_OuterProduct_32bit_Widning_BF16_BFMOPA);
          }
          else
          {
            return gii(op_type::SME_FP_OuterProduct_32bit_Widning_BF16_BFMOPS);
          }
        }
        else
        {
          if (!is1(S))
          {
            return gii(op_type::SME_FP_OuterProduct_32bit_FP16_Widning_FMOPA);
          }
          else
          {
            return gii(op_type::SME_FP_OuterProduct_32bit_FP16_Widning_FMOPS);
          }
        }
      }
    }
    if (masking(sop1, "010>") && masking(sop2, "x10"))
    {
      // return gii(op_type::SME_2_Binary_OuterProduct_32bit);
      copn ssop0 = 21;
      copn S = 4;
      if (!is1(ssop0))
      {
        if (!is1(S))
        {
          return gii(op_type::SME_2_Binary_OuterProduct_32bit_BMOPA);
        }
        else
        {
          return gii(op_type::SME_2_Binary_OuterProduct_32bit_BMOPA);
        }
      }
    }
  }
  else if (masking(sop0, "01"))
  {
    if (masking(sop1, "x10>") && masking(sop2, "xx1"))
    {
      // return gii(op_type::SME_Integer_Outer_Product_32bit);
      copn ssop0 = 21;
      copn ssop1 = 3;
      copn S = 4;
      if (!is1(ssop0) && is1(ssop1))
      {
        copn u0 = 24;
        if (!is1(u0))
        {
          if (!is1(S))
          {
            return gii(op_type::SME_Integer_Outer_Product_32bit_Int16_2Way_SMOPA);
          }
          else
          {
            return gii(op_type::SME_Integer_Outer_Product_32bit_Int16_2Way_SMOPS);
          }
        }
        else
        {
          if (!is1(S))
          {
            return gii(op_type::SME_Integer_Outer_Product_32bit_Int16_2Way_UMOPA);
          }
          else
          {
            return gii(op_type::SME_Integer_Outer_Product_32bit_Int16_2Way_UMOPS);
          }
        }
      }
      if (!is1(ssop1))
      {
        copn u0 = 24;
        copn u1 = 21;
        constexpr op_type oparr[2][2][2] =
            {
                {{op_type::SME_Integer_Outer_Product_32bit_Int8_SMOPA,
                  op_type::SME_Integer_Outer_Product_32bit_Int8_SMOPS},
                 {op_type::SME_Integer_Outer_Product_32bit_Int8_SUMOPA,
                  op_type::SME_Integer_Outer_Product_32bit_Int8_SUMOPS}},
                {{op_type::SME_Integer_Outer_Product_32bit_Int8_USMOPA,
                  op_type::SME_Integer_Outer_Product_32bit_Int8_USMOPS},
                 {op_type::SME_Integer_Outer_Product_32bit_Int8_UMOPA,
                  op_type::SME_Integer_Outer_Product_32bit_Int8_UMOPS}}};
        int ind[3] = {
            is1(u0) ? 1 : 0,
            is1(u1) ? 1 : 0,
            is1(S) ? 1 : 0};
        return gii(oparr[ind[0]][ind[1]][ind[2]]);
      }
    }
    if (masking(sop1, "00>"))
    {
      // return gii(op_type::SME_2_MultiVector_Memory_Continguous);
      coprange ssop0 = {20, 22};
      copn ssop1 = 15;
      copn ssop2 = 1;
      if (masking(ssop0, "00x"))
      {
        if (!is1(ssop1))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 0;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LD1B,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LDNT1B},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LD1H,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LDNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LD1W,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LDNT1W},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LD1D,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_2Register_LDNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }

        if (is1(ssop1) && !is1(ssop2))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 0;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LD1B,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LDNT1B},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LD1H,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LDNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LD1W,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LDNT1W},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LD1D,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LDNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }
      }
      if (masking(ssop0, "01x"))
      {
        if (!is1(ssop1))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 0;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_ST1B,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_STNT1B},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_ST1H,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_STNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_ST1W,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_STNT1W},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_ST1D,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_2Register_STNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }

        if (is1(ssop1) && !is1(ssop2))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 0;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_ST1B,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_STNT1B},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_ST1H,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_STNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_ST1W,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_STNT1W},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_ST1D,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_sps_4Register_STNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }
      }
      if (masking(ssop0, "100"))
      {
        if (!is1(ssop1))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 0;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LD1B,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LDNT1B},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LD1H,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LDNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LD1W,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LDNT1W},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LD1D,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_spi_2Register_LDNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }

        if (is1(ssop1) && !is1(ssop2))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 0;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LD1B,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LDNT1B},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LD1H,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LDNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LD1W,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LDNT1W},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LD1D,
                    op_type::SME_2_MultiVector_Memory_Continguous_Load_sps_4Register_LDNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }
      }
      if (masking(ssop0, "110"))
      {
        if (!is1(ssop1))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 0;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_ST1B,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_STNT1B},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_ST1H,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_STNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_ST1W,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_STNT1W},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_ST1D,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_2Register_STNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }

        if (is1(ssop1) && !is1(ssop2))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 0;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_ST1B,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_STNT1B},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_ST1H,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_STNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_ST1W,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_STNT1W},
                   {op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_ST1D,
                    op_type::SME_2_MultiVector_Memory_Continguous_Store_spi_4Register_STNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }
      }
    }
    if (masking(sop1, "10>"))
    {
      // return gii(op_type::SME_2_MultiVector_Memory_Strided);
      coprange ssop0 = {20, 22};
      copn ssop1 = 15;
      copn ssop2 = 2;
      if (masking(ssop0, "00x"))
      {
        if (!is1(ssop1))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 3;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LD1B,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LDNT1B},
                   {op_type::SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LD1H,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LDNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LD1W,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LDNT1W},
                   {op_type::SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LD1D,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_sps_2Register_LDNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }

        if (is1(ssop1) && !is1(ssop2))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 3;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LD1B,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LDNT1B},
                   {op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LD1H,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LDNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LD1W,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LDNT1W},
                   {op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LD1D,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LDNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }
      }
      if (masking(ssop0, "01x"))
      {
        if (!is1(ssop1))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 3;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Strided_Store_sps_2Register_ST1B,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_sps_2Register_STNT1B},
                   {op_type::SME_2_MultiVector_Memory_Strided_Store_sps_2Register_ST1H,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_sps_2Register_STNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Strided_Store_sps_2Register_ST1W,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_sps_2Register_STNT1W},
                   {op_type::SME_2_MultiVector_Memory_Strided_Store_sps_2Register_ST1D,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_sps_2Register_STNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }

        if (is1(ssop1) && !is1(ssop2))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 3;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Strided_Store_sps_4Register_ST1B,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_sps_4Register_STNT1B},
                   {op_type::SME_2_MultiVector_Memory_Strided_Store_sps_4Register_ST1H,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_sps_4Register_STNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Strided_Store_sps_4Register_ST1W,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_sps_4Register_STNT1W},
                   {op_type::SME_2_MultiVector_Memory_Strided_Store_sps_4Register_ST1D,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_sps_4Register_STNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }
      }
      if (masking(ssop0, "100"))
      {
        if (!is1(ssop1))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 3;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LD1B,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LDNT1B},
                   {op_type::SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LD1H,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LDNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LD1W,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LDNT1W},
                   {op_type::SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LD1D,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_spi_2Register_LDNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }

        if (is1(ssop1) && !is1(ssop2))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 3;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LD1B,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LDNT1B},
                   {op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LD1H,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LDNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LD1W,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LDNT1W},
                   {op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LD1D,
                    op_type::SME_2_MultiVector_Memory_Strided_Load_sps_4Register_LDNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }
      }
      if (masking(ssop0, "110"))
      {
        if (!is1(ssop1))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 0;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Strided_Store_spi_2Register_ST1B,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_spi_2Register_STNT1B},
                   {op_type::SME_2_MultiVector_Memory_Strided_Store_spi_2Register_ST1H,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_spi_2Register_STNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Strided_Store_spi_2Register_ST1W,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_spi_2Register_STNT1W},
                   {op_type::SME_2_MultiVector_Memory_Strided_Store_spi_2Register_ST1D,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_spi_2Register_STNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }

        if (is1(ssop1) && !is1(ssop2))
        {
          copn msz0 = 14;
          copn msz1 = 13;
          copn N = 0;
          constexpr op_type oparr[2][2][2] =
              {
                  {{op_type::SME_2_MultiVector_Memory_Strided_Store_spi_4Register_ST1B,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_spi_4Register_STNT1B},
                   {op_type::SME_2_MultiVector_Memory_Strided_Store_spi_4Register_ST1H,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_spi_4Register_STNT1H}},
                  {{op_type::SME_2_MultiVector_Memory_Strided_Store_spi_4Register_ST1W,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_spi_4Register_STNT1W},
                   {op_type::SME_2_MultiVector_Memory_Strided_Store_spi_4Register_ST1D,
                    op_type::SME_2_MultiVector_Memory_Strided_Store_spi_4Register_STNT1D}}};
          int ind[3] = {
              is1(msz0) ? 1 : 0,
              is1(msz1) ? 1 : 0,
              is1(N) ? 1 : 0};
          return gii(oparr[ind[0]][ind[1]][ind[2]]);
        }
      }
    }
  }
  else if (masking(sop0, "10"))
  {
    if (masking(sop1, "0xx000x0>") && masking(sop2, "0xx"))
    {
      // return gii(op_type::SME_MoveIntoArray);
      coprange ssop0 = {22, 23};
      copn ssop1 = 18;
      coprange ssop2 = {15, 16};
      coprange ssop3 = {10, 12};
      coprange ssop4 = {5, 6};
      copn ssop5 = 3;
      if ((masking(ssop0, "00") && is1(ssop1)) && masking(ssop2, "00"))
      {
        if ((masking(ssop3, "010") && masking(ssop4, "x0")) && !is1(ssop5))
        {
          return gii(op_type::SME_MoveIntoArray_MOVA_2Register);
        }
        if ((masking(ssop3, "011") && masking(ssop4, "00")) && !is1(ssop5))
        {
          return gii(op_type::SME_MoveIntoArray_MOVA_4Register);
        }
      }

      if (!is1(ssop1))
      {
        coprange size = {22, 23};
        copn Q = 16;
        if (is1(Q))
        {
          if (masking(size, "11"))
          {
            return gii(op_type::SME_MoveIntoArray_MoveVectorToArray);
          }
        }
        else
        {
          return gii(op_type::SME_MoveIntoArray_MoveVectorToArray);
        }
      }
      else
      {
        if (masking(ssop2, "0x") && !is1(ssop5))
        {
          if (masking(ssop3, "000") && masking(ssop4, "x0"))
          {
            return gii(op_type::SME_MoveIntoArray_2_MoveVectorToTitle_2Register);
          }
          if (masking(ssop3, "001") && masking(ssop4, "00"))
          {
            coprange size = {22, 23};
            copn opec = 2;
            if (is1(opec))
            {
              if (masking(size, "11"))
              {
                return gii(op_type::SME_MoveIntoArray_2_MoveVectorToTitle_4Register);
              }
            }
            else
            {
              return gii(op_type::SME_MoveIntoArray_2_MoveVectorToTitle_4Register);
            }
          }
        }
      }
    }
    if (masking(sop1, "0xx000x1>"))
    {
      // return gii(op_type::SME_MoveFromArray);
      coprange ssop0 = {22, 23};
      copn ssop1 = 18;
      coprange ssop2 = {15, 16};
      coprange ssop3 = {10, 12};
      coprange ssop4 = {8, 9};
      coprange ssop5 = {0, 1};
      if ((masking(ssop0, "00") && is1(ssop1)) && (masking(ssop2, "00") && masking(ssop4, "00")))
      {
        if (masking(ssop3, "010") && masking(ssop5, "x0"))
        {
          return gii(op_type::SME_MoveFromArray_MOVA_2Register);
        }
        if (masking(ssop3, "011") && masking(ssop5, "00"))
        {
          return gii(op_type::SME_MoveFromArray_MOVA_4Register);
        }
      }
      if (!is1(ssop1) && masking(ssop4, "0x"))
      {
        coprange size = {22, 23};
        copn Q = 16;
        if (is1(Q))
        {
          if (masking(size, "11"))
          {
            return gii(op_type::SME_MoveFromArray_MoveArrayToVector);
          }
        }
        else
        {
          return gii(op_type::SME_MoveFromArray_MoveArrayToVector);
        }
      }
      if ((is1(ssop1) && masking(ssop2, "0x")) && masking(ssop4, "00"))
      {
        if (masking(ssop3, "000") && masking(ssop5, "x0"))
        {
          return gii(op_type::SME_MoveFromArray_2_MoveTitleToVector_2Register);
        }
        if (masking(ssop3, "001") && masking(ssop5, "00"))
        {
          coprange size = {22, 23};
          copn opec = 2;
          if (is1(opec))
          {
            if (masking(size, "11"))
            {
              return gii(op_type::SME_MoveFromArray_2_MoveTitleToVector_4Register);
            }
          }
          else
          {
            return gii(op_type::SME_MoveFromArray_2_MoveTitleToVector_4Register);
          }
        }
      }
    }
    if (masking(sop1, "0xx010>") && masking(sop2, "x0x"))
    {
      // return gii(op_type::SME_AddVectorToArray);
      copn ssop0 = 23;
      coprange ssop1 = {17, 18};
      copn ssop2 = 4;
      if ((is1(ssop0) && masking(ssop1, "00")) && !is1(ssop2))
      {
        copn _op = 22;
        copn V = 16;
        coprange opc2 = {0, 2};
        if (!is1(_op) && masking(opc2, "0xx"))
        {
          if (!is1(V))
          {
            return gii(op_type::SME_AddVectorToArray_ADDHA_FEAT_SME);
          }
          else
          {
            return gii(op_type::SME_AddVectorToArray_ADDVA_FEAT_SME);
          }
        }
        else
        {
          if (!is1(V))
          {
            return gii(op_type::SME_AddVectorToArray_ADDHA_FEAT_SME_I16I64);
          }
          else
          {
            return gii(op_type::SME_AddVectorToArray_ADDVA_FEAT_SME_I16I64);
          }
        }
      }
    }
    if (masking(sop1, "0000010>"))
    {
      coprange ssop0 = {8, 17};
      if (masking(ssop0, "0000000000"))
      {
        return gii(op_type::SME_Zero);
      }
    }
    if (masking(sop1, "0010010>"))
    {
      coprange ssop0 = {4, 17};
      coprange opc = {0, 3};
      if (masking(ssop0, "0000000000000") && masking(opc, "0001"))
      {
        return gii(op_type::SME_2_Zero_LookupTable);
      }
    }
    if (masking(sop1, "0010011>"))
    {
      copn ssop0 = 17;
      coprange ssop1 = {15, 16};
      coprange opc = {5, 11};
      if (masking(ssop1, "00") && masking(opc, "0011111"))
      {
        if (!is1(ssop0))
        {
          return gii(op_type::SME_2_Move_LookupTable_From_MOVT);
        }
        else
        {
          return gii(op_type::SME_2_Move_LookupTable_Into_MOVT);
        }
      }
    }
    if (masking(sop1, "01x001>"))
    {
      // return gii(op_type::SME_2_Expand_LookupTable_Continguous);
      copn ssop0 = 22;
      coprange ssop1 = {14, 15};
      coprange ssop2 = {0, 1};
      if ((!is1(ssop0) && masking(ssop1, "10")) && masking(ssop2, "00"))
      {
        coprange opc = {16, 18};
        coprange opc2 = {10, 11};
        if (masking(opc, "01x") && masking(opc2, "00"))
        {
          return gii(op_type::SME_2_Expand_LookupTable_Continguous_4Register_LUTI4);
        }
        if (masking(opc, "1xx") && masking(opc2, "00"))
        {
          return gii(op_type::SME_2_Expand_LookupTable_Continguous_4Register_LUTI2);
        }
      }
      if ((!is1(ssop0) && masking(ssop1, "x1")) && masking(ssop2, "x0"))
      {
        coprange opc = {15, 18};
        coprange opc2 = {10, 11};
        if (masking(opc, "01xx") && masking(opc2, "00"))
        {
          return gii(op_type::SME_2_Expand_LookupTable_Continguous_2Register_LUTI4);
        }
        if (masking(opc, "1xxx") && masking(opc2, "00"))
        {
          return gii(op_type::SME_2_Expand_LookupTable_Continguous_2Register_LUTI2);
        }
      }
      if (is1(ssop0))
      {
        coprange opc = {14, 18};
        coprange opc2 = {10, 11};
        if (masking(opc, "01xxx") && masking(opc2, "00"))
        {
          return gii(op_type::SME_2_Expand_LookupTable_Continguous_1Register_LUTI4);
        }
        if (masking(opc, "1xxxx") && masking(opc2, "00"))
        {
          return gii(op_type::SME_2_Expand_LookupTable_Continguous_1Register_LUTI2);
        }
      }
    }
    if (masking(sop1, "1xx00>"))
    {
      // return gii(op_type::SME_2_MultiVector_Indexed_1Register);
      coprange ssop0 = {22, 23};
      copn ssop1 = 12;
      copn ssop2 = 2;
      if (masking(ssop0, "00"))
      {
        coprange USop = {2, 4};
        if (masking(USop, "000"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_1Register_longMLA_32bit_SMLALL);
        }
        if (masking(USop, "001"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_1Register_longMLA_32bit_USMLALL);
        }
        if (masking(USop, "010"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_1Register_longMLA_32bit_SMLSLL);
        }
        if (masking(USop, "100"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_1Register_longMLA_32bit_UMLALL);
        }
        if (masking(USop, "101"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_1Register_longMLA_32bit_SUMLALL);
        }
        if (masking(USop, "110"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_1Register_longMLA_32bit_UMLSLL);
        }
      }
      if (masking(ssop0, "10"))
      {
        if (!is1(ssop1) && !is1(ssop2))
        {
          constexpr op_type oarr[2][2] = {
              {op_type::SME_2_MultiVector_Indexed_1Register_longMLA_64bit_SMLALL,
               op_type::SME_2_MultiVector_Indexed_1Register_longMLA_64bit_SMLSLL},
              {op_type::SME_2_MultiVector_Indexed_1Register_longMLA_64bit_UMLALL,
               op_type::SME_2_MultiVector_Indexed_1Register_longMLA_64bit_UMLSLL}};
          copn U = 4;
          copn S = 3;
          return gii(oarr[is1(U) ? 1 : 0][is1(S) ? 1 : 0]);
        }
        if (is1(ssop1))
        {
          constexpr op_type oarr[2][2] = {
              {op_type::SME_2_MultiVector_Indexed_1Register_longFMA_FMLAL,
               op_type::SME_2_MultiVector_Indexed_1Register_longFMA_FMLSL},
              {op_type::SME_2_MultiVector_Indexed_1Register_longFMA_BFMLAL,
               op_type::SME_2_MultiVector_Indexed_1Register_longFMA_BFMLSL}};
          copn U = 4;
          copn S = 3;
          return gii(oarr[is1(U) ? 1 : 0][is1(S) ? 1 : 0]);
        }
      }
      if (masking(ssop0, "11") && is1(ssop1))
      {
        constexpr op_type oarr[2][2] = {
            {op_type::SME_2_MultiVector_Indexed_1Register_longMLA_SMLAL,
             op_type::SME_2_MultiVector_Indexed_1Register_longMLA_SMLSL},
            {op_type::SME_2_MultiVector_Indexed_1Register_longMLA_UMLAL,
             op_type::SME_2_MultiVector_Indexed_1Register_longMLA_UMLSL}};
        copn U = 4;
        copn S = 3;
        return gii(oarr[is1(U) ? 1 : 0][is1(S) ? 1 : 0]);
      }
    }
    if (masking(sop1, "1xx01xxxx0>"))
    {
      // return gii(op_type::SME_2_MultiVector_Indexed_2Register);
      coprange ssop0 = {20, 21};
      coprange ssop1 = {11, 12};
      copn ssop2 = 5;
      if (masking(ssop0, "00") && masking(ssop1, "0x"))
      {
        coprange opus = {3, 5};
        if (masking(opus, "000"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_SMLALL);
        }
        if (masking(opus, "001"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_SMLSLL);
        }
        if (masking(opus, "010"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_UMLALL);
        }
        if (masking(opus, "011"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_UMLSLL);
        }
        if (masking(opus, "100"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_USMLALL);
        }
        if (masking(opus, "110"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_SUMLALL);
        }
      }
      if (masking(ssop0, "01"))
      {
        copn op = 12;
        coprange opc2 = {3, 5};
        if (!is1(op))
        {
          if (masking(opc2, "000"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_32bit_FMLA);
          }
          if (masking(opc2, "001"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_32bit_FVDOT);
          }
          if (masking(opc2, "010"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_32bit_FMLS);
          }
          if (masking(opc2, "011"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_32bit_BFVDOT);
          }
          if (masking(opc2, "100"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_32bit_SVDOT);
          }
          if (masking(opc2, "110"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_32bit_UVDOT);
          }
        }
        else
        {
          if (masking(opc2, "000"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_32bit_SDOT2);
          }
          if (masking(opc2, "001"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_32bit_FDOT);
          }
          if (masking(opc2, "010"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_32bit_UDOT);
          }
          if (masking(opc2, "011"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_32bit_BFDOT);
          }
          if (masking(opc2, "100"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_32bit_SDOT4);
          }
          if (masking(opc2, "101"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_32bit_USDOT);
          }
          if (masking(opc2, "110"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_32bit_UDOT);
          }
          if (masking(opc2, "111"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_32bit_SUDOT);
          }
        }
      }
      if (masking(ssop0, "10") && masking(ssop1, "00") && !is1(ssop2))
      {
        coprange us = {3, 4};
        if (masking(us, "00"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_SMLALL);
        }
        if (masking(us, "01"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_SMLSLL);
        }
        if (masking(us, "10"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_UMLALL);
        }
        if (masking(us, "11"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_llongMLA_ts_32bit_UMLSLL);
        }
      }
      if (masking(ssop0, "10") && masking(ssop1, "1x") && !is1(ssop2))
      {
        coprange us = {3, 4};
        if (masking(us, "00"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_longFMA_ts_FMLAL);
        }
        if (masking(us, "01"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_longFMA_ts_FMLSL);
        }
        if (masking(us, "10"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_longFMA_ts_BFMLAL);
        }
        if (masking(us, "11"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_longFMA_ts_BFMLSL);
        }
      }
      if (masking(ssop0, "11") && masking(ssop1, "00") && !is1(ssop2))
      {
        coprange us = {3, 4};
        if (masking(us, "00"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_64bit_FMLA);
        }
        if (masking(us, "01"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_64bit_SDOT);
        }
        if (masking(us, "10"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_64bit_FMLS);
        }
        if (masking(us, "11"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_Ternary_64bit_UDOT);
        }
      }
      if (masking(ssop0, "11") && masking(ssop1, "1x") && !is1(ssop2))
      {
        coprange us = {3, 4};
        if (masking(us, "00"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_longMLA_ts_SMLAL);
        }
        if (masking(us, "01"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_longMLA_ts_SMLSL);
        }
        if (masking(us, "10"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_longMLA_ts_UMLAL);
        }
        if (masking(us, "11"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_2Register_longMLA_ts_UMLSL);
        }
      }
    }
    if (masking(sop1, "1xx01xxxx1>"))
    {
      // return gii(op_type::SME_2_MultiVector_Indexed_4Register);
      coprange ssop0 = {22, 23};
      coprange ssop1 = {11, 12};
      coprange ssop2 = {5, 6};
      if ((masking(ssop0, "00") && masking(ssop1, "0x")) && masking(ssop2, "0x"))
      {
        coprange opus = {3, 5};
        if (masking(opus, "000"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_4Register_llongMLA_fs_32bit_SMLALL);
        }
        if (masking(opus, "001"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_4Register_llongMLA_fs_32bit_SMLSLL);
        }
        if (masking(opus, "010"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_4Register_llongMLA_fs_32bit_UMLALL);
        }
        if (masking(opus, "011"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_4Register_llongMLA_fs_32bit_UMLSLL);
        }
        if (masking(opus, "100"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_4Register_llongMLA_fs_32bit_USMLALL);
        }
        if (masking(opus, "110"))
        {
          return gii(op_type::SME_2_MultiVector_Indexed_4Register_llongMLA_fs_32bit_SUMLALL);
        }
      }
      if ((masking(ssop0, "01")) && masking(ssop2, "0x"))
      {
        copn _op = 12;
        coprange opc2 = {3, 5};
        if (!is1(_op))
        {
          if (masking(opc2, "000"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_32bit_FMLA);
          }
          if (masking(opc2, "010"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_32bit_FMLS);
          }
          if (masking(opc2, "100"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_32bit_SVDOT);
          }
          if (masking(opc2, "101"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_32bit_USVDOT);
          }
          if (masking(opc2, "110"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_32bit_UVDOT);
          }
          if (masking(opc2, "111"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_32bit_SUVDOT);
          }
        }
        else
        {
          if (masking(opc2, "000"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_32bit_SDOT2);
          }
          if (masking(opc2, "001"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_32bit_FDOT);
          }
          if (masking(opc2, "010"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_32bit_UDOT2);
          }
          if (masking(opc2, "011"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_32bit_BFDOT);
          }
          if (masking(opc2, "100"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_32bit_SDOT4);
          }
          if (masking(opc2, "101"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_32bit_USDOT);
          }
          if (masking(opc2, "110"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_32bit_UDOT4);
          }
          if (masking(opc2, "111"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_32bit_SUDOT);
          }
        }
      }
      if ((masking(ssop0, "10") && masking(ssop1, "00")) && masking(ssop2, "00"))
      {
        constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_Indexed_4Register_llongMLA_fs_64bit_SMLALL,
                                         op_type::SME_2_MultiVector_Indexed_4Register_llongMLA_fs_64bit_SMLSLL},
                                        {op_type::SME_2_MultiVector_Indexed_4Register_llongMLA_fs_64bit_UMLALL,
                                         op_type::SME_2_MultiVector_Indexed_4Register_llongMLA_fs_64bit_UMLSLL}};
        copn U = 4;
        copn S = 3;
        return gii(oarr[is1(U) ? 1 : 0][is1(S) ? 1 : 0]);
      }
      if ((masking(ssop0, "10") && masking(ssop1, "1x")) && masking(ssop2, "00"))
      {
        constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_Indexed_4Register_longFMA_fs_FMLAL,
                                         op_type::SME_2_MultiVector_Indexed_4Register_longFMA_fs_FMLSL},
                                        {op_type::SME_2_MultiVector_Indexed_4Register_longFMA_fs_BFMLAL,
                                         op_type::SME_2_MultiVector_Indexed_4Register_longFMA_fs_BFMLSL}};
        copn U = 4;
        copn S = 3;
        return gii(oarr[is1(U) ? 1 : 0][is1(S) ? 1 : 0]);
      }
      if ((masking(ssop0, "11") && masking(ssop1, "0x")) && masking(ssop2, "00"))
      {
        copn _op = 11;
        coprange opc2 = {3, 4};
        if (!is1(_op))
        {
          if (masking(opc2, "00"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_64bit_FMLA);
          }
          if (masking(opc2, "01"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_64bit_SDOT);
          }
          if (masking(opc2, "10"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_64bit_FMLS);
          }
          if (masking(opc2, "11"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_64bit_UDOT);
          }
        }
        else
        {
          if (masking(opc2, "01"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_64bit_SVDOT);
          }
          if (masking(opc2, "11"))
          {
            return gii(op_type::SME_2_MultiVector_Indexed_4Register_Ternary_64bit_UVDOT);
          }
        }
      }
      if ((masking(ssop0, "11") && masking(ssop1, "1x")) && masking(ssop2, "00"))
      {
        constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_Indexed_4Register_longMLA_fs_SMLAL,
                                         op_type::SME_2_MultiVector_Indexed_4Register_longMLA_fs_SMLSL},
                                        {op_type::SME_2_MultiVector_Indexed_4Register_longMLA_fs_UMLAL,
                                         op_type::SME_2_MultiVector_Indexed_4Register_longMLA_fs_UMLSL}};
        copn U = 4;
        copn S = 3;
        return gii(oarr[is1(U) ? 1 : 0][is1(S) ? 1 : 0]);
      }
    }
    if (masking(sop1, "1xx1xxxxx100>"))
    {
      coprange ssop0 = {16, 17};
      coprange ssop1 = {5, 6};
      coprange ssop2 = {0, 1};
      if ((masking(ssop0, "01") && masking(ssop1, "00")) && masking(ssop2, "00"))
      {
        return gii(op_type::SME_2_MultiVector_SVE_Select_SEL);
      }
      if ((masking(ssop0, "x0") && masking(ssop1, "x0")) && masking(ssop2, "x0"))
      {
        return gii(op_type::SME_2_MultiVector_SVE_Select_SEL);
      }
    }
    if (masking(sop1, "1xx1xxxxx110>"))
    {
      // return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary);
      coprange _op0 = {22, 23};
      coprange _op1 = {10, 12};
      coprange _op2 = {0, 1};
      if (masking(_op0, "00") && masking(_op1, "101"))
      {
        if (!is1(0))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_QuadwordsZIP_2Register_ZIP);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_QuadwordsZIP_2Register_UZP);
        }
      }
      if (masking(_op0, "11") && masking(_op1, "101"))
      {
        copn _op = 20;
        copn U = 5;
        if (!is1(_op))
        {
          if (!is1(U))
          {
            return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_2Register_SQRSHR);
          }
          else
          {
            return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_2Register_UQRSHR);
          }
        }
        else
        {
          if (!is1(U))
          {
            return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_2Register_SQRSHRU);
          }
        }
      }
      if ((masking(_op2, "x0") && masking(_op1, "000")) || (masking(_op2, "00") && masking(_op1, "010")))
      {
        return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_FCLAMP);
      }
      if (masking(_op1, "001"))
      {
        if (!is1(0))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_CLAMP_2Register_SCLAMP);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_CLAMP_2Register_UCLAMP);
        }
      }
      if (masking(_op1, "011") && masking(_op2, "0x"))
      {
        if (!is1(0))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_CLAMP_4Register_SCLAMP);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_CLAMP_4Register_UCLAMP);
        }
      }
      if (masking(_op1, "100"))
      {
        if (!is1(0))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_ZIP_2Register_ZIP);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_ZIP_2Register_UZP);
        }
      }
      if (masking(_op1, "11x"))
      {
        copn N = 10;
        coprange opU = {5, 6};
        if (!is1(N))
        {
          if (masking(opU, "00"))
          {
            return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_4Register_SQRSHR);
          }
          if (masking(opU, "01"))
          {
            return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_4Register_UQRSHR);
          }
          if (masking(opU, "10"))
          {
            return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_4Register_SQRSHRU);
          }
        }
        else
        {
          if (masking(opU, "00"))
          {
            return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_4Register_SQRSHRN);
          }
          if (masking(opU, "01"))
          {
            return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_4Register_UQRSHRN);
          }
          if (masking(opU, "10"))
          {
            return gii(op_type::SME_2_MultiVector_SVE_Constructive_Binary_SaturatingShiftRight_4Register_SQRSHRUN);
          }
        }
      }
    }
    if (masking(sop1, "1xx1xxxxx111000"))
    {
      // return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary);
      coprange _op0 = {22, 23};
      coprange _op1 = {16, 20};
      coprange _op2 = {5, 6};
      coprange _op3 = {0, 1};
      copn U = 5;
      if ((masking(_op0, "00") && masking(_op1, "00001")) && (masking(_op3, "x0")))
      {
        if (!is1(U))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_FPToIntConvert_2Register_FCVTZS);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_FPToIntConvert_2Register_FCVTZU);
        }
      }
      if ((masking(_op0, "00") && masking(_op1, "00010")) && (masking(_op3, "x0")))
      {
        if (!is1(U))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_IntToFP_2Register_SCVTF);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_IntToFP_2Register_UCVTF);
        }
      }
      if ((masking(_op0, "00") && masking(_op1, "10001")) && (masking(_op2, "0x") && masking(_op3, "00")))
      {
        if (!is1(U))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_FPToIntConvert_4Register_FCVTZS);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_FPToIntConvert_4Register_FCVTZU);
        }
      }
      if ((masking(_op0, "00") && masking(_op1, "10010")) && (masking(_op2, "0x") && masking(_op3, "00")))
      {
        if (!is1(U))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_IntToFP_4Register_SCVTF);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_IntToFP_4Register_UCVTF);
        }
      }
      if ((masking(_op0, "00") && masking(_op1, "10111")) && (masking(_op2, "00") && masking(_op3, "x0")))
      {
        copn _op = 1;
        if (!is1(_op))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_ZIP_4Register_ZIP);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_ZIP_4Register_UZP);
        }
      }
      if (masking(_op0, "0x") && masking(_op1, "00000"))
      {
        copn _op = 22;
        copn N = 5;
        constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_SVE_Constructive_Unary_FPdownConvert_2Register_FCVT,
                                         op_type::SME_2_MultiVector_SVE_Constructive_Unary_FPdownConvert_2Register_FCVTN},
                                        {op_type::SME_2_MultiVector_SVE_Constructive_Unary_FPdownConvert_2Register_BFCVT,
                                         op_type::SME_2_MultiVector_SVE_Constructive_Unary_FPdownConvert_2Register_BFCVTN}};
        return gii(oarr[is1(_op) ? 1 : 0][is1(N) ? 1 : 0]);
      }
      if (masking(_op0, "0x") && masking(_op1, "00011"))
      {
        copn _op = 22;
        copn _U = 0;
        constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_SVE_Constructive_Unary_FPdownConvert_2Register_FCVT,
                                         op_type::SME_2_MultiVector_SVE_Constructive_Unary_FPdownConvert_2Register_FCVTN},
                                        {op_type::SME_2_MultiVector_SVE_Constructive_Unary_FPdownConvert_2Register_BFCVT,
                                         op_type::Undefine}};
        op_type ot = oarr[is1(_op) ? 1 : 0][is1(_U) ? 1 : 0];
        if (ot != op_type::Undefine)
        {
          return gii(ot);
        }
      }
      if (masking(_op1, "00101"))
      {
        copn _U = 0;
        op_type ot = (!is1(_U)) ? op_type::SME_2_MultiVector_SVE_Constructive_Unary_Unpack_2Register_SUNPK : op_type::SME_2_MultiVector_SVE_Constructive_Unary_Unpack_2Register_UUNPK;
        return gii(ot);
      }
      if ((masking(_op1, "01xxx")) && (masking(_op2, "x0") && masking(_op3, "x0")))
      {
        coprange size = {22, 23};
        coprange opc = {16, 18};
        if (masking(size, "10") && masking(opc, "000"))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_FRINT_2Register_FRINTN);
        }
        if (masking(size, "10") && masking(opc, "001"))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_FRINT_2Register_FRINTP);
        }
        if (masking(size, "10") && masking(opc, "010"))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_FRINT_2Register_FRINTM);
        }
        if (masking(size, "10") && masking(opc, "100"))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_FRINT_2Register_FRINTA);
        }
      }
      if (masking(_op1, "10011"))
      {
        copn _op = 22;
        coprange nu = {5, 6};
        if (!is1(_op))
        {
          if (masking(nu, "00"))
          {
            return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_IntDownConvert_4Register_SQCVT);
          }
          if (masking(nu, "01"))
          {
            return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_IntDownConvert_4Register_UQCVT);
          }
          if (masking(nu, "10"))
          {
            return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_IntDownConvert_4Register_SQCVTN);
          }
          if (masking(nu, "11"))
          {
            return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_IntDownConvert_4Register_UQCVTN);
          }
        }
        else
        {
          if (masking(nu, "00"))
          {
            return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_IntDownConvert_4Register_SQCVTU);
          }
          if (masking(nu, "10"))
          {
            return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_IntDownConvert_4Register_SQCVTUN);
          }
        }
      }
      if ((masking(_op1, "10101")) && (masking(_op2, "x0") && masking(_op3, "0x")))
      {
        copn _U = 0;
        if (!is1(_U))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_Unpack_4Register_SUNPK);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_Unpack_4Register_UUNPK);
        }
      }
      if ((masking(_op1, "10110")) && (masking(_op2, "00") && masking(_op3, "x0")))
      {
        copn _op = 1;
        if (!is1(_op))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_ZIP_4Register_ZIP);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_ZIP_4Register_UZP);
        }
      }
      if ((masking(_op1, "11xxx")) && (masking(_op2, "00") && masking(_op3, "00")))
      {
        coprange size = {22, 23};
        coprange opc = {16, 18};
        if (masking(size, "10") && masking(opc, "000"))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_FRINT_4Register_FRINTN);
        }
        if (masking(size, "10") && masking(opc, "001"))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_FRINT_4Register_FRINTP);
        }
        if (masking(size, "10") && masking(opc, "010"))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_FRINT_4Register_FRINTM);
        }
        if (masking(size, "10") && masking(opc, "100"))
        {
          return gii(op_type::SME_2_MultiVector_SVE_Constructive_Unary_FRINT_4Register_FRINTA);
        }
      }
    }
    if (masking(sop1, "1xx1xxxx010110x"))
    {
      // return gii(op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_2Register);
      coprange _op0op1 = {5, 10};
      copn _op2 = 0;
      if (masking(_op0op1, "00000x"))
      {
        constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_IntMinMax_SMAX,
                                         op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_IntMinMax_UMAX},
                                        {op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_IntMinMax_SMIN,
                                         op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_IntMinMax_UMIN}};
        copn _op = 5;
        copn _U = 0;
        return gii(oarr[is1(_op) ? 1 : 0][is1(_U) ? 1 : 0]);
      }
      if (masking(_op0op1, "00100x"))
      {
        constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_FPMinMax_FMAX,
                                         op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_FPMinMax_FMIN},
                                        {op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_FPMinMax_FMAXNM,
                                         op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_FPMinMax_FMINNM}};
        copn _op = 5;
        copn _o2 = 0;
        return gii(oarr[is1(_op) ? 1 : 0][is1(_o2) ? 1 : 0]);
      }
      if (masking(_op0op1, "010xxx"))
      {
        coprange opc = {5, 7};
        copn _U = 0;
        if (masking(opc, "001") && !is1(_U))
        {
          return gii(op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_Shift_SRSHL);
        }
        if (masking(opc, "001") && is1(_U))
        {
          return gii(op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_Shift_URSHL);
        }
      }
      if (masking(_op0op1, "10000x") && is1(_op2))
      {
        return gii(op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_2Register_SQDMULH);
      }
    }
    if (masking(sop1, "1xx1xxxx010111x"))
    {
      // return gii(op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_4Register,inst);
      coprange _op0op1 = {5, 10};
      copn _op2 = 0;
      if (masking(_op0op1, "00000x"))
      {
        constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_IntMinMax_SMAX,
                                         op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_IntMinMax_UMAX},
                                        {op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_IntMinMax_SMIN,
                                         op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_IntMinMax_UMIN}};
        copn _op = 5;
        copn _U = 0;
        return gii(oarr[is1(_op) ? 1 : 0][is1(_U) ? 1 : 0]);
      }
      if (masking(_op0op1, "00100x"))
      {
        constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_FPMinMax_FMAX,
                                         op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_FPMinMax_FMIN},
                                        {op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_FPMinMax_FMAXNM,
                                         op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_FPMinMax_FMINNM}};
        copn _op = 5;
        copn _o2 = 0;
        return gii(oarr[is1(_op) ? 1 : 0][is1(_o2) ? 1 : 0]);
      }
      if (masking(_op0op1, "010xxx"))
      {
        coprange opc = {5, 7};
        copn _U = 0;
        if (masking(opc, "001") && !is1(_U))
        {
          return gii(op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_Shift_SRSHL);
        }
        if (masking(opc, "001") && is1(_U))
        {
          return gii(op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_Shift_URSHL);
        }
      }
      if (masking(_op0op1, "10000x") && is1(_op2))
      {
        return gii(op_type::SME_2_MultiVector_MultiVector_SVE_Destructive_4Register_SQDMULH);
      }
    }
    if (masking(sop1, "1xx10xxx010100x"))
    {
      // return gii(op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register);
      coprange _op0op1 = {5, 10};
      copn _op2 = 0;
      if (masking(_op0op1, "00000x"))
      {
        constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_IntMinMax_SMAX,
                                         op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_IntMinMax_SMIN},
                                        {op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_IntMinMax_UMAX,
                                         op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_IntMinMax_UMIN}};
        copn _op = 5;
        copn _U = 0;
        return gii(oarr[is1(_op) ? 1 : 0][is1(_U) ? 1 : 0]);
      }
      if (masking(_op0op1, "00100x"))
      {
        constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_FPMinMax_FMAX,
                                         op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_FPMinMax_FMIN},
                                        {op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_FPMinMax_FMAXNM,
                                         op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_FPMinMax_FMINNM}};
        copn _op = 5;
        copn _o2 = 0;
        return gii(oarr[is1(_op) ? 1 : 0][is1(_o2) ? 1 : 0]);
      }
      if (masking(_op0op1, "010xxx"))
      {
        coprange opc = {5, 7};
        copn _U = 0;
        if (masking(opc, "001") && !is1(_U))
        {
          return gii(op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_Shift_SRSHL);
        }
        if (masking(opc, "001") && is1(_U))
        {
          return gii(op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_Shift_URSHL);
        }
      }
      if (masking(_op0op1, "011000"))
      {
        return gii(op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_ADD);
      }
      if (masking(_op0op1, "100000") && !is1(_op2))
      {
        return gii(op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_2Register_SQDMULH);
      }
    }
    if (masking(sop1, "1xx10xxx010101x"))
    {
      // return gii(op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register);
      coprange _op0op1 = {5, 10};
      copn _op2 = 0;
      if (masking(_op0op1, "00000x"))
      {
        constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_IntMinMax_SMAX,
                                         op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_IntMinMax_SMIN},
                                        {op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_IntMinMax_UMAX,
                                         op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_IntMinMax_UMIN}};
        copn _op = 5;
        copn _U = 0;
        return gii(oarr[is1(_op) ? 1 : 0][is1(_U) ? 1 : 0]);
      }
      if (masking(_op0op1, "00100x"))
      {
        constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_FPMinMax_FMAX,
                                         op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_FPMinMax_FMIN},
                                        {op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_FPMinMax_FMAXNM,
                                         op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_FPMinMax_FMINNM}};
        copn _op = 5;
        copn _o2 = 0;
        return gii(oarr[is1(_op) ? 1 : 0][is1(_o2) ? 1 : 0]);
      }
      if (masking(_op0op1, "010xxx"))
      {
        coprange opc = {5, 7};
        copn _U = 0;
        if (masking(opc, "001") && !is1(_U))
        {
          return gii(op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_Shift_SRSHL);
        }
        if (masking(opc, "001") && is1(_U))
        {
          return gii(op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_Shift_URSHL);
        }
      }
      if (masking(_op0op1, "011000"))
      {
        return gii(op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_ADD);
      }
      if (masking(_op0op1, "100000") && !is1(_op2))
      {
        return gii(op_type::SME_2_MultiVector_MultiAndSingleVector_SVE_Destructive_4Register_SQDMULH);
      }
    }
    if (masking(sop1, "10x1xxxxx0>"))
    {
      // return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors);
      copn _op0 = 22;
      copn _op1 = 20;
      coprange _op2 = {10, 12};
      coprange _op3 = {1, 4};
      if (!is1(_op0) && !is1(_op1))
      {
        // 00
        if (masking(_op2, "010") && masking(_op3, "xx0x"))
        {
          copn _op = 4;
          copn S = 3;
          constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_ts_FMLAL,
                                           op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_ts_FMLSL},
                                          {op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_ts_BFMLAL,
                                           op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_ts_BFMLSL}};
          return gii(oarr[is1(_op) ? 1 : 0][is1(S) ? 1 : 0]);
        }
        if (masking(_op2, "011"))
        {
          copn _op = 4;
          copn S = 3;
          constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longFMA_os_FMLAL,
                                           op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longFMA_os_FMLSL},
                                          {op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longFMA_os_BFMLAL,
                                           op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longFMA_os_BFMLSL}};
          return gii(oarr[is1(_op) ? 1 : 0][is1(S) ? 1 : 0]);
        }
        if (masking(_op2, "101") && masking(_op3, "x1xx"))
        {
          copn U = 4;
          if (!is1(U))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_smm_DotProduct_2Register_USDOT);
          }
          else
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_smm_DotProduct_2Register_SUDOT);
          }
        }
      }
      if (!is1(_op0) && is1(_op1))
      {
        // 01
        if (masking(_op2, "010") && masking(_op3, "xx0x"))
        {
          copn _op = 4;
          copn S = 3;
          constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_fs_FMLAL,
                                           op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_fs_FMLSL},
                                          {op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_fs_BFMLAL,
                                           op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longFMA_fs_BFMLSL}};
          return gii(oarr[is1(_op) ? 1 : 0][is1(S) ? 1 : 0]);
        }
        if (masking(_op2, "101") && masking(_op3, "x1xx"))
        {
          copn U = 4;
          if (!is1(U))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_smm_DotProduct_4Register_USDOT);
          }
          else
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_smm_DotProduct_4Register_SUDOT);
          }
        }
      }
      if (is1(_op0) && !is1(_op1))
      {
        // 10
        if (masking(_op2, "010") && masking(_op3, "xx0x"))
        {
          copn _op = 4;
          copn S = 3;
          constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_ts_SMLAL,
                                           op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_ts_SMLSL},
                                          {op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_ts_UMLAL,
                                           op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_ts_UMLSL}};
          return gii(oarr[is1(_op) ? 1 : 0][is1(S) ? 1 : 0]);
        }
        if (masking(_op2, "011"))
        {
          copn _op = 4;
          copn S = 3;
          constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longMLA_os_SMLAL,
                                           op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longMLA_os_SMLSL},
                                          {op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longMLA_os_UMLAL,
                                           op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_longMLA_os_UMLSL}};
          return gii(oarr[is1(_op) ? 1 : 0][is1(S) ? 1 : 0]);
        }
        if (masking(_op2, "101") && masking(_op3, "x1xx"))
        {
          copn U = 4;
          if (!is1(U))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_smtw_DotProduct_2Register_SDOT);
          }
          else
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_smtw_DotProduct_2Register_UDOT);
          }
        }
      }
      if (is1(_op0) && is1(_op1))
      {
        // 11
        if (masking(_op2, "010") && masking(_op3, "xx0x"))
        {
          copn _op = 4;
          copn S = 3;
          constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_fs_SMLAL,
                                           op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_fs_SMLSL},
                                          {op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_fs_UMLAL,
                                           op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_longMLA_fs_UMLSL}};
          return gii(oarr[is1(_op) ? 1 : 0][is1(S) ? 1 : 0]);
        }
        if (masking(_op2, "101") && masking(_op3, "x1xx"))
        {
          copn U = 4;
          if (!is1(U))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_smtw_DotProduct_4Register_SDOT);
          }
          else
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_smtw_DotProduct_4Register_UDOT);
          }
        }
      }

      if (!is1(_op1))
      {
        if (masking(_op2, "000") && masking(_op3, "xxx0"))
        {
          copn sz = 22;
          coprange usop = {2, 4};
          if (masking(usop, "000"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_ts_SMLALL);
          }
          if (masking(usop, "010"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_ts_SMLSLL);
          }
          if (masking(usop, "100"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_ts_UMLALL);
          }
          if (masking(usop, "110"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_ts_UMLSLL);
          }
          if (!is1(sz) && masking(usop, "001"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_ts_USMLALL);
          }
          if (!is1(sz) && masking(usop, "101"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_ts_SUMLALL);
          }
        }
        if (masking(_op2, "001"))
        {
          copn sz = 22;
          coprange usop = {2, 4};
          if (masking(usop, "000"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_llongFMA_os_SMLALL);
          }
          if (masking(usop, "010"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_llongFMA_os_SMLSLL);
          }
          if (masking(usop, "100"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_llongFMA_os_UMLALL);
          }
          if (masking(usop, "110"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_llongFMA_os_UMLSLL);
          }
          if (!is1(sz) && masking(usop, "001"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_masv_llongFMA_os_USMLALL);
          }
        }
        if (masking(_op2, "100"))
        {
          copn _op = 22;
          coprange opc2 = {3, 4};
          if (!is1(_op))
          {
            if (masking(opc2, "00"))
            {
              return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_FP_DotProduct_2Register_FDOT);
            }
            if (masking(opc2, "01"))
            {
              return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_FP_DotProduct_2Register_BFDOT);
            }
          }
        }
        if (masking(_op2, "101") && masking(_op3, "x0xx"))
        {
          copn U = 4;
          if (!is1(U))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_smfw_DotProduct_2Register_SDOT);
          }
          else
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_smfw_DotProduct_2Register_UDOT);
          }
        }
        if (masking(_op2, "110") && masking(_op3, "0xxx"))
        {
          copn S = 3;
          if (!is1(S))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_FP_2Register_FMLA);
          }
          else
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_FP_2Register_FMLS);
          }
        }
        if (masking(_op2, "110") && masking(_op3, "1xxx"))
        {
          copn S = 3;
          if (!is1(S))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_Int_2Register_ADD);
          }
          else
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_Int_2Register_SUB);
          }
        }
      }
      else
      {
        if (masking(_op2, "000") && masking(_op3, "xxx0"))
        {
          copn sz = 22;
          coprange usop = {2, 4};
          if (masking(usop, "000"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_fs_SMLALL);
          }
          if (masking(usop, "010"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_fs_SMLSLL);
          }
          if (masking(usop, "100"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_fs_UMLALL);
          }
          if (masking(usop, "110"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_fs_UMLSLL);
          }
          if (!is1(sz) && masking(usop, "001"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_fs_USMLALL);
          }
          if (!is1(sz) && masking(usop, "101"))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_llongMLA_fs_SUMLALL);
          }
        }
        if (masking(_op2, "100"))
        {
          copn _op = 22;
          coprange opc2 = {3, 4};
          if (!is1(_op))
          {
            if (masking(opc2, "00"))
            {
              return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_FP_DotProduct_4Register_FDOT);
            }
            if (masking(opc2, "01"))
            {
              return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_FP_DotProduct_4Register_BFDOT);
            }
          }
        }
        if (masking(_op2, "101") && masking(_op3, "x0xx"))
        {
          copn U = 4;
          if (!is1(U))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_smfw_DotProduct_4Register_SDOT);
          }
          else
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_smfw_DotProduct_4Register_UDOT);
          }
        }
        if (masking(_op2, "110") && masking(_op3, "0xxx"))
        {
          copn S = 3;
          if (!is1(S))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_FP_4Register_FMLA);
          }
          else
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_FP_4Register_FMLS);
          }
        }
        if (masking(_op2, "110") && masking(_op3, "1xxx"))
        {
          copn S = 3;
          if (!is1(S))
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_Int_4Register_ADD);
          }
          else
          {
            return gii(op_type::SME_2_MultiVector_MultiAndSingle_ArrayVectors_sm_Ternary_Int_4Register_SUB);
          }
        }
      }
    }
    if (masking(sop1, "11x1xxxx00>"))
    {
      // return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register);
      copn _op0 = 22;
      coprange _op1 = {17, 20};
      coprange _op2 = {10, 12};
      coprange _op3 = {1, 5};
      if (!is1(_op0))
      {
        if (masking(_op2, "010") && masking(_op3, "0xx0x"))
        {
          copn _op = 4;
          copn S = 3;
          constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longFMA_ts_FMLAL,
                                           op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longFMA_ts_FMLSL},
                                          {op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longFMA_ts_BFMLAL,
                                           op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longFMA_ts_BFMLSL}};
          return gii(oarr[is1(_op) ? 1 : 0][is1(S) ? 1 : 0]);
        }
        if (masking(_op2, "101") && masking(_op3, "001xx"))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_USDOT);
        }
      }
      else
      {
        if (masking(_op2, "010") && masking(_op3, "0xx0x"))
        {
          copn _U = 4;
          copn S = 3;
          constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longMLA_ts_SMLAL,
                                           op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longMLA_ts_SMLSL},
                                          {op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longMLA_ts_UMLAL,
                                           op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_longMLA_ts_UMLSL}};
          return gii(oarr[is1(_U) ? 1 : 0][is1(S) ? 1 : 0]);
        }
        if (masking(_op2, "101") && masking(_op3, "0x1xx"))
        {
          copn U = 4;
          if (!is1(U))
          {
            return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvtw_DotProduct_SDOT);
          }
          else
          {
            return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvtw_DotProduct_UDOT);
          }
        }
      }

      if (masking(_op1, "0000"))
      {
        if (masking(_op2, "111") && masking(_op3, "00xxx"))
        {
          copn S = 3;
          if (!is1(S))
          {
            return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvb_FP_FADD);
          }
          else
          {
            return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvb_FP_FSUB);
          }
        }
        if (masking(_op2, "111") && masking(_op3, "01xxx"))
        {
          copn S = 3;
          if (!is1(S))
          {
            return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvb_Int_ADD);
          }
          else
          {
            return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvb_Int_SUB);
          }
        }
      }

      if (masking(_op2, "000") && masking(_op3, "0xxx0"))
      {
        copn sz = 22;
        coprange usop = {2, 4};
        if (masking(usop, "000"))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_llongMLA_ts_SMLALL);
        }
        if (masking(usop, "010"))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_llongMLA_ts_SMLSLL);
        }
        if (masking(usop, "100"))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_llongMLA_ts_UMLALL);
        }
        if (masking(usop, "110"))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_llongMLA_ts_UMLSLL);
        }
        if (!is1(sz) && masking(usop, "001"))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_llongMLA_ts_USMLALL);
        }
      }
      if (masking(_op2, "100") && masking(_op3, "xx0xx"))
      {
        copn _op = 22;
        coprange opc2 = {4, 5};
        if (!is1(_op))
        {
          if (masking(opc2, "00"))
          {
            return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_FP_DotProduct_FDOT);
          }
          if (masking(opc2, "01"))
          {
            return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_FP_DotProduct_BFDOT);
          }
        }
      }
      if (masking(_op2, "101") && masking(_op3, "0x0xx"))
      {
        copn U = 4;
        if (!is1(U))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvfw_DotProduct_SDOT);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mvfw_DotProduct_UDOT);
        }
      }
      if (masking(_op2, "110") && masking(_op3, "00xxx"))
      {
        copn S = 3;
        if (!is1(S))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_Ternary_FP_FMLA);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_Ternary_FP_FMLS);
        }
      }
      if (masking(_op2, "110") && masking(_op3, "01xxx"))
      {
        copn S = 3;
        if (!is1(S))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_Ternary_Int_ADD);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_2Register_mv_Ternary_Int_SUB);
        }
      }
    }
    if (masking(sop1, "11x1xxxx10>"))
    {
      // return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register);
      copn _op0 = 22;
      coprange _op1 = {18, 20};
      copn _op2 = 17;
      coprange _op3 = {10, 12};
      coprange _op4 = {5, 6};
      coprange _op5 = {1, 4};
      if (!is1(_op0))
      {
        if (!is1(_op2))
        {
          if ((masking(_op3, "010") && masking(_op4, "00")) && masking(_op5, "xx0x"))
          {
            //
            copn _op = 4;
            copn S = 3;
            constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longFMA_fs_FMLAL,
                                             op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longFMA_fs_FMLSL},
                                            {op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longFMA_fs_BFMLAL,
                                             op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longFMA_fs_BFMLSL}};
            return gii(oarr[is1(_op) ? 1 : 0][is1(S) ? 1 : 0]);
          }
          if ((masking(_op3, "101") && masking(_op4, "00")) && masking(_op5, "01xx"))
          {
            //
            return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_USDOT);
          }
        }
      }
      else
      {
        if (!is1(_op2))
        {
          if ((masking(_op3, "010") && masking(_op4, "00")) && masking(_op5, "xx0x"))
          {
            //
            copn _U = 4;
            copn S = 3;
            constexpr op_type oarr[2][2] = {{op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longMLA_fs_SMLAL,
                                             op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longMLA_fs_SMLSL},
                                            {op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longMLA_fs_UMLAL,
                                             op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_longMLA_fs_UMLSL}};
            return gii(oarr[is1(_U) ? 1 : 0][is1(S) ? 1 : 0]);
          }
          if ((masking(_op3, "101") && masking(_op4, "00")) && masking(_op5, "x1xx"))
          {
            //
            copn U = 4;
            if (!is1(U))
            {
              return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvtw_DotProduct_SDOT);
            }
            else
            {
              return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvtw_DotProduct_UDOT);
            }
          }
        }
      }

      if ((masking(_op1, "000") && !is1(_op2)) && ((masking(_op3, "111") && masking(_op4, "00")) && masking(_op5, "0xxx")))
      {
        copn S = 3;
        if (!is1(S))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvb_FP_FADD);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvb_FP_FSUB);
        }
      }
      if ((masking(_op1, "000") && !is1(_op2)) && ((masking(_op3, "111") && masking(_op4, "00")) && masking(_op5, "1xxx")))
      {
        copn S = 3;
        if (!is1(S))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvb_Int_ADD);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvb_Int_SUB);
        }
      }
      if ((!is1(_op2)) && ((masking(_op3, "000") && masking(_op4, "00")) && masking(_op5, "xxx0")))
      {
        copn sz = 22;
        coprange usop = {2, 4};
        if (masking(usop, "000"))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_llongMLA_fs_SMLALL);
        }
        if (masking(usop, "010"))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_llongMLA_fs_SMLSLL);
        }
        if (masking(usop, "100"))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_llongMLA_fs_UMLALL);
        }
        if (masking(usop, "110"))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_llongMLA_fs_UMLSLL);
        }
        if (!is1(sz) && masking(usop, "001"))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_llongMLA_fs_USMLALL);
        }
      }
      if ((!is1(_op2)) && ((masking(_op3, "100") && masking(_op4, "0x")) && masking(_op5, "x0xx")))
      {
        copn _op = 22;
        coprange opc2 = {4, 5};
        if (!is1(_op))
        {
          if (masking(opc2, "00"))
          {
            return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_FP_DotProduct_FDOT);
          }
          if (masking(opc2, "01"))
          {
            return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_FP_DotProduct_BFDOT);
          }
        }
      }
      if ((!is1(_op2)) && ((masking(_op3, "101") && masking(_op4, "00")) && masking(_op5, "x0xx")))
      {
        copn U = 4;
        if (!is1(U))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvfw_DotProduct_SDOT);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mvfw_DotProduct_UDOT);
        }
      }
      if ((!is1(_op2)) && ((masking(_op3, "110") && masking(_op4, "00")) && masking(_op5, "0xxx")))
      {
        copn S = 3;
        if (!is1(S))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_Ternary_FP_FMLA);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_Ternary_FP_FMLS);
        }
      }
      if ((!is1(_op2)) && ((masking(_op3, "110") && masking(_op4, "00")) && masking(_op5, "1xxx")))
      {
        copn S = 3;
        if (!is1(S))
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_Ternary_Int_ADD);
        }
        else
        {
          return gii(op_type::SME_2_MultiVector_Multiple_ArrayVectors_4Register_mv_Ternary_Int_SUB);
        }
      }
    }
  }
  else if (masking(sop0, "11"))
  {
    // return gii(op_type::SME_Memory);
    coprange _op0123 = {10, 24};
    coprange _op4 = {2, 4};
    if (masking(_op0123, "0xx0>") && masking(_op4, "0xx"))
    {
      coprange msz = {22, 23};
      if (masking(msz, "00"))
      {
        return gii(op_type::SME_Memory_Load_ArrayVector_LD1B);
      }
      if (masking(msz, "01"))
      {
        return gii(op_type::SME_Memory_Load_ArrayVector_LD1H);
      }
      if (masking(msz, "10"))
      {
        return gii(op_type::SME_Memory_Load_ArrayVector_LD1W);
      }
      if (masking(msz, "11"))
      {
        return gii(op_type::SME_Memory_Load_ArrayVector_LD1D);
      }
    }
    if (masking(_op0123, "0xx1>") && masking(_op4, "0xx"))
    {
      coprange msz = {22, 23};
      if (masking(msz, "00"))
      {
        return gii(op_type::SME_Memory_Store_ArrayVector_ST1B);
      }
      if (masking(msz, "01"))
      {
        return gii(op_type::SME_Memory_Store_ArrayVector_ST1H);
      }
      if (masking(msz, "10"))
      {
        return gii(op_type::SME_Memory_Store_ArrayVector_ST1W);
      }
      if (masking(msz, "11"))
      {
        return gii(op_type::SME_Memory_Store_ArrayVector_ST1D);
      }
    }
    if (masking(_op0123, "100x000000xx000") && masking(_op4, "0xx"))
    {
      copn _op = 22;
      if (!is1(_op))
      {
        return gii(op_type::SME_Memory_SaveAndRestoreArray_LDR);
      }
      else
      {
        return gii(op_type::SME_Memory_SaveAndRestoreArray_STR);
      }
    }
    if (masking(_op0123, "100xxxxxx100000") && masking(_op4, "000"))
    {
      coprange opc = {16, 21};
      coprange opc2 = {0, 1};
      if (masking(opc, "011111") && masking(opc2, "00"))
      {
        return gii(op_type::SME_Memory_LookupTable_LoadOrStore_LDR);
      }
      if (masking(opc, "111111") && masking(opc2, "00"))
      {
        return gii(op_type::SME_Memory_LookupTable_LoadOrStore_STR);
      }
    }
    if (masking(_op0123, "1110>") && masking(_op4, "0xx"))
    {
      return gii(op_type::SME_Memory_LD1Q);
    }
    if (masking(_op0123, "1111>") && masking(_op4, "0xx"))
    {
      return gii(op_type::SME_Memory_ST1Q);
    }
  }

  if (masking(sop0, "0x"))
  {
    if (masking(sop1, "x11>"))
    {
      copn ssop0 = 29;
      copn ssop1 = 24;
      copn ssop2 = 21;
      if (is1(ssop0))
      {
        copn sssop0 = 4;
        if (is1(sssop0))
        {
          return gii(op_type::SME_OuterProduct_64bit_FP64_FMOPA);
        }
        else
        {
          return gii(op_type::SME_OuterProduct_64bit_FP64_FMOPS);
        }
      }
      if ((!is1(ssop0) && !is1(ssop1)) && !is1(ssop2))
      {
        copn u0 = 24;
        copn u1 = 21;
        copn S = 4;
        if (!is1(u0))
        {
          if (!is1(u1))
          {
            if (!is1(S))
            {
              return gii(op_type::SME_OuterProduct_64bit_Int16_FMOPA);
            }
            else
            {
              return gii(op_type::SME_OuterProduct_64bit_Int16_FMOPS);
            }
          }
          else
          {
            if (!is1(S))
            {
              return gii(op_type::SME_OuterProduct_64bit_Int16_SUMOPA);
            }
            else
            {
              return gii(op_type::SME_OuterProduct_64bit_Int16_SUMOPS);
            }
          }
        }
        else
        {
          if (!is1(u1))
          {
            if (!is1(S))
            {
              return gii(op_type::SME_OuterProduct_64bit_Int16_USMOPA);
            }
            else
            {
              return gii(op_type::SME_OuterProduct_64bit_Int16_USMOPS);
            }
          }
          else
          {
            if (!is1(S))
            {
              return gii(op_type::SME_OuterProduct_64bit_Int16_UMOPA);
            }
            else
            {
              return gii(op_type::SME_OuterProduct_64bit_Int16_UMOPS);
            }
          }
        }
      }
    }
  }
  return gii(op_type::Undefine);
}

inst_info getOP_SVE()
{
  coprange o0 = {29, 31};
  coprange o1 = {10, 24};
  copn o2 = 4;

  if (masking(o0, "000"))
  {
    if (masking(o1, "0xx0xxxxxx1>"))
    {
      copn op0 = 15;
      copn op = 13;
      if (isp(op0, '0'))
      {
        if (isp(op0, '0'))
        {
          return gii(op_type::SVE_Int_MultiAdd_Predicated_MAccumulateWritingAddressAddend_MLA);
        }
        else
        {
          return gii(op_type::SVE_Int_MultiAdd_Predicated_MAccumulateWritingAddressAddend_MLS);
        }
      }
      else
      {
        if (isp(op0, '0'))
        {
          return gii(op_type::SVE_Int_MultiAdd_Predicated_MAddWritingMultiplicand_MAD);
        }
        else
        {
          return gii(op_type::SVE_Int_MultiAdd_Predicated_MAddWritingMultiplicand_MSB);
        }
      }
    }
    if (masking(o1, "0xx0xxxxx000>"))
    {
      coprange op0 = {18, 20};
      if(masking(op0, "00x")){
        coprange opc = {16, 18};
        if(masking(opc, "000")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_AddSubVectors_ADD);
        }
        if(masking(opc, "001")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_AddSubVectors_SUB);
        }
        if(masking(opc, "011")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_AddSubVectors_SUBR);
        }
      }
      if(masking(op0, "01x")){
        coprange opcu = {16, 18};
        if(masking(opcu, "000")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_MinMaxDifference_SMAX);
        }
        if(masking(opcu, "001")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_MinMaxDifference_UMAX);
        }
        if(masking(opcu, "010")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_MinMaxDifference_SMIN);
        }
        if(masking(opcu, "011")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_MinMaxDifference_UMIN);
        }
        if(masking(opcu, "100")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_MinMaxDifference_SABD);
        }
        if(masking(opcu, "101")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_MinMaxDifference_UABD);
        }
      }
      if(masking(op0, "100")){
        coprange hu = {16, 17};
        if(masking(hu, "00")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_MultiplyVectors_MUL);
        }
        if(masking(hu, "10")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_MultiplyVectors_SMULH);
        }
        if(masking(hu, "11")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_MultiplyVectors_UMULH);
        }
      }
      if(masking(op0, "101")){
        coprange hu = {16, 17};
        if(masking(hu, "00")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_DivideVectors_SDIV);
        }
        if(masking(hu, "01")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_DivideVectors_UDIV);
        }
        if(masking(hu, "10")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_DivideVectors_SDIVR);
        }
        if(masking(hu, "11")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Int_DivideVectors_UDIVR);
        }
      }
      if(masking(op0, "11x")){
        coprange opcu = {16, 18};
        if(masking(opcu, "000")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Bin_BitwiseLogicalOperations_ORR);
        }
        if(masking(opcu, "001")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Bin_BitwiseLogicalOperations_EOR);
        }
        if(masking(opcu, "010")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Bin_BitwiseLogicalOperations_AND);
        }
        if(masking(opcu, "011")){
          return gii(op_type::SVE_Int_Binary_Arithmetic_Predicated_Bin_BitwiseLogicalOperations_BIC);
        }
      }
    }
    if (masking(o1, "0xx0xxxxx001>"))
    {
      coprange op0 = {18, 20};
      if(masking(op0, "000")){
        coprange opu = {16, 17};
        if(masking(opu, "00")){
          return gii(op_type::SVE_Int_Reduction_Int_AddReduction_SADDV);
        }
        if(masking(opu, "01")){
          return gii(op_type::SVE_Int_Reduction_Int_AddReduction_UADDV);
        }
      }
      if(masking(op0, "010")){
        coprange opu = {16, 17};
        if(masking(opu, "00")){
          return gii(op_type::SVE_Int_Reduction_Int_MinMaxReduction_SMAXV);
        }
        if(masking(opu, "01")){
          return gii(op_type::SVE_Int_Reduction_Int_MinMaxReduction_UMAXV);
        }
        if(masking(opu, "10")){
          return gii(op_type::SVE_Int_Reduction_Int_MinMaxReduction_SMINV);
        }
        if(masking(opu, "11")){
          return gii(op_type::SVE_Int_Reduction_Int_MinMaxReduction_UMINV);
        }
      }
      if(masking(op0, "10x")){
        coprange opc = {17, 18};
        if(masking(opc, "00")){
          return gii(op_type::SVE_Int_Reduction_ConstructivePrefix_MOVPREFX);
        }
      }
      if(masking(op0, "110")){
        coprange opc = {16, 17};
        if(masking(opc, "00")){
          return gii(op_type::SVE_Int_Reduction_BitwiseLogicalOperation_ORV);
        }
        if(masking(opc, "01")){
          return gii(op_type::SVE_Int_Reduction_BitwiseLogicalOperation_EORV);
        }
        if(masking(opc, "10")){
          return gii(op_type::SVE_Int_Reduction_BitwiseLogicalOperation_ANDV);
        }
      }
    }
    if (masking(o1, "0xx0xxxxx100>"))
    {
      coprange op0 = {19, 20};
      if(masking(op0, "0x")){
        coprange opclu = {16, 19};
        if(masking(opclu, "0000")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byImmediate_ASR);
        }
        if(masking(opclu, "0001")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byImmediate_LSR);
        }
        if(masking(opclu, "0011")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byImmediate_LSL);
        }
        if(masking(opclu, "0100")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byImmediate_ASRD);
        }
        if(masking(opclu, "0110")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byImmediate_SQSHL);
        }
        if(masking(opclu, "0111")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byImmediate_UQSHL);
        }
        if(masking(opclu, "1100")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byImmediate_SRSHR);
        }
        if(masking(opclu, "1101")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byImmediate_URSHR);
        }
        if(masking(opclu, "1111")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byImmediate_SQSHLU);
        }
      }
      if(masking(op0, "10")){
        coprange rlu = {16, 18};
        if(masking(rlu, "000")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byVector_ASR);
        }
        if(masking(rlu, "001")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byVector_LSR);
        }
        if(masking(rlu, "011")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byVector_LSL);
        }
        if(masking(rlu, "100")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byVector_ASRR);
        }
        if(masking(rlu, "101")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byVector_LSRR);
        }
        if(masking(rlu, "111")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byVector_LSLR);
        }
      }
      if(masking(op0, "11")){
        coprange rlu = {16, 18};
        if(masking(rlu, "000")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byWideElement_ASR);
        }
        if(masking(rlu, "001")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byWideElement_LSR);
        }
        if(masking(rlu, "011")){
          return gii(op_type::SVE_Bitwise_Shift_Predicated_byWideElement_LSL);
        }
      }
    }
    if (masking(o1, "0xx0xxxxx101>"))
    {
      coprange op0 = {19, 20};
      if(masking(op0, "10")){
        coprange opc = {16, 18};
        if(masking(opc, "000")){
          return gii(op_type::SVE_Int_Unary_Arithmetic_Predicated_Int_SXTx_BHW);
        }
        if(masking(opc, "001")){
          return gii(op_type::SVE_Int_Unary_Arithmetic_Predicated_Int_UXTx_BHW);
        }
        if(masking(opc, "010")){
          return gii(op_type::SVE_Int_Unary_Arithmetic_Predicated_Int_SXTx_BHW);
        }
        if(masking(opc, "011")){
          return gii(op_type::SVE_Int_Unary_Arithmetic_Predicated_Int_UXTx_BHW);
        }
        if(masking(opc, "100")){
          return gii(op_type::SVE_Int_Unary_Arithmetic_Predicated_Int_SXTx_BHW);
        }
        if(masking(opc, "101")){
          return gii(op_type::SVE_Int_Unary_Arithmetic_Predicated_Int_UXTx_BHW);
        }
        if(masking(opc, "110")){
          return gii(op_type::SVE_Int_Unary_Arithmetic_Predicated_Int_ABS);
        }
        if(masking(opc, "111")){
          return gii(op_type::SVE_Int_Unary_Arithmetic_Predicated_Int_NEG);
        }
      }
      if(masking(op0, "11")){
        coprange opc = {16, 18};
        if(masking(opc, "000")){
          return gii(op_type::SVE_Int_Unary_Arithmetic_Predicated_Bin_CLS);
        }
        if(masking(opc, "001")){
          return gii(op_type::SVE_Int_Unary_Arithmetic_Predicated_Bin_CLZ);
        }
        if(masking(opc, "010")){
          return gii(op_type::SVE_Int_Unary_Arithmetic_Predicated_Bin_CNT);
        }
        if(masking(opc, "011")){
          return gii(op_type::SVE_Int_Unary_Arithmetic_Predicated_Bin_CNOT);
        }
        if(masking(opc, "100")){
          return gii(op_type::SVE_Int_Unary_Arithmetic_Predicated_Bin_FABS);
        }
        if(masking(opc, "101")){
          return gii(op_type::SVE_Int_Unary_Arithmetic_Predicated_Bin_FNEG);
        }
        if(masking(opc, "110")){
          return gii(op_type::SVE_Int_Unary_Arithmetic_Predicated_Bin_NOT);
        }
      }
    }
    if (masking(o1, "0xx1xxxxx000>"))
    {
      coprange opc = {10, 12};
      if(masking(opc, "000")){
        return gii(op_type::SVE_Int_AddSubVectors_UnPredicated_ADD);
      }
      if(masking(opc, "001")){
        return gii(op_type::SVE_Int_AddSubVectors_UnPredicated_SUB);
      }
      if(masking(opc, "100")){
        return gii(op_type::SVE_Int_AddSubVectors_UnPredicated_SQADD);
      }
      if(masking(opc, "101")){
        return gii(op_type::SVE_Int_AddSubVectors_UnPredicated_UQADD);
      }
      if(masking(opc, "110")){
        return gii(op_type::SVE_Int_AddSubVectors_UnPredicated_SQSUB);
      }
      if(masking(opc, "111")){
        return gii(op_type::SVE_Int_AddSubVectors_UnPredicated_UQSUB);
      }
    }
    if (masking(o1, "0xx1xxxxx001>"))
    {
      coprange op0 = {10, 12};
      if(masking(op0, "100")){
        coprange opc = {22, 23};
        if(masking(opc, "00")){
          return gii(op_type::SVE_Bistwise_Logical_UnPredicated_Operations_AND);
        }
        if(masking(opc, "01")){
          return gii(op_type::SVE_Bistwise_Logical_UnPredicated_Operations_ORR);
        }
        if(masking(opc, "10")){
          return gii(op_type::SVE_Bistwise_Logical_UnPredicated_Operations_EOR);
        }
        if(masking(opc, "11")){
          return gii(op_type::SVE_Bistwise_Logical_UnPredicated_Operations_BIC);
        }
      }
      if(masking(op0, "101")){
        return gii(op_type::SVE_Bistwise_Logical_UnPredicated_XAR);
      }
      if(masking(op0, "11x")){
        coprange opc = {22, 23};
        copn o2 = 10;
        if(masking(opc, "00") && isp(o2, '0')){
          return gii(op_type::SVE_Bistwise_Logical_UnPredicated_TernaryOperations_EOR3);
        }
        if(masking(opc, "00") && isp(o2, '1')){
          return gii(op_type::SVE_Bistwise_Logical_UnPredicated_TernaryOperations_BSL);
        }
        if(masking(opc, "01") && isp(o2, '0')){
          return gii(op_type::SVE_Bistwise_Logical_UnPredicated_TernaryOperations_BCAX);
        }
        if(masking(opc, "01") && isp(o2, '1')){
          return gii(op_type::SVE_Bistwise_Logical_UnPredicated_TernaryOperations_BSL1N);
        }
        if(masking(opc, "10") && isp(o2, '1')){
          return gii(op_type::SVE_Bistwise_Logical_UnPredicated_TernaryOperations_BSL2N);
        }
        if(masking(opc, "11") && isp(o2, '1')){
          return gii(op_type::SVE_Bistwise_Logical_UnPredicated_TernaryOperations_NBSL);
        }
      }
    }
    if (masking(o1, "0xx1xxxxx0100>"))
    {
      coprange op0 = {10, 11};
      if(masking(op0, "00")){
        return gii(op_type::SVE_IndexGeneration_Immediates_INDEX);
      }
      if(masking(op0, "01")){
        return gii(op_type::SVE_IndexGeneration_ScalarAndImmediate_INDEX);
      }
      if(masking(op0, "10")){
        return gii(op_type::SVE_IndexGeneration_ImmediateAndScalar_INDEX);
      }
      if(masking(op0, "11")){
        return gii(op_type::SVE_IndexGeneration_Scalars_INDEX);
      }
    }
    if (masking(o1, "0xx1xxxxx0101>"))
    {
      copn op0 = 23;
      copn op1 = 11;
      if(isp(op0, '0') && isp(op1, '0')){
        copn op = 22;
        if(isp(op, '0')){
          return gii(op_type::SVE_StackAllocation_FrameAdjustment_ADDVL);
        }
        if(isp(op, '1')){
          return gii(op_type::SVE_StackAllocation_FrameAdjustment_ADDPL);
        }
      }
      if(isp(op0, '0') && isp(op1, '1')){
        copn op = 22;
        if(isp(op, '0')){
          return gii(op_type::SVE_StackAllocation_StreamingFrameAdjustment_ADDSVL);
        }
        if(isp(op, '1')){
          return gii(op_type::SVE_StackAllocation_StreamingFrameAdjustment_ADDSVL);
        }
      }
      if(isp(op0, '1') && isp(op1, '0')){
        if(isp(22, '0') && masking({16, 20}, "11111")){
          return gii(op_type::SVE_StackAllocation_FrameSize_RDVL);
        }
      }
      if(isp(op0, '1') && isp(op1, '1')){
        if(isp(22, '0') && masking({16, 20}, "11111")){
          return gii(op_type::SVE_StackAllocation_StreamingFrameSize_RDSVL);
        }
      }
    }
    if (masking(o1, "0xx1xxxxx011>"))
    {
      coprange op0 = {11, 12};
      if(masking(op0, "0x")){
        coprange size = {22, 23};
        coprange opc = {10, 11};
        if(masking(opc, "00")){
          return gii(op_type::SVE_2_Int_Multiply_UnPredicated_Vectors_MUL);
        }
        if(masking(opc, "10")){
          return gii(op_type::SVE_2_Int_Multiply_UnPredicated_Vectors_SMULH);
        }
        if(masking(opc, "11")){
          return gii(op_type::SVE_2_Int_Multiply_UnPredicated_Vectors_UMULH);
        }
        if(masking(opc, "01") && masking(size, "00")){
          return gii(op_type::SVE_2_Int_Multiply_UnPredicated_Vectors_PMUL);
        }
      }
      if(masking(op0, "10")){
        if(isp(10, '0')){
          return gii(op_type::SVE_2_Int_Multiply_UnPredicated_SignedSateratingDoublingHigh_SQDMULH);
        }
        if(isp(10, '1')){
          return gii(op_type::SVE_2_Int_Multiply_UnPredicated_SignedSateratingDoublingHigh_SQRDMULH);
        }
      }
    }
    if (masking(o1, "0xx1xxxxx100>"))
    {
      copn op0 = 12;
      if(isp(op0, '0')){
        coprange opc = {10, 11};
        if(masking(opc, "00")){
          return gii(op_type::SVE_Bitwise_Shift_UnPredicated_WideElement_ASR);
        }
        if(masking(opc, "01")){
          return gii(op_type::SVE_Bitwise_Shift_UnPredicated_WideElement_LSR);
        }
        if(masking(opc, "11")){
          return gii(op_type::SVE_Bitwise_Shift_UnPredicated_WideElement_LSL);
        }
      }
      if(isp(op0, '1')){
        coprange opc = {10, 11};
        if(masking(opc, "00")){
          return gii(op_type::SVE_Bitwise_Shift_UnPredicated_Immediate_ASR);
        }
        if(masking(opc, "01")){
          return gii(op_type::SVE_Bitwise_Shift_UnPredicated_Immediate_LSR);
        }
        if(masking(opc, "11")){
          return gii(op_type::SVE_Bitwise_Shift_UnPredicated_Immediate_LSL);
        }
      }
    }
    if (masking(o1, "0xx1xxxxx1010>"))
    {
      return gii(op_type::SVE_AddressGenration_ADR);
    }
    if (masking(o1, "0xx1xxxxx1011>"))
    {
      coprange op0 = {10, 11};
      if(masking(op0, "0x") && isp(10, '0')){
        return gii(op_type::SVE_Int_Misc_UnPredicated_FloatingPointTrigSelectCoefficient_FTSSEL);
      }
      if(masking(op0, "10")){
        coprange opc = {16, 20};
        if(masking(opc, "00000")){
          return gii(op_type::SVE_Int_Misc_UnPredicated_FloatingPointExponentialAccelerator_FEXPA);
        }
      }
      if(masking(op0, "11")){
        coprange opc = {22, 23};
        coprange opc2 = {16, 20};
        if(masking(opc, "00") && masking(opc2, "00000")){
          return gii(op_type::SVE_Int_Misc_UnPredicated_ConstructivePrefix_MOVPRFX);
        }
      }
    }
    if (masking(o1, "0xx1xxxxx11>"))
    {
      copn op0 = 20;
      coprange op1 = {11, 13};
      if(isp(op0, '0') && masking(op1, "00x")){
        coprange size = {22, 23};
        coprange du = {10, 11};
        if(masking(size, "01") && masking(du, "00")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_SQINCH);
        }
        if(masking(size, "01") && masking(du, "01")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_UQINCH);
        }
        if(masking(size, "01") && masking(du, "10")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_SQDECH);
        }
        if(masking(size, "01") && masking(du, "11")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_UQDECH);
        }
        if(masking(size, "10") && masking(du, "00")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_SQINCW);
        }
        if(masking(size, "10") && masking(du, "01")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_UQINCW);
        }
        if(masking(size, "10") && masking(du, "10")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_SQDECW);
        }
        if(masking(size, "10") && masking(du, "11")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_UQDECW);
        }
        if(masking(size, "11") && masking(du, "00")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_SQINCD);
        }
        if(masking(size, "11") && masking(du, "01")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_UQINCD);
        }
        if(masking(size, "11") && masking(du, "10")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_SQDECD);
        }
        if(masking(size, "11") && masking(du, "11")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Vector_byElementCount_UQDECD);
        }
      }
      if(isp(op0, '0') && masking(op1, "100")){
        if(isp(10, '0')){
          return gii(op_type::SVE_ElementCount_ElementCount_CNTx_BHWD);
        }
      }
      if(isp(op0, '1') && masking(op1, "000")){
        if(isp(10, '0')){
          return gii(op_type::SVE_ElementCount_IncDec_Vector_byElementCount_INCx_HWD);
        }
        else{
          return gii(op_type::SVE_ElementCount_IncDec_Vector_byElementCount_DECx_HWD);
        }
      }
      if(isp(op0, '1') && masking(op1, "100")){
        if(isp(10, '0')){
          return gii(op_type::SVE_ElementCount_IncDev_Register_byElementCount_INCx_BHWD);
        }
        else{
          return gii(op_type::SVE_ElementCount_IncDev_Register_byElementCount_DECx_BHWD);
        }
      }
      if(masking(op1, "11x")){
        coprange size = {22, 23};
        copn sf = 20;
        coprange du = {10, 11};
        if(masking(size, "00") && masking(du, "00")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQINCB);
        }
        if(masking(size, "00") && masking(du, "01")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQINCB);
        }
        if(masking(size, "00") && masking(du, "10")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQDECB);
        }
        if(masking(size, "00") && masking(du, "11")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQDECB);
        }
        if(masking(size, "01") && masking(du, "00")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQINCH);
        }
        if(masking(size, "01") && masking(du, "01")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQINCH);
        }
        if(masking(size, "01") && masking(du, "10")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQDECH);
        }
        if(masking(size, "01") && masking(du, "11")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQDECH);
        }
        if(masking(size, "10") && masking(du, "00")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQINCW);
        }
        if(masking(size, "10") && masking(du, "01")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQINCW);
        }
        if(masking(size, "10") && masking(du, "10")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQDECW);
        }
        if(masking(size, "10") && masking(du, "11")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQDECW);
        }
        if(masking(size, "11") && masking(du, "00")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQINCD);
        }
        if(masking(size, "11") && masking(du, "01")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQINCD);
        }
        if(masking(size, "11") && masking(du, "10")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_SQDECD);
        }
        if(masking(size, "11") && masking(du, "11")){
          return gii(op_type::SVE_ElementCount_Saturating_IncDec_Register_byElementCount_UQDECD);
        }
      }
    }
    if (masking(o1, "1xx00>"))
    {
      coprange op0 = {22, 23};
      coprange op1 = {18, 19};
      if(masking(op1, "00")){
        if(masking(op0, "11")){
          return gii(op_type::SVE_Bitwise_Immediate_DUPM);
        }
        else{
          coprange opc = {22, 23};
          if(masking(opc, "00")){
            return gii(op_type::SVE_Bitwise_Immediate_Logical_ORR);
          }
          if(masking(opc, "01")){
            return gii(op_type::SVE_Bitwise_Immediate_Logical_EOR);
          }
          if(masking(opc, "10")){
            return gii(op_type::SVE_Bitwise_Immediate_Logical_AND);
          }
        }
      }
    }
    if (masking(o1, "1xx01>"))
    {
      coprange op0 = {13, 15};
      if(masking(op0, "0xx")){
        if(isp(14, '0')){
          return gii(op_type::SVE_Int_Wide_Immediate_Predicated_CopyInteger_Zeroing_CPY);
        }
        if(isp(14, '1')){
          return gii(op_type::SVE_Int_Wide_Immediate_Predicated_CopyInteger_Merging_CPY);
        }
      }
      if(masking(op0, "110")){
        return gii(op_type::SVE_Int_Wide_Immediate_Predicated_FCPY);
      }
    }
    if (masking(o1, "1xx1xxxxx001000"))
    {
      return gii(op_type::SVE_DUP_Indexed_DUP);
    }
    if (masking(o1, "1xx1xxxxx001001"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "1xx1xxxxx00101x"))
    {
      if(isp(10, '0')){
        return gii(op_type::SVE_TableLookup_3s_TBL);
      }
      else{
        return gii(op_type::SVE_TableLookup_3s_TBX);
      }
    }
    if (masking(o1, "1xx1xxxxx0011x1"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "1xx1xxxxx001100"))
    {
      return gii(op_type::SVE_TBL);
    }
    if (masking(o1, "1xx1xxxxx001110"))
    {
      coprange op01 = {16, 20};
      if(masking(op01, "00000")){
        return gii(op_type::SVE_PermuteVector_UnPredicate_Scalar_DUP);
      }
      if(masking(op01, "00100")){
        return gii(op_type::SVE_PermuteVector_UnPredicate_Scalar_INSR);
      }
      if(masking(op01, "100xx")){
        copn u = 17;
        if(isp(u, '0')){
          return gii(op_type::SVE_PermuteVector_UnPredicate_UnpackVectorElements_SUNPKHI);
        }
        if(isp(u, '1')){
          return gii(op_type::SVE_PermuteVector_UnPredicate_UnpackVectorElements_UUNPKHI);
        }
      }
      if(masking(op01, "10100")){
        return gii(op_type::SVE_PermuteVector_UnPredicate_SIMD_FP_Scalar_INSR);
      }
      if(masking(op01, "11000")){
        return gii(op_type::SVE_PermuteVector_UnPredicate_Vector_REV);
      }
    }
    if (masking(o1, "1xx1xxxxx010>"))
    {
      coprange op0 = {22, 23};
      coprange op1 = {16, 20};
      coprange op2 = {9, 12};
      copn op3 = 4;
      if((masking(op0, "00") && masking(op1, "1000x")) && (masking(op2, "0000") && isp(op3, '0'))){
        return gii(op_type::SVE_Permute_Predicate_UnpackElement_PUNPKxx_HI_LO);
      }
      if((masking(op0, "xx") && masking(op1, "0xxxx")) && (masking(op2, "xxx0") && isp(op3, '0'))){
        coprange opc = {11, 12};
        if(masking(opc, "00")){
          return gii(op_type::SVE_Permute_Predicate_PremuteElement_ZIPx_12);
        }
        if(masking(opc, "01")){
          return gii(op_type::SVE_Permute_Predicate_PremuteElement_UZPx_12);
        }
        if(masking(opc, "10")){
          return gii(op_type::SVE_Permute_Predicate_PremuteElement_TRNx_12);
        }
      }
      if((masking(op0, "xx") && masking(op1, "10100")) && (masking(op2, "0000") && isp(op3, '0'))){
        return gii(op_type::SVE_Permute_Predicate_REV);
      }
    }
    if (masking(o1, "1xx1xxxxx011>"))
    {
      coprange opc = {10, 12};
      if(masking(opc, "00x")){
        return gii(op_type::SVE_PermuteVectorElements_ZIPx_12);
      }
      if(masking(opc, "01x")){
        return gii(op_type::SVE_PermuteVectorElements_UZPx_12);
      }
      if(masking(opc, "10x")){
        return gii(op_type::SVE_PermuteVectorElements_TRNx_12);
      }
    }
    if (masking(o1, "1xx1xxxxx10>"))
    {
      coprange op012 = {16, 20};
      copn op3 = 13;
      if(masking(op012, "00000") && isp(op3, '0')){
        return gii(op_type::SVE_PermuteVector_Predicate_SIMD_FP_Scalar_CPY);
      }
      if(masking(op012, "00001") && isp(op3, '0')){
        return gii(op_type::SVE_PermuteVector_Predicate_COMPACT);
      }
      if(masking(op012, "0000x") && isp(op3, '1')){
        if(isp(16, '0')){
          return gii(op_type::SVE_PermuteVector_Predicate_ExtractElementToGeneralRegister_LASTA);
        }
        else{
          return gii(op_type::SVE_PermuteVector_Predicate_ExtractElementToGeneralRegister_LASTB);
        }
      }
      if(masking(op012, "0001x") && isp(op3, '0')){
        if(isp(16, '0')){
          return gii(op_type::SVE_PermuteVector_Predicate_ExtractElementToSIMDandFPscalarRegister_LASTA);
        }
        else{
          return gii(op_type::SVE_PermuteVector_Predicate_ExtractElementToSIMDandFPscalarRegister_LASTB);
        }
      }
      if(masking(op012, "001xx") && isp(op3, '0')){
        if(false == masking({16, 17}, "11")){
          return gii(op_type::SVE_PermuteVector_Predicate_ReverseWithinElements_REVx_BHW);
        }
        else{
          return gii(op_type::SVE_PermuteVector_Predicate_ReverseWithinElements_RBIT);
        }
      }
      if(masking(op012, "01000") && isp(op3, '1')){
        return gii(op_type::SVE_PermuteVector_Predicate_Scalar_CPY);
      }
      if(masking(op012, "0100x") && isp(op3, '0')){
        if(isp(16, '0')){
          return gii(op_type::SVE_PermuteVector_Predicate_ConditionallyBroadCastElementToVector_CLASTA);
        }
        else{
          return gii(op_type::SVE_PermuteVector_Predicate_ConditionallyBroadCastElementToVector_CLASTB);
        }
      }
      if(masking(op012, "0101x") && isp(op3, '0')){
        if(isp(16, '0')){
          return gii(op_type::SVE_PermuteVector_Predicate_ConditionallyExtractElementToSIMDandFPscalar_CLASTA);
        }
        else{
          return gii(op_type::SVE_PermuteVector_Predicate_ConditionallyExtractElementToSIMDandFPscalar_CLASTB);
        }
      }
      if(masking(op012, "0110x") && isp(op3, '0')){
        return gii(op_type::SVE_PermuteVector_Predicate_SPLICE);
      }
      if(masking(op012, "01110") && isp(op3, '0')){
        if(masking({22, 23}, "00")){
          return gii(op_type::SVE_PermuteVector_Predicate_ReverseDoubleWord_REVD);
        }
      }
      if(masking(op012, "1000x") && isp(op3, '1')){
        if(isp(16, '0')){
          return gii(op_type::SVE_PermuteVector_Predicate_ConditionallyExtractElementToGeneralRegister_CLASTA);
        }
        else{
          return gii(op_type::SVE_PermuteVector_Predicate_ConditionallyExtractElementToGeneralRegister_CLASTB);
        }
      }
    }
    if (masking(o1, "1xx1xxxxx11>"))
    {
      return gii(op_type::SVE_Vector_SEL);
    }
    if (masking(o1, "10x1xxxxx000>"))
    {
      return gii(op_type::SVE_PermuteVector_Extract_EXT);
    }
    if (masking(o1, "11x1xxxxx000>"))
    {
      copn op0 = 22;
      coprange opch = {10, 12};
      if(isp(op0, '0')){
        if(masking(opch, "00x")){
          return gii(op_type::SVE_PermuteVector_Segments_Vector_ZIPx_12);
        }
        if(masking(opch, "01x")){
          return gii(op_type::SVE_PermuteVector_Segments_Vector_UZPx_12);
        }
        if(masking(opch, "11x")){
          return gii(op_type::SVE_PermuteVector_Segments_Vector_TRNx_12);
        }
      }
    }
  }
  if (masking(o0, "001"))
  {
    if (masking(o1, "0xx0>"))
    {
      copn op0 = 14;
      if(isp(op0, '0')){
        coprange opo2 = {13, 15};
        if(masking(opo2, "001")){
          return gii(op_type::SVE_Int_Compare_Vectors_CMPcc);
        }
        else{
          return gii(op_type::SVE_Int_Compare_Vectors_WithWideElement_CMPcc);
        }
      }
      else{

      }
    }
    if (masking(o1, "0xx1>"))
    {
      return gii(op_type::SVE_Int_Compare_UnsignedImmediate_Immediate_CMPcc);
    }
    if (masking(o1, "1xx0xxxxxx0>"))
    {
      return gii(op_type::SVE_Int_Compare_SignedImmediate_Immediate_CMPcc);
    }
    if (masking(o1, "1xx00xxxx01>"))
    {
      copn opso2o3[4] = {23, 22, 9, 4};
      constexpr op_type oparr[16] = {
        op_type::SVE_Predicate_LogicalOperation_AND,
        op_type::SVE_Predicate_LogicalOperation_BIC,
        op_type::SVE_Predicate_LogicalOperation_EOR,
        op_type::SVE_Predicate_LogicalOperation_SEL,
        op_type::SVE_Predicate_LogicalOperation_ANDS,
        op_type::SVE_Predicate_LogicalOperation_BICS,
        op_type::SVE_Predicate_LogicalOperation_EORS,
        op_type::Undefine,
        op_type::SVE_Predicate_LogicalOperation_ORR,
        op_type::SVE_Predicate_LogicalOperation_ORN,
        op_type::SVE_Predicate_LogicalOperation_NOR,
        op_type::SVE_Predicate_LogicalOperation_NAND,
        op_type::SVE_Predicate_LogicalOperation_ORRS,
        op_type::SVE_Predicate_LogicalOperation_ORNS,
        op_type::SVE_Predicate_LogicalOperation_NORS,
        op_type::SVE_Predicate_LogicalOperation_NANDS
      };
      return gii(oparr[
        ((isp(opso2o3[0], '1'))? 8 : 0) + 
        ((isp(opso2o3[1], '1'))? 4 : 0) + 
        ((isp(opso2o3[2], '1'))? 2 : 0) + 
        ((isp(opso2o3[3], '1'))? 1 : 0)
        ]);
    }
    if (masking(o1, "1xx00xxxx11>"))
    {
      copn op0 = 9;
      copn op = 23;
      if(isp(op0, '0') && isp(op, '0')){
        copn sb[2] = {22, 4};
        constexpr op_type oparr[4] = {
          op_type::SVE_PropagateBreak_FromPreviousPartition_BRKPA,
          op_type::SVE_PropagateBreak_FromPreviousPartition_BRKPB,
          op_type::SVE_PropagateBreak_FromPreviousPartition_BRKPAS,
          op_type::SVE_PropagateBreak_FromPreviousPartition_BRKPBS,
        };
        return gii(oparr[
        ((isp(sb[0], '1'))? 2 : 0) + 
        ((isp(sb[1], '1'))? 1 : 0)
        ]);
      }
    }
    if (masking(o1, "1xx01xxxx01>"))
    {
      copn op0 = 23;
      coprange op1 = {16, 19};
      copn op2 = 9;
      copn op3 = 4;
      if((isp(op0, '0')&&masking(op1, "1000"))&&(isp(op2, '0')&&isp(op3, '0'))){
        copn S = 22;
        if(isp(S, '0')){
          return gii(op_type::SVE_PartitionBreak_PropagateBreakToNextPartition_BRKN);
        }
        else{
          return gii(op_type::SVE_PartitionBreak_PropagateBreakToNextPartition_BRKNS);
        }
      }
      if(masking(op1, "1000")&&isp(op2, '0')){
        coprange BS = {22, 23};
        copn M = 4;
        if(masking(BS, "00")){
          return gii(op_type::SVE_PartitionBreak_Condition_BRKA);
        }
        if(masking(BS, "01") && isp(M, '0')){
          return gii(op_type::SVE_PartitionBreak_Condition_BRKAS);
        }
        if(masking(BS, "10")){
          return gii(op_type::SVE_PartitionBreak_Condition_BRKB);
        }
        if(masking(BS, "11") && isp(M, '0')){
          return gii(op_type::SVE_PartitionBreak_Condition_BRKBS);
        }
      }
    }
    if (masking(o1, "1xx01xxxx11>")){
      coprange op0 = {16, 19};
      coprange op1234 = {4, 13};
      if(masking(op0, "0000") && masking(op1234, "xxxx0xxxx0")){
        coprange opS = {22, 23};
        coprange opc2 = {0, 3};
        if(masking(opS, "01") && masking(opc2, "0000")){
          return gii(op_type::SVE_PredicateMisc_PredicateTest_PTEST);
        }
      }
      if(masking(op0, "1000") && masking(op1234, "00000xxxx0")){
        coprange opS = {22, 23};
        if(masking(opS, "01")){
          return gii(op_type::SVE_PredicateMisc_PredicateFirstActive_PFIRST);
        }
      }
      if(masking(op0, "1000") && masking(op1234, "1001000000")){
        coprange opS = {22, 23};
        if(masking(opS, "00")){
          return gii(op_type::SVE_PredicateMisc_PredicateZero_PFALSE);
        }
      }
      if(masking(op0, "1000") && masking(op1234, "11000xxxx0")){
        coprange opS = {22, 23};
        if(masking(opS, "00")){
          return gii(op_type::SVE_PredicateMisc_PredicateReadFromFFR_Predicate_RDFFR);
        }
        if(masking(opS, "01")){
          return gii(op_type::SVE_PredicateMisc_PredicateReadFromFFR_Predicate_RDFFRS);
        }
      }
      if(masking(op0, "1001") && masking(op1234, "00010xxxx0")){
        return gii(op_type::SVE_PredicateMisc_PNEXT);
      }
      if(masking(op0, "1001") && masking(op1234, "1100000000")){
        coprange opS = {22, 23};
        if(masking(opS, "00")){
          return gii(op_type::SVE_PredicateMisc_PredicateReadFromFFR_UnPredicate_RDFFR);
        }
      }
      if(masking(op0, "100x") && masking(op1234, "1000xxxxx0")){
        copn S = 16;
        if(isp(S, '0')){
          return gii(op_type::SVE_PredicateMisc_PredicateInitialize_PTRUE);
        }
        else{
          return gii(op_type::SVE_PredicateMisc_PredicateInitialize_PTRUES);
        }
      }
    }
    if (masking(o1, "1xx1xxxxx00>"))
    {
      coprange op0op1 = {10, 13};
      coprange op2 = {0, 3};
      if(masking(op0op1, "0xxx") && masking(op2, "xxxx")){
        copn ulteq[3] = {11, 10, 4};
        constexpr op_type oparr[8] = {
          op_type::SVE_Int_Compare_Scalars_CountAndLimit_WHILEGE,
          op_type::SVE_Int_Compare_Scalars_CountAndLimit_WHILEGT,
          op_type::SVE_Int_Compare_Scalars_CountAndLimit_WHILELT,
          op_type::SVE_Int_Compare_Scalars_CountAndLimit_WHILELE,
          op_type::SVE_Int_Compare_Scalars_CountAndLimit_WHILEHS,
          op_type::SVE_Int_Compare_Scalars_CountAndLimit_WHILEHI,
          op_type::SVE_Int_Compare_Scalars_CountAndLimit_WHILELO,
          op_type::SVE_Int_Compare_Scalars_CountAndLimit_WHILELS,
        };
        return gii(oparr[
          ((isp(ulteq[0], '1'))? 4 : 0) + 
          ((isp(ulteq[1], '1'))? 2 : 0) + 
          ((isp(ulteq[2], '1'))? 1 : 0)
          ]);
      }
      if(masking(op0op1, "1000") && masking(op2, "0000")){
        copn op = 23;
        copn ne = 4;
        if(isp(op, '1')){
          return gii(op_type::SVE_Int_Compare_Scalars_ConditionallyTerminateScalar_CTERMEQlCTERMNE);
        }
      }
      if(masking(op0op1, "1100") && masking(op2, "xxxx")){
        copn rw = 4;
        if(isp(rw, '0')){
          return gii(op_type::SVE_Int_Compare_Scalars_PointerConflictCompare_WHILEWR);
        }
        else{
          return gii(op_type::SVE_Int_Compare_Scalars_PointerConflictCompare_WHILERW);
        }
      }
    }
    if (masking(o1, "1xx1xxxxx01>") && !is1(o2))
    {
      copn S = 9;
      if(isp(S, '0')){
        return gii(op_type::SVE_BroadcastPredicatedElement_PSEL);
      }
    }
    if (masking(o1, "1xx1xxxxx01>") && is1(o2))
    {
      coprange op0 = {16, 20};
      coprange op1op2 = {5, 13};
      copn op3 = 3;
      if(masking(op0, "00000") && (masking(op1op2, "110>"))){
        coprange opc = {8, 10};
        if(masking(opc, "0xx")){
          return gii(op_type::SVE_ScalarInt_Compare_PredicateAsCounter_ExtractMaskPredicateFromPredicateAsCounter_PEXT);
        }
        if(masking(opc, "10x")){
          return gii(op_type::SVE_ScalarInt_Compare_PredicateAsCounter_ExtractMaskPredicateFromPredicateAsCounter_Pair_PEXT);
        }
      }
      if(masking(op0, "00000") && (masking(op1op2, "110>") && isp(op3, '0'))){
        return gii(op_type::SVE_ScalarInt_Compare_PredicateAsCounter_PTRUE);
      }
      if(masking(op1op2, "01x>")){
        copn ulteq[3] = {11, 10, 0};
        constexpr op_type oparr[8] = {
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILEGE,
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILEGT,
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILELT,
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILELE,
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILEHS,
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILEHI,
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILELO,
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicatePair_WHILELS
        };
        return gii(oparr[
          ((isp(ulteq[0], '1'))? 4 : 0) + 
          ((isp(ulteq[1], '1'))? 2 : 0) + 
          ((isp(ulteq[2], '1'))? 1 : 0)
          ]);
      }
      if(masking(op1op2, "x0x>")){
        copn ulteq[3] = {11, 10, 3};
        constexpr op_type oparr[8] = {
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILEGE,
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILEGT,
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILELT,
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILELE,
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILEHS,
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILEHI,
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILELO,
          op_type::SVE_ScalarInt_Compare_PredicateAsCounter_CountAndLimit_PredicateAsCounter_WHILELS
        };
        return gii(oparr[
          ((isp(ulteq[0], '1'))? 4 : 0) + 
          ((isp(ulteq[1], '1'))? 2 : 0) + 
          ((isp(ulteq[2], '1'))? 1 : 0)
          ]);
      }
    }
    if (masking(o1, "1xx1xxxxx11>"))
    {
      coprange op0 = {19, 20};
      copn op1 = 16;
      if(masking(op0, "00")){
        copn opc[3] = {18, 17, 16};
        constexpr op_type oparr[8] = {
          op_type::SVE_Int_Wide_Immediate_UnPredicated_AddSub_ADD,
          op_type::SVE_Int_Wide_Immediate_UnPredicated_AddSub_SUB,
          op_type::Undefine,
          op_type::SVE_Int_Wide_Immediate_UnPredicated_AddSub_SUBR,
          op_type::SVE_Int_Wide_Immediate_UnPredicated_AddSub_SQADD,
          op_type::SVE_Int_Wide_Immediate_UnPredicated_AddSub_UQADD,
          op_type::SVE_Int_Wide_Immediate_UnPredicated_AddSub_SQSUB,
          op_type::SVE_Int_Wide_Immediate_UnPredicated_AddSub_UQSUB,
        };
        return gii(oparr[
          ((isp(opc[0], '1'))? 4 : 0) + 
          ((isp(opc[1], '1'))? 2 : 0) + 
          ((isp(opc[2], '1'))? 1 : 0)
          ]);
      }
      if(masking(op0, "01")){
        
      }
      if(masking(op0, "10")){
        
      }
      if(masking(op0, "11")){
        if(isp(op1, '0')){

        }
        else{

        }
      }
    }
    if (masking(o1, "1xx100xxx10>"))
    {
    }
    if (masking(o1, "1xx101xxx1000>"))
    {
    }
    if (masking(o1, "1xx101xxx1001>"))
    {
    }
    if (masking(o1, "1xx101xxx101>"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "1xx11xxxx10>"))
    {
      return gii(op_type::Undefine);
    }
  }
  if (masking(o0, "010"))
  {
    if (masking(o1, "0xx0xxxxx0>"))
    {
    }
    if (masking(o1, "0xx0xxxxx10>"))
    {
    }
    if (masking(o1, "0xx0xxxxx11000x"))
    {
    }
    if (masking(o1, "0xx0xxxxx1101xx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx0xxxxx111xxx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx1xxxxxxxxxxx"))
    {
    }
    if (masking(o1, "0x10xxxxx11001x"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0000xxxxx11001x"))
    {
    }
    if (masking(o1, "0100xxxxx11001x"))
    {
    }
    if (masking(o1, "1xx0xxxxx0xxxxx"))
    {
    }
    if (masking(o1, "1xx0xxxxx10xxxx"))
    {
    }
    if (masking(o1, "1xx0xxxxx11xxxx"))
    {
    }
    if (masking(o1, "1xx1xxxxx0xxxxx"))
    {
    }
    if (masking(o1, "1xx1xxxxx100xxx"))
    {
    }
    if (masking(o1, "1xx1xxxxx110xxx"))
    {
    }
    if (masking(o1, "1xx1xxxxx111xxx"))
    {
    }
  }
  if (masking(o0, "011"))
  {
    if (masking(o1, "0xx0xxxxx0xxxxx"))
    {
    }
    if (masking(o1, "0xx00000x100xxx"))
    {
    }
    if (masking(o1, "0xx00000x101xxx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx00000x11xxxx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx00001x1xxxxx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx0001xx1xxxxx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx0010xx100xxx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx0010xx101xxx"))
    {
    }
    if (masking(o1, "0xx0010xx11xxxx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx001100100xxx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx00110011xxxx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx0011011xxxxx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx00111x1xxxxx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx010xxx100xxx"))
    {
    }
    if (masking(o1, "0xx010xxx101xxx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx010xxx11xxxx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx011xxx1xxxxx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx1xxxxx0000xx"))
    {
    }
    if (masking(o1, "0xx1xxxxx0001xx"))
    {
    }
    if (masking(o1, "0xx1xxxxx0010x0"))
    {
    }
    if (masking(o1, "0xx1xxxxx001001"))
    {
    }
    if (masking(o1, "0xx1xxxxx001011"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx1xxxxx0011xx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx1xxxxx01x0xx"))
    {
    }
    if (masking(o1, "0xx1xxxxx01x1xx"))
    {
    }
    if (masking(o1, "0xx1xxxxx10x00x"))
    {
    }
    if (masking(o1, "0xx1xxxxx10x01x"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx1xxxxx10x1xx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx1xxxxx110xxx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx1xxxxx111000"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx1xxxxx111001"))
    {
    }
    if (masking(o1, "0xx1xxxxx11101x"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "0xx1xxxxx1111xx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "1xx0xxxxxx1xxxx"))
    {
    }
    if (masking(o1, "1xx0xxxxx000xxx"))
    {
    }
    if (masking(o1, "1xx0xxxxx100xxx"))
    {
    }
    if (masking(o1, "1xx0xxxxx101xxx"))
    {
    }
    if (masking(o1, "1xx000xxx001xxx"))
    {
    }
    if (masking(o1, "1xx001xxx0010xx"))
    {
      return gii(op_type::Undefine);
    }
    if (masking(o1, "1xx001xxx0011xx"))
    {
    }
    if (masking(o1, "1xx010xxx001xxx"))
    {
    }
    if (masking(o1, "1xx011xxx001xxx"))
    {
    }
    if (masking(o1, "1xx1xxxxxxxxxxx"))
    {
    }
  }
  if (masking(o0, "100"))
  {
  }
  if (masking(o0, "101"))
  {
  }
  if (masking(o0, "110"))
  {
  }
  if (masking(o0, "111"))
  {
    if (masking(o1, "xxxxxxxxx0x0xxx"))
    {
    }
    if (masking(o1, "xxxxxxxxx001xxx"))
    {
    }
    if (masking(o1, "xxxxxxxxx011xxx"))
    {
    }
    if (masking(o1, "xxxxxxxxx1x0xxx"))
    {
    }
    if (masking(o1, "xxxxxxxxx101xxx"))
    {
    }
    if (masking(o1, "xxxxxxxxx111xxx"))
    {
    }
  }

  return gii(op_type::Undefine);
}

inst_info getOP_DataProcessing_Immediate()
{
  return gii(op_type::Undefine);
}

inst_info getOP_Branch_or_ExecptionSystemInstruction()
{
  return gii(op_type::Undefine);
}

inst_info getOP_Load_Store()
{
  return gii(op_type::Undefine);
}

inst_info getOP_DataProcessing_Register()
{
  return gii(op_type::Undefine);
}

inst_info getOP_DataProcessing_ScalarFloat_or_SIMD()
{
  return gii(op_type::Undefine);
}

inst_info getOP(uint32_t inst)
{
  mainInst = inst;

  if (!is1(op0))
  {
    // inst[31] = 0
    if (masking(op1, "0000"))
    {
      return getOP_Reserved();
    }
  }
  else
  {
    // inst[31] = 1
    if (masking(op1, "0000"))
    {
      return getOP_SME();
    }
  }

  if (masking(op1, "0010"))
  {
    return getOP_SVE();
  }
  if (masking(op1, "100x"))
  {
    return getOP_DataProcessing_Immediate();
  }
  if (masking(op1, "101x"))
  {
    return getOP_Branch_or_ExecptionSystemInstruction();
  }
  if (masking(op1, "x1x0"))
  {
    return getOP_Load_Store();
  }
  if (masking(op1, "x101"))
  {
    return getOP_DataProcessing_Register();
  }
  if (masking(op1, "x111"))
  {
    return getOP_DataProcessing_ScalarFloat_or_SIMD();
  }

  return gii(op_type::Undefine);
}

int main()
{
  cout << "testing for codespaces" << endl;
  return 0;
}
