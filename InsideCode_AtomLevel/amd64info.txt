A.2.1
Codes for Addressing Method
The following abbreviations are used to document addressing methods:

A] Direct address: the instruction has no ModR/M byte; the address of the operand is encoded in the instruction. No base register, index register, or scaling factor can be applied (for example, far JMP (EA)).

B] The VEX.vvvv field of the VEX prefix selects a general purpose register.

C] The reg field of the ModR/M byte selects a control register (for example, MOV (0F20, 0F22)).

D] The reg field of the ModR/M byte selects a debug register (for example, MOV (0F21,0F23)).

E] A ModR/M byte follows the opcode and specifies the operand. The operand is either a general-purpose register or a memory address. If it is a memory address, the address is computed from a segment register and any of the following values: a base register, an index register, a scaling factor, a displacement.

F] EFLAGS/RFLAGS Register.

G] The reg field of the ModR/M byte selects a general register (for example, AX (000)).

H] The VEX.vvvv field of the VEX prefix selects a 128-bit XMM register or a 256-bit YMM register, determined
by operand type. For legacy SSE encodings this operand does not exist, changing the instruction to
destructive form.

I] Immediate data: the operand value is encoded in subsequent bytes of the instruction.

J] The instruction contains a relative offset to be added to the instruction pointer register (for example, JMP(0E9), LOOP).

L] The upper 4 bits of the 8-bit immediate selects a 128-bit XMM register or a 256-bit YMM register, deter-
mined by operand type. (the MSB is ignored in 32-bit mode)

M] The ModR/M byte may refer only to memory (for example, BOUND, LES, LDS, LSS, LFS, LGS,
CMPXCHG8B).

N] The R/M field of the ModR/M byte selects a packed-quadword, MMX technology register.

O] The instruction has no ModR/M byte. The offset of the operand is coded as a word or double word
(depending on address size attribute) in the instruction. No base register, index register, or scaling factor
can be applied (for example, MOV (A0–A3)).

P] The reg field of the ModR/M byte selects a packed quadword MMX technology register.

Q] A ModR/M byte follows the opcode and specifies the operand. The operand is either an MMX technology
register or a memory address. If it is a memory address, the address is computed from a segment register
and any of the following values: a base register, an index register, a scaling factor, and a displacement.

R] The R/M field of the ModR/M byte may refer only to a general register (for example, MOV (0F20-0F23)).

S] The reg field of the ModR/M byte selects a segment register (for example, MOV (8C,8E)).

U] The R/M field of the ModR/M byte selects a 128-bit XMM register or a 256-bit YMM register, determined by
operand type.

V] The reg field of the ModR/M byte selects a 128-bit XMM register or a 256-bit YMM register, determined by
operand type.

W] A ModR/M byte follows the opcode and specifies the operand. The operand is either a 128-bit XMM register,
a 256-bit YMM register (determined by operand type), or a memory address. If it is a memory address, the
address is computed from a segment register and any of the following values: a base register, an index
register, a scaling factor, and a displacement.

X] Memory addressed by the DS:rSI register pair (for example, MOVS, CMPS, OUTS, or LODS).

Y] Memory addressed by the ES:rDI register pair (for example, MOVS, CMPS, INS, STOS, or SCAS).


A.2.2
Codes for Operand Type
The following abbreviations are used to document operand types:

a] Two one-word operands in memory or two double-word operands in memory, depending on operand-size
attribute (used only by the BOUND instruction).

b] Byte, regardless of operand-size attribute.

c] Byte or word, depending on operand-size attribute.

d] Doubleword, regardless of operand-size attribute.
A-2 Vol. 2DOPCODE MAP

dq] Double-quadword, regardless of operand-size attribute.

p] 32-bit, 48-bit, or 80-bit pointer, depending on operand-size attribute.

pd] 128-bit or 256-bit packed double precision floating-point data.

pi] Quadword MMX technology register (for example: mm0).

ps] 128-bit or 256-bit packed single-precision floating-point data.

q] Quadword, regardless of operand-size attribute.

qq] Quad-Quadword (256-bits), regardless of operand-size attribute.

s] 6-byte or 10-byte pseudo-descriptor.

sd] Scalar element of a 128-bit double precision floating data.

ss] Scalar element of a 128-bit single-precision floating data.

si] Doubleword integer register (for example: eax).

v] Word, doubleword or quadword (in 64-bit mode), depending on operand-size attribute.

w] Word, regardless of operand-size attribute.

x] dq or qq based on the operand-size attribute.

y] Doubleword or quadword (in 64-bit mode), depending on operand-size attribute.

z] Word for 16-bit operand-size or doubleword for 32 or 64-bit operand-size.

>korean
가.2.1
주소 지정 방법 코드
주소 지정 방법을 문서화하는 데 사용되는 약어는 다음과 같습니다:

A] Direct Address: 명령어에 ModR/M 바이트가 없으며, 피연산자의 주소가 명령어에 인코딩되어 있으며, 기본 레지스터, 인덱스 레지스터 또는 스케일링 팩터를 적용할 수 없습니다(예: far JMP(EA)).

B] VEX 접두사의 VEX.vvvv 필드는 범용 레지스터를 선택합니다.

C] ModR/M 바이트의 reg 필드는 제어 레지스터(예: MOV(0F20, 0F22))를 선택합니다.

D] ModR/M 바이트의 reg 필드는 디버그 레지스터(예: MOV(0F21,0F23))를 선택합니다.

E] ModR/M 바이트는 opcode를 따르고 피연산자를 지정합니다. 피연산자는 범용 레지스터 또는 메모리 주소입니다. 메모리 주소이면 세그먼트 레지스터와 베이스 레지스터, 인덱스 레지스터, 스케일링 팩터, 변위 중 어느 하나의 값으로 계산됩니다.

F] EFLAGS/RFLAGS 레지스터.

G] ModR/M 바이트의 reg 필드는 일반 레지스터(예: AX(000))를 선택합니다.

H] VEX 접두사의 VEX.vvvv 필드는 128비트 XMM 레지스터 또는 256비트 YMM 레지스터를 선택합니다
피연산자 유형별. 레거시 SSE에서 이 피연산자를 인코딩하는 경우 존재하지 않으며, 명령어를 다음으로 변경합니다
파괴적인 형태.

I] 즉시 데이터: 피연산자 값은 명령어의 후속 바이트로 인코딩됩니다.

J] 명령어에는 명령어 포인터 레지스터에 추가할 상대 오프셋(예: JMP(0E9), LOOP)이 포함되어 있습니다.

L] 8비트 즉시 상단 4비트는 128비트 XMM 레지스터 또는 256비트 YMM 레지스터를 선택합니다. 디터-
피연산자 유형별로 채굴(32비트 모드에서는 MSB가 무시됨)

M] ModR/M 바이트는 메모리(예를 들어, BOUND, LES, LDS, LSS, LFS, LGS,
CMPXCHG8B).

N] ModR/M 바이트의 R/M 필드는 포장된 쿼드워드인 MMX 기술 레지스터를 선택합니다.

O] 명령어에 ModR/M 바이트가 없습니다. 피연산자의 오프셋은 워드 또는 더블 워드로 코딩됩니다
(주소 크기 속성에 따라 다름) 명령어에 기본 레지스터, 인덱스 레지스터 또는 스케일링 팩터가 없습니다
적용할 수 있습니다(예: MOV(A0–A3)).

P] ModR/M 바이트의 reg 필드는 포장된 쿼드워드 MMX 기술 레지스터를 선택합니다.

Q] ModR/M 바이트는 opcode에 따르고 피연산자를 지정합니다. 피연산자는 MMX 기술입니다
register 또는 memory address. 만약 그것이 memory address이면, 그 주소는 segment register에서 계산됩니다
베이스 레지스터, 인덱스 레지스터, 스케일링 팩터 및 변위 중 어느 하나의 값을 포함합니다.

R] ModR/M 바이트의 R/M 필드는 일반 레지스터(예를 들어 MOV (0F20-0F23))만을 지칭할 수 있습니다.

S] ModR/M 바이트의 reg 필드는 세그먼트 레지스터(예: MOV(8C,8E))를 선택합니다.

U] ModR/M 바이트의 R/M 필드는 128비트 XMM 레지스터 또는 256비트 YMM 레지스터를 선택하며, 다음과 같이 결정됩니다
피연산자 유형.

V] ModR/M 바이트의 reg 필드는 128비트 XMM 레지스터 또는 256비트 YMM 레지스터를 선택하며, 다음과 같이 결정됩니다
피연산자 유형.

W] ModR/M 바이트는 opcode를 따르고 피연산자를 지정합니다.

X] DS:rSI 레지스터 쌍에 의해 어드레스되는 메모리(예: MOVS, CMPS, OUT 또는 LODS).

Y] ES:rDI 레지스터 쌍(예: MOVS, CMPS, INS, STOS 또는 SCAS)에 의해 어드레스되는 메모리.


가.2.2
피연산자와 유형에 대한 코드
피연산자 유형을 문서화하는 데 사용되는 약어는 다음과 같습니다:

a] 피연산자 크기에 따라 메모리에 두 개의 한 단어 피연산자 또는 메모리에 두 개의 이중 단어 피연산자
속성(BOUND 명령에서만 사용됨).

b] 연산자 크기 특성에 관계없이 바이트입니다.

c] 연산자 크기 특성에 따라 바이트 또는 워드.

d] 피연산자 크기 특성에 관계없이 이중 단어입니다.
A-2 Vol. 2DOPCODE MAP

dq] 피연산자 크기 특성에 관계없이 이중 사분면 단어입니다.

p] 피연산자 크기 특성에 따라 32비트, 48비트 또는 80비트 포인터.

pd] 128비트 또는 256비트 팩킹된 이중 정밀 부동 소수점 데이터.

pi] 쿼드워드 MMX 기술 레지스터(예: mm0).

ps] 128비트 또는 256비트 팩킹된 단일 정밀 부동 소수점 데이터입니다.

q] 쿼드워드(quadword), 피연산자 크기 속성에 관계없이.

q] 연산자 크기 특성에 관계없이 쿼드 쿼드워드(256비트)입니다.

s] 6바이트 또는 10바이트 의사 descript 또는.

sd] 128비트 이중 정밀 부동 데이터의 스칼라 요소.

ss] 128비트 단일 정밀 부동 데이터의 스칼라 요소.

si] 이중 단어 정수 레지스터(예: eax).

v] 연산자 크기 특성에 따라 워드, 더블 워드 또는 쿼드 워드(64비트 모드).

w] 피연산자 크기 속성에 관계없이 단어입니다.

x] 피연산자 크기 속성을 기반으로 dq 또는 qq.

y] 연산자 크기 특성에 따라 이중 단어 또는 쿼드 단어(64비트 모드).

z] 16비트 피연산자 크기를 나타내는 단어 또는 32비트 또는 64비트 피연산자 크기를 나타내는 이중 단어입니다.

REX 접두사
64 비트 모드에서의 명령어들의 경우 REX 접두사로 구분됩니다. REX 접두사의 역할로
GPR 과 SSE 레지스터들을 나타냄
64 비트 피연산자의 크기를 나타냄
Extended control 레지스터를 나타냄
를 들 수 있습니다.
참고로 모든 명령어들이 64 비트 모드에서 실행시키기 위해 REX 접두사를 사용해야 하는 것은 아닙니다. REX 접두사가 필요한 경우는 명령어에서 64 비트 레지스터들을 참조하던지, 피연산자의 크기가 64 비트 이던지 등의 경우 밖에 없습니다. 참고로 불필요하게 추가된 REX 접두사는 그냥 무시됩니다.
REX 접두사의 경우 명령어 Opcode 바로 앞에 위치해야 합니다. 이전에 말했듯이 일부 Opcode 들의 경우 필수적으로 와야 하는 접두사들이 있었는데, 이들 역시 REX 접두사 바로 앞에 와야 합니다. 예를 들어서 CVTDQ2PD 명령어의 경우 REX 접두사가 F3 과 0F E6 사이에 와야겠죠.

16bit addressing form with the mod r/m byte
				r8	AL	CL	DL	BL	AH	CH	DH	BH
				r16	AX	CX	DX	BX	SP	BP	SI	DI
				r32	EAX	ECX	EDX	EBX	ESP	EBP	ESI	EDI
				mm	MM0	MM1	MM2	MM3	MM4	MM5	MM6	MM7
				xmm	XMM0	XMM1	XMM2	XMM3	XMM4	XMM5	XMM6	XMM7
				opcode	0	1	2	3	4	5	6	7
				reg	000	001	010	011	100	101	110	111
Effective Address	Mod	R/M	Value Of Mod R/M Byte (In Hexadecimel)
[BX+SI]			00	000	00	08	10	18	20	28	30	38
[BX+DI]				001	01	09	11	19	21	29	31	39
[BP+SI]				010	02	0A	12	1A	22	2A	32	3A
[BP+DI]				011	03	0B	13	1B	23	2B	33	3B
[SI]				100	04	0C	14	1C	24	2C	34	3C
[DI]				101	05	0D	15	1D	25	2D	35	3D
disp16 2			110	06	0E	16	1E	26	2E	36	3E
[BX]				111	07	0F	17	1F	27	2F	37	3F
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[BX+SI]+disp8 3		01	000	40	48
[BX+DI]+disp8			001	41	49
[BP+SI]+disp8			010	42	4A
[BP+DI]+disp8			011	43	4B
[SI]+disp8			100	44	4C
[DI]+disp8			101	45	4D
[BP]+disp8			110	46	4E
[BX]+disp8			111	47	4F .. 이거 그냥 두개 표 합한거임.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[BX+SI]+disp16		10	000
[BX+DI]+disp16			001
[BP+SI]+disp16			010
[BP+DI]+disp16			011
[SI]+disp16			100
[DI]+disp16			101
[BP]+disp16			110
[BX]+disp16			111
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
EAX/AX/AL/MM0/XMM0	11	000
ECX/CX/CL/MM1/XMM1		001
EDX/DX/DL/MM2/XMM2		010
EBX/BX/BL/MM3/XMM3		011
ESP/SP/AHMM4/XMM4		100
EBP/BP/CH/MM5/XMM5		101
ESI/SI/DH/MM6/XMM6		110
EDI/DI/BH/MM7/XMM7		111
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

32bit addressing form with the mod r/m byte
r8	AL	CL	DL	BL	AH	CH	DH	BH
r16	AX	CX	DX	BX	SP	BP	SI	DI
r32	EAX	ECX	EDX	EBX	ESP	EBP	ESI	EDI
mm	MM0	MM1	MM2	MM3	MM4	MM5	MM6	MM7
xmm	XMM0	XMM1	XMM2	XMM3	XMM4	XMM5	XMM6	XMM7
reg	000	001	010	011	100	101	110	111

Effective Address	Mod	R/M
[EAX]			00	000
[ECX]				001
[EDX]				010
[EBX]				011
[--][--] 1			100
disp32 2			101
[ESI]				110
[EDI]				111

[EAX]+disp8 3		01	000
[ECX]+disp8			001
[EDX]+disp8			010
[EBX]+disp8			011
[--][--]+disp8			100
[EBP]+disp8			101
[ESI]+disp8			110
[EDI]+disp8			111

[EAX]+disp32		10	000
[ECX]+disp32			001
[EDX]+disp32			010
[EBX]+disp32			011
[--][--]+disp32			100
[EBP]+disp32			101
[ESI]+disp32			110
[EDI]+disp32			111

EAX/AX/AL/MM0/XMM0	11	000
ECX/CX/CL/MM/XMM1		001
EDX/DX/DL/MM2/XMM2		010
EBX/BX/BL/MM3/XMM3		011
ESP/SP/AH/MM4/XMM4		100
EBP/BP/CH/MM5/XMM5		101
ESI/SI/DH/MM6/XMM6		110
EDI/DI/BH/MM7/XMM7		111
////////////////////////////////////////////////////////////////////////////////////////////////////

32-Bit Addressing Forms with the SIB Byte
r32	EAX	ECX	EDX	EBX	ESP	[*]	ESI	EDI
base	000	001	010	011	100	101	110	111

Effective Address	Scale	Index
[EAX]			00	000
[ECX]				001
[EDX]				010
[EBX]				011
none				100
[EBP]				101
[ESI]				110
[EDI]				111

[EAX*2]			01	000
[ECX*2]				001
[EDX*2]				010
[EBX*2]				011
none				100
[EBP*2]				101
[ESI*2]				110
[EDI*2]				111
	
[EAX*4]			10	000
[ECX*4]				001
[EDX*4]				010
[EBX*4]				011
none				100
[EBP*4]				101
[ESI*4]				110
[EDI*4]				111

[EAX*8]			11	000
[ECX*8]				001
[EDX*8]				010
[EBX*8]				011
none				100
[EBP*8]				101
[ESI*8]				110
[EDI*8]				111

opcode list
1] nemonic types
type0 {
NN : NEMONIC
NN + 0 : NEMONIC Eb, Gb
NN + 1 : NEMONIC Ev, Gv
NN + 2 : NEMONIC Gb, Eb
NN + 3 : NEMONIC Gv, Ev
NN + 4 : NEMONIC AL, lb
NN + 5 : NEMONIC rAX, lz
};

type1 {
NN : NEMONIC
NN + 0 : NEMONIC eAX
NN + 1 : NEMONIC eCX
NN + 2 : NEMONIC eDX
NN + 3 : NEMONIC eBX
NN + 4 : NEMONIC eSP
NN + 5 : NEMONIC eBP
NN + 6 : NEMONIC eSI
NN + 7 : NEMONIC eDI
};

type2 {
NN : NEMONIC
NN + 0 : NEMONIC rAX/r8
NN + 1 : NEMONIC rCX/r9
NN + 2 : NEMONIC rDX/r10
NN + 3 : NEMONIC rBX/r11
NN + 4 : NEMONIC rSP/r12
NN + 5 : NEMONIC rBP/r13
NN + 6 : NEMONIC rSI/r14
NN + 7 : NEMONIC rDI/r15
};

type3{
NN : NEMONIC
NN + 0 : NEMONIC Eb, Gb
NN + 1 : NEMONIC Ev, Gv
};

type4(s){
if s == v, sA == rAX, ls = lv
if s == b, sA = AL, ls = lb
NN : NEMONIC
NN + 0 : NEMONIC sA/sr8, ls
NN + 1 : NEMONIC sC/sr9, ls
NN + 2 : NEMONIC sD/sr10, ls
NN + 3 : NEMONIC sB/sr11, ls
NN + 4 : NEMONIC sSP/sr12, ls
NN + 5 : NEMONIC sBP/sr13, ls
NN + 6 : NEMONIC sSI/sr14, ls
NN + 7 : NEMONIC sDI/sr15, ls
}

///////////////////////////////////////////////////////
2] operations
type0] 00 : ADD		// ADD a, b : 	a += b;
type0] 08 : OR		// OR a, b : 	a = a | b;
type0] 10 : ADC		// ADC a, b : 	a = a + b + carryFlag
type0] 18 : SBB		// SBB a, b : 	a = a - b - carryFlag
type0] 20 : AND		// AND a, b : 	a = a & b;
type0] 28 : SUB		// SUB a, b : 	a -= b;
type0] 30 : XOR		// XOR a, b : 	a = a ^ b;
type0] 38 : CMP		// CMP a, b : 	(a-b) -> update Flags

06 : PUSH ES^i64	// PUSH a :	push a data to stack 	
07 : POP ES^i64		// POP a : 	pop a data to stack
0E : PUSH CS^i64
0F : 2byte Escape (??)	// goto 2byte opcode map
16 : PUSH SS^i64
17 : POP SS^i64
1E : PUSH DS^i64
1F : POP DS^i64

26 : SEG=ES(Prefix)
2E : SEG=CS(Prefix)
36 : SEG=SS(Prefix)
3E : SEG=DS(Prefix)
64 : SEG=FS(Prefix)
65 : SEG=GS(Prefix)
66 : Operand Size(Prefix)
67 : Address Size(Prefix)
F0 : LOCK (Prefix)
F2 : REPNEXACQUIRE (Prefix)
F3 : REP/REPEXRELEASE (Prefix)

27 : DAA^i64	// decimel
2F : DAS^i64
37 : AAA^i64	// ascii
3F : AAS^i64

type1] 40 : INC^i64 (general register)	// INC a : 	++a;
type1] 48 : DEC^i64 (general register)	// DEC a : 	--a;

type2] 50 : PUSH^d64 (general register)
type2] 58 : POP^d64 (general register)

60 : PUSHA^i64 / PUSHAD^i64	// PUSHA :	push all register in stack.
61 : POPA^i64 / POPAD^i64	// POPA : 	pop all register in stack and save value to registers. 
62 : BOUND^i64 Gv, Ma		// BOUND a, b : if(64bitmod) UD=1; else if(a < (first16bit of b) || (last16bitof b) < a) BR=1;

63 : ARPL^i64 Ew, Gw / MOVSXD^o64 Gv, Ev	
//0x63 a, b : 	RPL = (lowest 2 bit of segment selector(SS))
		if(64bitmod){ 
			/*MOVSXD*/ 
			a = signExtension(b) }
		else {
			/*ARPL*/
			if (a[RPL] < b[RPL]) {ZF=1; a[RPL] = b[RPL]}
			else{ ZF=0;}
		}

68 : PUSH^d64 lz
69 : IMUL Gv, Ev, lz	// IMUL a, b, c : 	a = a * b; // signed multiply c는 절단되어 a에 저장됨? > 부호?
6A : PUSH^d64 lb
6B : IMUL Gv, Ev, lb
6C : (INS / INSB) Yb, DX 	// Input from Port to String
6D : (INS / INSW / INSD) Yz, DX
6E : (OUTS / OUTSB) DX, Xb
6F : (OUTS / OUTSW / OUTSD) DX, Xz

//short displacement jump on condition.
70 : (Jcc^f64, Jb) O
71 : (Jcc^f64, Jb) NO
72 : (Jcc^f64, Jb) B/NAE/C
73 : (Jcc^f64, Jb) NB/AE/NC
74 : (Jcc^f64, Jb) Z/E
75 : (Jcc^f64, Jb) NZ/NE
76 : (Jcc^f64, Jb) BE/NA
77 : (Jcc^f64, Jb) NBE/A
78 : (Jcc^f64, Jb) S
79 : (Jcc^f64, Jb) NS
7A : (Jcc^f64, Jb) P/PE
7B : (Jcc^f64, Jb) NP/PO
7C : (Jcc^f64, Jb) L/NGE
7D : (Jcc^f64, Jb) NL/GE
7E : (Jcc^f64, Jb) LE/NG
7F : (Jcc^f64, Jb) NLE/G

//Immediate Grp 1^1A
80 : (Immediate Grp 1^1A) Eb, lb
81 : (Immediate Grp 1^1A) Ev, lz
82 : (Immediate Grp 1^1A) Eb, lb^i64
83 : (Immediate Grp 1^1A) Ev, lb

type3] 84 : TEST
type3] 86 : XCHG

88 : MOV Eb, Gb
89 : MOV Ev, Gv
8A : MOV Gb, Eb
8B : MOV Gv, Ev
8C : MOV Ev, Sw
8D : LEA Gv, M
8E : MOV Sw, Ew
8F : Grp 1A^1A POP^d64

90 : NOP / PAUSE(F3)
// word, double word or quad word register with rAX
type2] 90 : XCHG

98 : CBW / CWDE / CDQE
99 : CWD / CDQ / CQO
9A : far CALL^i64 Ap
9B : FWAIT / WAIT
9C : PUSHF / D / Q^d64 / Fv
9D : POPF / D / Q^d64 / Fv
9E : SAHF
9F : LAHF

A0 : MOV AL, Ob
A1 : MOV rAX, Ov
A2 : MOV Ob, AL
A3 : MOV Ov, rAX

A4 : MOVS/B Yb, Xb
A5 : MOVS/W/D/Q Yv, Xv

A6 : CMPS/B Xb, Yb
A7 : CMPS/W/D Xv, Yv

A8 : TEST AL, lb
A9 : TEST rAX, lz

AA : STOS/B Yb, AL
AB : STOS/W/D/Q Yv, rAX

AC : LODS/B AL, Xb
AD : LODS/W/D/Q rAX, Xv

AE : SCAS/B AL, Yb
AF : SCAS/W/D/Q rAx, Yv

type4(b)] B0 : MOV
type4(v)] B8 : MOV

C0 : (Shift Grp 2^1A) Eb, lb
C1 : (Shift Grp 2^1A) Ev, lv

C2 : near RET^f64 lw
C3 : near RET^f64

C4 : LES^i64 Gz, Mp   / VEX+2byte
C5 : LDS^i64 GZ, Mp   / VEX+1byte

C6 : (Grp 11^1A - MOV) Eb, lb
C7 : (Grp 11^1A - MOV) Eb, lb

C8 : ENTER lw, lb
C9 : LEAVE^d64
CA : far RET lw
CB : far RET
CC : INT3
CD : INT lb
CE : INTO^i64
CF : IRET/D/Q

D0 : (Shift Grp 2^1A) Eb, 1
D1 : (Shift Grp 2^1A) Ev, 1
D2 : (Shift Grp 2^1A) Eb, CL
D3 : (Shift Grp 2^1A) Ev, CL

D4 : AAM^i64 lb
D5 : AAD^i64 lb

D6 : Unallocated
D7 : XLAT / XLATB
D8~DF : ESC (Escape to coprocessor instruction set)

E0 : (LOOPNE^f64 / LOOPNZ^f64) Jb
E1 : (LOOPE^f64 / LOOPZ^f64) Jb
E2 : LOOP^f64 Jb
E3 : JrCXZ^f64 Jb

E4 : IN AL, lb
E5 : IN eAX, lb
E6 : OUT lb, AL
E7 : OUT lb, eAX

E8 : near CALL^f64 Jz

E9 : near JMP^f64 Jz
EA : far JMP^i64 Ap
EB : short JMP^f64 Jb

EC : IN AL, DX
ED : IN eAX, DX

EE : OUT DX, AL
EF : OUT DX, eAX

F1 : INT1
F4 : HLT
F5 : CMC
F6 : (Unary Grp 3^1A) Eb
F7 : (Unary Grp 3^1A) Ev
F8 : CLC
F9 : STC
FA : CLI
FB : STI
FC : CLD
FD : STD
FE : INC/DEC Grp 4^1A
FF : INC/DEC Grp 5^1A


의사 코드 해석
//BOUND
//BOUND a, b : 
if(64bitmod) UD=1; else if(a < (first16bit of b) || (last16bit of b) < a) BR=1

//ARPL / MOVSXD
//0x63 a, b : 	
RPL = (lowest 2 bit of segment selector(SS))
if(64bitmod){ /*MOVSXD*/ 
	a = signExtension(b);
}
else { /*ARPL*/
	if (a[RPL] < b[RPL]) {ZF=1; a[RPL] = b[RPL]}
	else{ ZF=0;}
}

//INS
//INS a, b
if(64bitmod){
	if ((PE = 1) && ((CPL > IOPL) || (VM = 1)))
	{
		(* Protected mode with CPL > IOPL or virtual-8086 mode *)
		if (Any I/O Permission Bit for I/O port being accessed = 1)
	        {
			(* I/O operation is not allowed *)
	                #GP(0);
		}
	        else (* I/O operation is allowed *)
		{
	                DEST <- SRC; (* Read from I/O port *)
	        }
	}
	else (Real Mode or Protected Mode with CPL IOPL *)
	{
		DEST <- SRC; (* Read from I/O port *)
	}
}
else{
if (Byte transfer)
{ 
	if (DF = 0)
	{
		(E)DI <- (E)DI + 1; 
	}
	else 
	{
		(E)DI <- (E)DI - 1;
	}
}
else if (Word transfer)
{
	if (DF = 0)
	{
		(E)DI <- (E)DI + 2; 
        }
	else (E)
	{
		DI <- (E)DI - 2;;
	}
}
else (* Doubleword transfer *)
{
	if (DF = 0)
	{
		(E)DI <- (E)DI + 4; 
        }
	else
	{
		(E)DI <- (E)DI - 4; FI;
        }
}

IF -> if (
ELSEIF -> } else if (
ELSE } else 
THEN -> ) { 
FI -> }
Variables : instruction description tell us which variable is which operand.
See NIMONIC -> goto that instuction.
#NN -> throw execption.
	#BR : bound test fail
	#UD : Undefined

>> 의사코드를 일반 c 언어로 바꾸는 컨버터를 만들어서 에뮬레이션을 해도 될듯?
https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ig_expand=0
